<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>GraphQL Vol.2 - GraphQL 기초</title>
      <link href="/2020/03/09/graphql-java2/"/>
      <content type="html"><![CDATA[<h1 id="머리말"><a href="#머리말" class="headerlink" title="머리말"></a>머리말</h1><p>지난 포스트에서는 GraphQL에 대해서 간단하게 테스트를 해보았다.<br>이번 포스트에서는 <a href="https://graphql.org/learn/" target="_blank" rel="noopener">GraphQL의 Learn</a>에 나오는 내용을 따라 설명을 덧붙이려고 한다.<br>설명과 더불어 GraphiQL을 붙여 즉각 실행해볼 수 있게 구성하였다.</p><blockquote><p>테스트는 Heroku를 사용하고 있다.<br>Heroku를 무료로 사용할 시 유휴시간이 30분이 넘는 경우, 애플리케이션이 sleep 상태로 바뀐다.<br>그렇기 때문에 아래의 테스트 로딩이 느릴 수 있으나, 1분 이내에 로딩될 것이다.</p></blockquote><a id="more"></a><h1 id="질의문-Query-변경문-Mutation"><a href="#질의문-Query-변경문-Mutation" class="headerlink" title="질의문(Query) / 변경문(Mutation)"></a>질의문(Query) / 변경문(Mutation)</h1><h3 id="필드"><a href="#필드" class="headerlink" title="필드"></a>필드</h3><p>이전 포스트에서 체험했다시피, 클라이언트에서는 스키마에서 필요로하는 필드를 서버에 요청하여 응답받을 수 있다.</p><blockquote><p>► 버튼을 눌러 테스트할 수 있다.</p></blockquote><iframe style="width: 100%" height="400px" resize="vertical" frameBorder="0" src="https://supawer-graphql-study.herokuapp.com/graphiql?query=%7B%0A%20%20user%20%7B%0A%20%20%20%20name%0A%20%20%7D%0A%7D&variables=%7B%7D"></iframe><p>요청의 내용과 응답의 JSON의 각 필드는 대칭된다.</p><blockquote><p>위 요청 내용을 수정해서 테스트할 수도 있다. title을 지우고 ► 버튼을 눌러보자.</p></blockquote><p>또한 객체에 포함된 하위 타입에 대한 질의를 추가할 수 있다.<br>User가 재직하고 있는 Company를 조회해보자.</p><iframe style="width: 100%" height="400px" resize="vertical" frameBorder="0" src="https://supawer-graphql-study.herokuapp.com/graphiql?query=%7B%0A%20%20user%20%7B%0A%20%20%20%20name%0A%20%20%20%20company%20%7B%0A%20%20%20%20%20%20name%0A%20%20%20%20%20%20catchPhrase%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D&variables=%7B%7D"></iframe><p>응답에 포함된 User 또한 요청에 대응하는 JSON 구조를 취하고 있다.</p><h3 id="질의-인수-Arguments"><a href="#질의-인수-Arguments" class="headerlink" title="질의 인수(Arguments)"></a>질의 인수(Arguments)</h3><p>GraphQL은 조회를 위해 인수를 줄 수 있다.</p><iframe style="width: 100%" height="400px" resize="vertical" frameBorder="0" src="https://supawer-graphql-study.herokuapp.com/graphiql?query=%7B%0A%20%20user(id%3A%202)%20%7B%0A%20%20%20%20name%0A%20%20%20%20phone%0A%20%20%7D%0A%7D&variables=%7B%7D"></iframe><p>REST에서는 URL Path, Query String 등으로 인수를 넘겼다.<br>GraphQL에서는 모든 필드와 중첩된 객체에 스키마로 정의한 인수를 넘길 수 있다.<br>심지어 인수는 스칼라 타입(scala: String이나 Int)에도 보낼 수 있다.<br>다음 예제를 살펴보자.</p><iframe style="width: 100%" height="400px" resize="vertical" frameBorder="0" src="https://supawer-graphql-study.herokuapp.com/graphiql?query=%7B%0A%20%20user(id%3A%202)%20%7B%0A%20%20%20%20name(toUpperCase%3A%20true)%0A%20%20%20%20phone%0A%20%20%7D%0A%7D&variables=%7B%7D"></iframe><h3 id="별칭-할당-Aliases"><a href="#별칭-할당-Aliases" class="headerlink" title="별칭 할당(Aliases)"></a>별칭 할당(Aliases)</h3><p>아래와 같이 질의마다 변수를 할당하듯 별칭을 줄 수 있다.<br>user를 조회하지만, 각각 다른 별칭으로 참조할 수 있다.</p><iframe style="width: 100%" height="400px" resize="vertical" frameBorder="0" src="https://supawer-graphql-study.herokuapp.com/graphiql?query=%7B%0A%20%20me%3A%20user(id%3A%201)%20%7B%0A%20%20%20%20name%0A%20%20%20%20phone%0A%20%20%7D%0A%20%20you%3A%20user(id%3A2)%20%7B%0A%20%20%20%20name%0A%20%20%20%20phone%0A%20%20%7D%0A%7D&variables=%7B%7D"></iframe><h3 id="Fragments"><a href="#Fragments" class="headerlink" title="Fragments"></a>Fragments</h3><p>위에서 별칭을 할당할 때, <code>me</code>와 <code>you</code>가 동일한 필드를 조회하고 있었다.<br>GraphQL은 이러한 반복을 없앨 수 있도록, Fragments라 부르는 재사용 구문을 제공한다.</p><iframe style="width: 100%" height="400px" resize="vertical" frameBorder="0" src="https://supawer-graphql-study.herokuapp.com/graphiql?query=%7B%0A%20%20me%3A%20user(id%3A%201)%20%7B%0A%20%20%20%20...basigInfo%0A%20%20%7D%0A%20%20you%3A%20user(id%3A2)%20%7B%0A%20%20%20%20...basigInfo%0A%20%20%7D%0A%7D%0A%0Afragment%20basigInfo%20on%20User%20%7B%0A%20%20name%0A%20%20phone%0A%20%20email%0A%20%20website%0A%7D&variables=%7B%7D"></iframe><p><code>fragment</code>를 선언 후 fragment의 이름을 정의하고 <code>on</code> 뒤에 타입을 명시한다.<br>명시한 타입을 기반으로 fragment 내부 블럭에 넣을 수 있는 필드가 결정된다.</p><h3 id="연산자명"><a href="#연산자명" class="headerlink" title="연산자명"></a>연산자명</h3><p>여태까지 사용한 질의는 사실 모두 축약형이었다.<br>질의의 원형은 <code>query 연산자명 { ... }</code>의 형식이다.</p><iframe style="width: 100%" height="400px" resize="vertical" frameBorder="0" src="https://supawer-graphql-study.herokuapp.com/graphiql?query=query%20meAndYou%20%7B%0A%20%20me%3A%20user(id%3A%201)%20%7B%0A%20%20%20%20name%0A%20%20%7D%0A%20%20you%3A%20user(id%3A2)%20%7B%0A%20%20%20%20name%0A%20%20%7D%0A%7D&operationName=meAndYou&variables=%7B%7D"></iframe><p>연산 타입은 <code>query(질의)</code>, <code>mutation(변경)</code>, <code>subscription(구독)</code>의 3가지로 나뉜다.<br>연산자명은 모든 연산 타입에 대해서 명명할 수 있다.<br>연산자명은 디버깅을 하거나 서버 사이드에서 로깅을 할 때 유용하게 쓰일 수 있다.</p><h3 id="변수-Variables"><a href="#변수-Variables" class="headerlink" title="변수(Variables)"></a>변수(Variables)</h3><p>앞에서 인수를 통해서 다른 id의 User를 가져올 수 있는 것을 확인했었다.<br>만약 클라이언트에서 동적으로 다른 질의를 할 때, 매번 다른 인수를 가진 질의 문자열을 생성한다면 큰 낭비일 것이다.<br>질의를 템플릿으로 고정해두고, 우리는 변수를 넘길 수 있다.<br>변수는 주로 JSON 형식으로 정의한다.</p><blockquote><p>하단의 <code>QUERY VARIABLES</code>를 참조.</p></blockquote><iframe style="width: 100%" height="400px" resize="vertical" frameBorder="0" src="https://supawer-graphql-study.herokuapp.com/graphiql?query=query%20findAllPostsWithLimit(%24limit%3A%20Int)%20%7B%0A%20%20posts(limit%3A%20%24limit)%20%7B%0A%20%20%20%20title%0A%20%20%09comments(limit%3A%20%24limit)%20%7B%0A%20%20%20%20%20%20name%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D&operationName=findAllPostsWithLimit&variables=%7B%0A%20%20%22limit%22%3A%202%0A%7D"></iframe><p>Http Request의 모양은 다음과 같다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;graphql</span><br><span class="line">Host: localhost</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &quot;query findAllPostsWithLimit($limit: Int!) &#123; ... &#125;&quot;,</span><br><span class="line">  &quot;variables&quot;: &#123;</span><br><span class="line">    &quot;limit&quot;: 2</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;operationName&quot;: &quot;findAllPostsWithLimit&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 클라이언트에서는 질의를 매번 수정할 필요 없이, 변수만 정의해서 동적으로 다른 질의를 할 수 있다.<br>fragment에서도 변수를 그대로 사용할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fragment limitedComments on Post &#123;</span><br><span class="line">  title</span><br><span class="line">  body</span><br><span class="line">  comments(limit: $limit) &#123;</span><br><span class="line">    title</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="변수-정의"><a href="#변수-정의" class="headerlink" title="변수 정의"></a>변수 정의</h3><p>위와 같이 <code>$limit: Int</code>로 변수를 정의할 수 있다.<br>변수는 scala, enum, 혹은 input 타입으로 정의할 수 있다.<br>변수로 복잡한 객체를 넘겨야 하는 경우 서버에서 제공하는 input 타입을 사용한다.</p><p>위의 질의에서는 <code>Int</code> 타입으로 선언되었기 때문에 변수가 없어도 정상적으로 동작한다.<br>필수값으로 지정하려면 <code>Int!</code>로 정의해야 한다.<br>변수 없이 정상 동작하는지 확인해보자.</p><iframe style="width: 100%" height="400px" resize="vertical" frameBorder="0" src="https://supawer-graphql-study.herokuapp.com/graphiql?query=query%20findAllPostsWithLimit(%24limit%3A%20Int)%20%7B%0A%20%20posts(limit%3A%20%24limit)%20%7B%0A%20%20%20%20title%0A%20%20%7D%0A%7D&operationName=findAllPostsWithLimit&variables=%7B%7D"></iframe><h3 id="변수-기본값"><a href="#변수-기본값" class="headerlink" title="변수 기본값"></a>변수 기본값</h3><p>변수를 정의할 때 기본값을 넣을 수 있다.</p><iframe style="width: 100%" height="400px" resize="vertical" frameBorder="0" src="https://supawer-graphql-study.herokuapp.com/graphiql?query=query%20findAllPostsWithLimit(%24limit%3A%20Int%20%3D%202)%20%7B%0A%20%20posts(limit%3A%20%24limit)%20%7B%0A%20%20%20%20title%0A%20%20%7D%0A%7D&operationName=findAllPostsWithLimit&variables=%7B%7D"></iframe><h3 id="지시자-Directives"><a href="#지시자-Directives" class="headerlink" title="지시자(Directives)"></a>지시자(Directives)</h3><p>변수가 인수를 동적으로 전달할 수 있었다면, 지시자는 질의를 동적으로 변경할 수 있다.</p><iframe style="width: 100%" height="400px" resize="vertical" frameBorder="0" src="https://supawer-graphql-study.herokuapp.com/graphiql?query=query%20post(%24id%3A%20Int!%2C%20%24withComments%3A%20Boolean!)%20%7B%0A%20%20post(id%3A%20%24id)%20%7B%0A%20%20%20%20title%0A%20%20%20%20comments%20%40include(if%3A%20%24withComments)%20%7B%0A%20%20%20%20%20%20body%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D&operationName=post&variables=%7B%0A%20%20%22id%22%3A%201%2C%0A%20%20%22withComments%22%3A%20false%0A%7D"></iframe><p>기본적으로 GraphQL은 아래 2개의 지시자를 서버에서 구현하도록 정의했다.</p><ul><li><code>@include(if: Boolean)</code>: 인수가 <code>true</code>일 때에만 해당 필드를 포함.</li><li><code>@skip(if: Boolean)</code>: 인수가 <code>true</code>이면 해당 필드를 건너뜀.</li></ul><p>서버는 새로운 지시자를 정의하여 구현할 수도 있다.</p><h3 id="변경문-Mutations"><a href="#변경문-Mutations" class="headerlink" title="변경문(Mutations)"></a>변경문(Mutations)</h3><p>REST API에서 컨벤션 상에서 GET 요청으로는 변경을 일으키지 않듯이, GraphQL에서도 mutation으로 데이터를 변경한다.</p><p>아래 mutation을 살펴보자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mutation CreateReviewForEpisode($ep: Episode!, $review: ReviewInput!) &#123;</span><br><span class="line">  createReview(episode: $ep, review: $review) &#123;</span><br><span class="line">    stars</span><br><span class="line">    commentary</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># variables</span><br><span class="line">&#123;</span><br><span class="line">  &quot;ep&quot;: &quot;JEDI&quot;,</span><br><span class="line">  &quot;review&quot;: &#123;</span><br><span class="line">    &quot;stars&quot;: 5,</span><br><span class="line">    &quot;commentary&quot;: &quot;This is a great movie!&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같은 mutation에서 createReview를 통해 <code>ep</code>, <code>review</code> 변수가 제공되고,<br><code>star</code>와 <code>commentary</code>를 필드로 갖는 오브젝트가 반환된다.<br>즉 Java 서버의 경우 아래와 같은 메서드 시그니처로 정의할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReviewService</span> <span class="keyword">implements</span> <span class="title">GraphQLQueryResolver</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Review <span class="title">createReview</span><span class="params">(Integer stars, ReviewInput review)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 변수로 주어진 <code>review</code>가 앞에서 이야기했던 input 타입이다.</p><h3 id="mutation의-필드들"><a href="#mutation의-필드들" class="headerlink" title="mutation의 필드들"></a>mutation의 필드들</h3><p>질의문과 변경문의 가장 큰 차이점은, 질의문은 각 필드에 대해서 병렬로 실행되는 반면에 변경문의 각 필드는 순차 실행된다는 것이다.<br>즉, 한 번의 요청으로 <code>count</code>를 1 증가시키는 변경문을 두 개를 보낼 때,<br>첫 번째 요청이 완료되고 두 번째 요청이 실행되기 때문에 레이스 컨디션(Race Condition)에 빠질 우려가 없다.</p><h3 id="Inline-Fragments"><a href="#Inline-Fragments" class="headerlink" title="Inline Fragments"></a>Inline Fragments</h3><p>GraphQL은 타입을 추상화할 수 있는 interface를 제공하고 있으며, 다중 상속과 비슷한 union 타입 또한 제공하고 있다.</p><p>탈것에 대해 다음과 같이 스키마가 정의되어 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">interface Vehicle &#123;</span><br><span class="line">    id: Int!</span><br><span class="line">    manufacturer: String!</span><br><span class="line">    name: String!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Car implements Vehicle &#123;</span><br><span class="line">    id: Int!</span><br><span class="line">    manufacturer: String!</span><br><span class="line">    name: String!</span><br><span class="line">    tire: String!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Airplane implements Vehicle &#123;</span><br><span class="line">    id: Int!</span><br><span class="line">    manufacturer: String!</span><br><span class="line">    name: String!</span><br><span class="line">    flyLimit: String!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이러한 탈것 추상 타입의 구현체인 자동차, 비행기에 따라 다르게 동작하도록 하려면 아래와 같이 inline fragment를 추가한다.</p><iframe style="width: 100%" height="400px" resize="vertical" frameBorder="0" src="https://supawer-graphql-study.herokuapp.com/graphiql?query=%7B%0A%20%20vehicle(id%3A%201)%20%7B%0A%20%20%20%20name%0A%20%20%20%20manufacturer%0A%20%20%20%20...%20on%20Car%20%7B%0A%20%20%20%20%20%20tire%0A%20%20%20%20%7D%0A%20%20%20%20...%20on%20Airplane%20%7B%0A%20%20%20%20%20%20flyLimit%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D&variables=%7B%7D"></iframe><h3 id="메타-필드"><a href="#메타-필드" class="headerlink" title="메타 필드"></a>메타 필드</h3><p>위에서의 추상 타입에 대한 구현체에 따라 클라이언트의 동작이 달라져야 하는 경우가 있을 수 있다.<br>이럴 때에는 <code>__typename</code> 메타 필드를 추가하여 실제 어떤 구현체가 응답으로 오는지 확인할 수 있다.</p><iframe style="width: 100%" height="400px" resize="vertical" frameBorder="0" src="https://supawer-graphql-study.herokuapp.com/graphiql?query=%7B%0A%20%20vehicle(id%3A%201)%20%7B%0A%20%20%20%20__typename%0A%20%20%20%20name%0A%20%20%20%20manufacturer%0A%20%20%7D%0A%7D&variables=%7B%7D"></iframe><h1 id="스키마와-타입"><a href="#스키마와-타입" class="headerlink" title="스키마와 타입"></a>스키마와 타입</h1><h3 id="타입"><a href="#타입" class="headerlink" title="타입"></a>타입</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  vehicle &#123;</span><br><span class="line">    name</span><br><span class="line">    manufacturer</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 예제와 같이 GraphQL에서 타입은:</p><ul><li>root 오브젝트로 시작한다.</li><li>root 오브젝트에 field(<code>vehicle</code>)를 선언한다.</li><li>vehicle에서 받을 응답값을 선택적으로 기재한다.</li></ul><p>요청 스키마를 따라 구조화된 JSON 응답이 오기 때문에, 서버 응답을 예측할 수 있다.<br>때문에 클라이언트는 어떤 구조로 요청을 보낼 수 있는가에 대해 알아야 하는데 이를 스키마로 정의해두었다.</p><p>GraphQL을 제공하는 애플리케이션은 우리가 어떤 데이터를 질의할 수 있는지를 정의한 타입 셋을 가지고 있다.<br>그리고 애플리케이션은 질의가 들어오면 이 스키마를 가지고 질의 된 값들의 유효성을 검증한다.</p><h3 id="객체-타입과-필드"><a href="#객체-타입과-필드" class="headerlink" title="객체 타입과 필드"></a>객체 타입과 필드</h3><p>GraphQL의 스키마에서 가장 기초적인 것은 오브젝트 타입이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type Album &#123;</span><br><span class="line">  name: String!</span><br><span class="line">  photos: [Photo!]!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>타입의 이름을 <code>Album</code>로 지었다.</li><li><code>name</code>과 <code>photo</code>는 <code>Album</code> 객체의 필드이다.</li><li><code>String</code>은 GraphQL에서 기본으로 제공하는 스칼라 타입이다. 스칼라 타입은 다시 알아보기로 하자.</li><li><code>String!</code>에서 <code>!</code>는 해당 필드가 Null을 허용하지 않음을 뜻한다.(non-null)</li><li><code>[Photo!]!</code>는 <code>Photo</code> 객체의 배열을 뜻한다.<ul><li><code>[]!</code>는 즉 <code>photos</code> 변수는 Null일 수 없음을 의미한다.</li><li><code>Photo!</code>는 배열의 각 요소가 Null일 수 없음을 의미한다.</li></ul></li></ul><h3 id="Query와-Mutation-타입"><a href="#Query와-Mutation-타입" class="headerlink" title="Query와 Mutation 타입"></a>Query와 Mutation 타입</h3><p>GraphQL에서 대부분은 오브젝트 타입이지만, 아래의 두 타입은 특별한 취급을 받는다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">schema &#123;</span><br><span class="line">  query: Query</span><br><span class="line">  mutation: Mutation</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>모든 GraphQL 서비스는 <code>query</code> 타입을 가지며 <code>mutation</code> 타입은 있을 수도 있고 없을 수도 있다.<br>두 타입은 일반적인 오브젝트 타입과 같지만, 모든 GraphQL의 진입점이 된다는 점에서 특별 취급을 받는다.</p><iframe style="width: 100%" height="400px" resize="vertical" frameBorder="0" src="https://supawer-graphql-study.herokuapp.com/graphiql?query=query%20%7B%0A%20%20user%20%7B%0A%20%20%20%20name%0A%20%20%20%20email%0A%20%20%7D%0A%7D&variables=%7B%7D"></iframe><p>위 질의문을 수행하기 위해서 서비스는 아래의 스키마를 가져야 한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type Query &#123;</span><br><span class="line">  user: User</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>mutation</code> 또한 비슷한 방식으로 동작한다.</p><h3 id="스칼라-타입"><a href="#스칼라-타입" class="headerlink" title="스칼라 타입"></a>스칼라 타입</h3><p>GraphQL은 다음의 스칼라 타입을 기본으로 제공한다.</p><ul><li>Int: signed 32-bit integer.</li><li>Float: signed double-precision floating-point.(64-bit)</li><li>String: UTF-8 Character Sequence.</li><li>Boolean</li><li>ID: 고유 식별자를 나타내는 타입이다. 주로 객체를 다시 페치해오거나, 캐시키로 사용된다.<br>ID는 String과 같은 방식으로 직렬화되지만, ID는 난독화된다는 것에 의미를 가진다.</li></ul><p>대부분의 GraphQL 서비스는 자체적으로 스칼라 타입을 정의할 수 있다. Java도 가능하다.</p><p>아래와 같이 <code>Date</code> 타입을 정의할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scalas Date</span><br></pre></td></tr></table></figure><p>이에 대해 어떻게 역/직렬화할 것인지는 구현하기에 달렸다.</p><h3 id="Enumumeration"><a href="#Enumumeration" class="headerlink" title="Enumumeration"></a>Enumumeration</h3><p>아래와 같이 enum을 정의할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">enum UserProvider &#123;</span><br><span class="line">  NAVER</span><br><span class="line">  LINE</span><br><span class="line">  KAKAO</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GraphQL 서비스는 여러 언어로 구현될 수 있으므로 각자 언어에 맞게 enum을 구현한다.<br>enum을 객체로 다루는 언어에서는 그 혜택을 누릴 수 있겠지만,<br>Javascript와 같이 enum을 지원하지 않는 언어에서는 단순히 integer로 다뤄질 수 있다.<br><strong>하지만 이러한 서비스의 세부 동작은 클라이언트에 노출되지 않으며,</strong><br><strong>클라이언트는 정의된 enum 값들 내에서 질의, 변경을 수행할 수 있다.</strong></p><h3 id="List와-Non-null"><a href="#List와-Non-null" class="headerlink" title="List와 Non-null"></a>List와 Non-null</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type Album &#123;</span><br><span class="line">  name: String!</span><br><span class="line">  photos: [Photo!]!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>name</code>은 <code>String</code> 타입이며 <code>!</code>를 뒤에 붙여 <code>Non-Null</code>을 명시하였다.<br>이 제약으로 인해 서버는 <code>name</code>에 <code>null</code> 값을 줄 수 없으며, <code>null</code>이 오는 경우에는 오류를 발생시킨다.<br><code>Non-Null</code>은 인수에도 선언할 수 있다.<br>아래와 같이 <code>Non-Null</code>로 선언된 인수에 <code>null</code>이 들어가면 오류가 질의를 실행할 때 오류가 발생한다.</p><iframe style="width: 100%" height="400px" resize="vertical" frameBorder="0" src="https://supawer-graphql-study.herokuapp.com/graphiql?query=query%20getVehicleById(%24id%3A%20Int!)%7B%0A%20%20vehicle(id%3A%20%24id)%20%7B%0A%20%20%20%20name%0A%20%20%20%20manufacturer%0A%20%20%7D%0A%7D&variables=%7B%0A%20%20%22id%22%3A%20null%0A%7D&operationName=getVehicleById"></iframe><p><code>Non-Null</code>과 <code>List</code>는 조합해서 사용할 수 있다.</p><table><thead><tr><th>myField: [String!]</th><th></th></tr></thead><tbody><tr><td><code>myField: null</code></td><td>valid</td></tr><tr><td><code>myField: []</code></td><td>valid</td></tr><tr><td><code>myField: [&#39;a&#39;, &#39;b&#39;]</code></td><td>valid</td></tr><tr><td><code>myField: [&#39;a&#39;, null, &#39;b&#39;]</code></td><td>error</td></tr></tbody></table><table><thead><tr><th>myField: [String]!</th><th></th></tr></thead><tbody><tr><td><code>myField: null</code></td><td>error</td></tr><tr><td><code>myField: []</code></td><td>valid</td></tr><tr><td><code>myField: [&#39;a&#39;, &#39;b&#39;]</code></td><td>valid</td></tr><tr><td><code>myField: [&#39;a&#39;, null, &#39;b&#39;]</code></td><td>valid</td></tr></tbody></table><h3 id="인터페이스"><a href="#인터페이스" class="headerlink" title="인터페이스"></a>인터페이스</h3><p>GraphQL은 추상 타입으로 인터페이스를 제공한다.<br>인터페이스를 정의하고 구현하는 방법은 다음과 같다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">interface Vehicle &#123;</span><br><span class="line">  id: Int!</span><br><span class="line">  manufacturer: String!</span><br><span class="line">  name: String!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Car implements Vehicle &#123;</span><br><span class="line">  id: Int!</span><br><span class="line">  manufacturer: String!</span><br><span class="line">  name: String!</span><br><span class="line">  tire: String!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Airplane implements Vehicle &#123;</span><br><span class="line">  id: Int!</span><br><span class="line">  manufacturer: String!</span><br><span class="line">  name: String!</span><br><span class="line">  flyLimit: String!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h3><p>Union은 각 타입을 묶어낼 수 있다는 점이 인터페이스와 비슷하나 공통 필드가 선언되지 않는다는 점에서 차이가 있다.<br>다음과 같이 선언한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union SearchResult &#x3D; Album | Post | Todo</span><br></pre></td></tr></table></figure><p>클라이언트에서는 마치 통합 검색과도 같이 사용할 수 있다.</p><iframe style="width: 100%" height="400px" resize="vertical" frameBorder="0" src="https://supawer-graphql-study.herokuapp.com/graphiql?query=%7B%0A%20%20search(title%3A%20%22quos%22)%20%7B%0A%20%20%20%20...%20on%20Album%20%7B%0A%20%20%20%20%20%20title%0A%20%20%20%20%7D%0A%20%20%20%20...%20on%20Post%20%7B%0A%20%20%20%20%20%20title%0A%20%20%20%20%7D%0A%20%20%20%20...%20on%20Todo%20%7B%0A%20%20%20%20%20%20completed%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D&variables=%7B%7D"></iframe><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>여태까지는 enum이나 String 등의 스칼라 타입만 인수로 사용했었으나, 더 복잡한 객체 또한 인수로 넘길 수 있다.<br>이 경우 아래와 같이 <code>Input</code> 타입을 정의할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">input CommentInput &#123;</span><br><span class="line">  name: String!</span><br><span class="line">  email: String!</span><br><span class="line">  body: String!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>특정 Post에 댓글을 다는 변경을 다음과 같이 표현할 수 있겠다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mutation CreateComment($id: Int!, $comment: CommentInput) &#123;</span><br><span class="line">  createComment(id: $id, comment: $comment) &#123;</span><br><span class="line">    id</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Variable</span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: 1,</span><br><span class="line">  &quot;comment&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;댓글러&quot;,</span><br><span class="line">    &quot;email&quot;: &quot;댓글러@naver.com&quot;,</span><br><span class="line">    &quot;body&quot;: &quot;댓글&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="검증-Validation"><a href="#검증-Validation" class="headerlink" title="검증(Validation)"></a>검증(Validation)</h1><p>타입을 사용하기 때문에 GraphQL의 질의가 유효한지 여부를 미리 알 수 있다.<br>덕분에 서버와 클라이언트는 런타임으로 검증되기 전에 질의 생성 시점에서 유효하지 않은 질의를 알 수 있다.</p><p>fragment는 자기 자신을 참조하지 못한다. 아래 구문은 오류가 발생한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  task &#123;</span><br><span class="line">    ...TitleAndSubTasks</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fragment TitleAndSubTasks on Task &#123;</span><br><span class="line">  title</span><br><span class="line">  subTasks &#123;</span><br><span class="line">    ...TitleAndSubTasks</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>질의문은 해당 타입에 존재하는 필드만 선언해야 한다. 아래 구문은 오류가 발생한다.</p><iframe style="width: 100%" height="400px" resize="vertical" frameBorder="0" src="https://supawer-graphql-study.herokuapp.com/graphiql?query=%7B%0A%20%20todo(id%3A1)%20%7B%0A%20%20%20%20undefiendField%0A%20%20%7D%0A%7D&variables=%7B%7D"></iframe><p>또한 스칼라, enum 타입 외의 다른 타입을 질의한다면 반드시 하위 필드를 명시해야 한다.<br>아래 질의는 오류가 발생한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  todo(id: 1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Introspection"><a href="#Introspection" class="headerlink" title="Introspection"></a>Introspection</h1><p>GraphQL은 Introspection System으로 어떤 스키마가 정의되어 있는지 확인할 수 있다.<br><code>__schema</code> 필드를 사용하여, 어떤 타입들이 사용가능한 지 알 수 있다.</p><iframe style="width: 100%" height="400px" resize="vertical" frameBorder="0" src="https://supawer-graphql-study.herokuapp.com/graphiql?query=%7B%0A%20%20__schema%20%7B%0A%20%20%20%20types%20%7B%0A%20%20%20%20%20%20name%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D&variables=%7B%7D"></iframe><p>꽤 많은 타입들을 발견할 수 있다. 다음과 같이 정리해보자.</p><ul><li>사용자 정의 객체 타입: Query, Todo, Post 등 개발자가 정의한 타입.</li><li>스칼라 타입: String, Int, Boolean</li><li>Introspection System Type: __Schema, __Type, __TypeKind, __Field, __InputValue, __EnumValue, __Diretive</li></ul><p>마지막에 다룬 부분이 GraphQL의 스키마를 엿볼 수 있는 Introspection의 타입들이 되겠다.</p><p>아래와 같이 최초 진입점이었던 <code>Query</code>를 조회할 수 있다.</p><blockquote><p>GraphiQL에서 제공하는 우측 상단의 <code>&lt; Docs</code>와 비교해보자.</p></blockquote><iframe style="width: 100%" height="400px" resize="vertical" frameBorder="0" src="https://supawer-graphql-study.herokuapp.com/graphiql?query=%7B%0A%20%20__schema%20%7B%0A%20%20%20%20queryType%20%7B%0A%20%20%20%20%20%20name%0A%20%20%20%20%20%20fields%20%7B%0A%20%20%20%20%20%20%20%20name%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D&variables=%7B%7D"></iframe><p>특정 타입에 대해서는 <code>__type</code>으로 조회할 수 있다.</p><iframe style="width: 100%" height="400px" resize="vertical" frameBorder="0" src="https://supawer-graphql-study.herokuapp.com/graphiql?query=%7B%0A%20%20__type(name%3A%20%22Post%22)%20%7B%0A%20%20%20%20name%0A%20%20%20%20kind%0A%20%20%20%20fields%20%7B%0A%20%20%20%20%20%20name%0A%20%20%20%20%20%20type%20%7B%0A%20%20%20%20%20%20%20%20ofType%20%7B%0A%20%20%20%20%20%20%20%20%20%20name%0A%20%20%20%20%20%20%20%20%20%20kind%0A%20%20%20%20%20%20%20%20%20%20description%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%0A&variables=%7B%7D"></iframe><p>이러한 Introspection의 도움으로 IDE나 브라우저에서 좋은 UX툴을 만들 수 있다.<br>이미 우리가 체험한 <a href="https://supawer-graphql-study.herokuapp.com/graphiql" target="_blank" rel="noopener">GraphiQL</a>도 마찬가지이고 <a href="https://supawer-graphql-study.herokuapp.com/voyager" target="_blank" rel="noopener">Voyager</a> 또한 문서화할 때 유용하다.</p><h1 id="맺음말"><a href="#맺음말" class="headerlink" title="맺음말"></a>맺음말</h1><p>GraphQL에 대해서 기초적인 내용들을 익혀보았다.</p><p>GraphQL은 타입 기반으로 스키마를 미리 정의한다.<br>클라이언트는 그 스키마를 바탕으로 질의문을 생성, 조작할 수 있다.<br>미리 정의된 스키마가 있으므로 질의에 사용된 인수에 대한 유효성 검사를 쉽게할 수 있다.<br>또한 Introspection System을 제공하고 있으므로 유용한 헬퍼 툴을 만들기 쉽고, 문서화하기도 편리하다.</p><p>GraphQL을 어떻게 사용할 수 있는지는 알게 되었으나, 슬슬 백엔드에서는 어떻게 GraphQL을 구현했을 지 궁금할 즈음이다.<br>처음에는 체험하기, 기초, Spring Boot 연동의 3부작으로 포스트를 작성할 예정이었으나, 생각이 바뀌어 5부작이 될 것 같다.<br>체험하기, 기초, Best Practice, GraphQL Java, GraphQL On Spring Boot로 진행할 예정이다.</p>]]></content>
      
      <categories>
          
          <category> graphql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> graphql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GraphQL Vol.1 - GraphQL 체험해보기</title>
      <link href="/2020/03/07/graphql-java1/"/>
      <content type="html"><![CDATA[<h1 id="머리말"><a href="#머리말" class="headerlink" title="머리말"></a>머리말</h1><p>Github에서 제공하는 V3 API들을 보면서, 이거야말로 RESTful이구나 했었는데, V4로 넘어오면서 GraphQL을 사용하게 되었다.<br>Github은 자신들이 V4 API를 RESTful이 아닌 GraphQL로 작성한 이유를 다음과 같이 2가지로 이야기했다.</p><ul><li>확장성(Scalability)<ul><li>클라이언트는 자신이 필요한 정보를 취득하기 위해,<br>필연적으로 REST API의 하이퍼미디어를 사용하여 경로 탐색을 위한 반복적인 호출을 해야 한다.</li><li>클라이언트가 응답의 일부분만 필요로하더라도 Github은 API 명세에 정의한 모든 값을 채워서 응답했다.</li><li>때로는 어떠한 정보들을 조합하기 위해서, 2~3번의 별도의 API를 호출해야 한다. <a id="more"></a></li></ul></li><li>API 통합의 요구<ul><li>각 엔드포인트에서 필요로하는 OAuth 식별할 수 있어야 한다.</li><li>사용자가 보낸 파라미터에 대한 형안전성(type-safety) 보장해야 한다.</li><li>소스 코드로 문서를 생산할 수 있어야 한다.</li><li><a href="https://developer.github.com/v3/libraries/" target="_blank" rel="noopener">수동으로 제작/관리하는 클라이언트들</a>을 대체할 수 있는 무엇이 필요하다.</li></ul></li></ul><p><a href="https://graphql.org/" target="_blank" rel="noopener">GraphQL 페이지</a>보다는  Github Api V4의 <a href="https://developer.github.com/v4/" target="_blank" rel="noopener">About GraphQL</a>를 보면 GraphQL의 장점이 잘 소개되어 있다.<br>대략 다음과 같다.</p><p>GraphQL은:</p><ul><li>그 자체로 명세(Specification)를 나타낸다: 명세는 곧 API 서버의 스키마(Schema)를 결정한다.<br>또한 스키마는 클라이언트의 호출이 유효한지를 판단할 수 있다.</li><li>타입 기반(Type Based)이다: 스키마는 API에서 사용되는 타입과 각 타입 간의 관례를 정의한다.</li><li>자기성찰적이다(Introspective): 클라이언트는 스키마의 상세를 알기 위해 스키마를 질의(query)한다.<br>RESTful API들이 하위 도메인에 대한 경로들의 url을 제공한 것과 비슷하게, 스키마 구조를 파악하기 위한 스키마 호출을 할 수 있다.</li><li>계층적이다: JSON 응답의 구조와 GraphQL의 요청 구조가 동일하다.</li><li>애플리케이션 레이어에서 동작한다: GraphQL은 실제 저장될 모델이나, DB 질의 언어가 아니다.</li></ul><p>마지막 부분에 대한 부연 설명을 더하려고 한다.<br>spring framework에서 웹 애플리케이션을 작성할 떄,<br>개발자가 해야 하는 일은 요청처리 흐름에 따라 셋으로 나누자면<br><code>컨트롤러까지의 처리</code>/<code>서비스 로직처리</code>/<code>리파지토리&amp;외부 API 처리</code>정도로 볼 수 있을 것 같다.<br>컨트롤러까지가 담당해야 할 역할은 다음과 같다.</p><ul><li>Http Request의 인증/권한 검증</li><li>파라미터 유효성 검증</li><li>비즈니스 로직에서 처리할 수 있는 객체로 변환</li><li>비즈니스 로직의 결과(혹은 예외)를 적절한 Http Response(JSON/XML/HTML)로 응답</li></ul><p>이 중에서 GraphQL은 <code>파라미터 유효성 검증</code>과 <code>비즈니스 로직의 결과를 JSON으로 응답</code>해주는 역할을 해준다.</p><p>서론이 장황했다.<br>GraphQL의 내용이 상당하기에 여러 포스트로 나누어 소개하려고 한다.<br>우선 이번 문서에서는 GraphQL에 대해서 간단하게 설명하고 체험하는 것을 가이드하려 한다.</p><h1 id="GraphQL-기본"><a href="#GraphQL-기본" class="headerlink" title="GraphQL 기본"></a>GraphQL 기본</h1><h2 id="스키마"><a href="#스키마" class="headerlink" title="스키마"></a>스키마</h2><p>GraphQL에서는 API에서 다를 타입을 정의할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">type Query &#123;</span><br><span class="line">    todo(id: Int!): Todo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Todo &#123;</span><br><span class="line">    id: Int!</span><br><span class="line">    title: String!</span><br><span class="line">    completed: Boolean!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이러한 스키마 정의를 기반으로</p><ul><li>클라이언트는 자신이 필요한 정보들을 선별하여 요청을 보낼 수 있다.</li><li>서버는 요청의 파라미터들이 스키마에 부합하는지 유효성을 검증할 수 있다.</li><li>서버는 클라이언트에서 요청한 정보들만 내보낼 수 있게 된다.</li></ul><p>클라이언트가 필요한 정보를 선별해서 요청을 보낸다는 것은 잠시 후 테스트에서 살펴보도록 하자.</p><h2 id="요청-경로-Path"><a href="#요청-경로-Path" class="headerlink" title="요청 경로(Path)"></a>요청 경로(Path)</h2><p>RESTful API에서는 각 API의 경로가 고유한 도메인의 정보를 나타낸다.<br>하지만 GraphQL에서는 아래와 같이 <code>/graphql</code>에서 모든 쿼리를 처리한다.</p><table><thead><tr><th><img src="https://miro.medium.com/max/1600/1*qpyJSVVPkd5c6ItMmivnYg.png" alt="rest-graphql-comparison"></th></tr></thead><tbody><tr><td>출처 : <a href="https://blog.apollographql.com/graphql-vs-rest-5d425123e34b" target="_blank" rel="noopener">https://blog.apollographql.com/graphql-vs-rest-5d425123e34b</a></td></tr></tbody></table><p>앞선 스키마 예제에서 id가 1인 todo의 완료 여부(<code>completed</code>)를 가져오려면 다음과 같은 요청을 한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;graphql</span><br><span class="line">HOST: localhost</span><br><span class="line">User-Agent: test</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &quot;&#123; todo(id: 1) &#123; completed &#125; &#125;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 예제는 단순화한 예제이며, 실제로는 이것보다는 조금 복잡한 요청을 보내는 경우가 다수이다.<br>GET 방식으로도 요청을 보낼 수 있으며, Subscription 질의의 경우에는 웹소켓(Websocket)을 사용하기도 한다.</p><h1 id="GraphQL-체험해보기"><a href="#GraphQL-체험해보기" class="headerlink" title="GraphQL 체험해보기"></a>GraphQL 체험해보기</h1><h2 id="Post-Schema"><a href="#Post-Schema" class="headerlink" title="Post Schema"></a>Post Schema</h2><p>테스트로 쿼리해서 가져올 대상은 <a href="https://jsonplaceholder.typicode.com/" target="_blank" rel="noopener">JSONPlaceholder</a>에서 제공하는 todo, user 모델이다.<br>두 모델은 아래와 같은 구조로 되어 있으며, 서로 연관 관계를 맺고 있다.</p><ul><li>Todo(연관 관계 주인) -&gt; User = N:1</li></ul><p><strong>todo</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"id"</span>: <span class="string">"number"</span>,</span><br><span class="line">  <span class="attr">"userId"</span>: <span class="string">"number"</span>,</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"string"</span>,</span><br><span class="line">  <span class="attr">"completed"</span>: <span class="string">"boolean"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>user</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"id"</span>: <span class="string">"number"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"string"</span>,</span><br><span class="line">  <span class="attr">"username"</span>: <span class="string">"string"</span>,</span><br><span class="line">  <span class="attr">"email"</span>: <span class="string">"string"</span>,</span><br><span class="line">  <span class="attr">"address"</span>: &#123;</span><br><span class="line">    <span class="attr">"street"</span>: <span class="string">"string"</span>,</span><br><span class="line">    <span class="attr">"suite"</span>: <span class="string">"string"</span>,</span><br><span class="line">    <span class="attr">"city"</span>: <span class="string">"string"</span>,</span><br><span class="line">    <span class="attr">"zipcode"</span>: <span class="string">"string"</span>,</span><br><span class="line">    <span class="attr">"geo"</span>: &#123;</span><br><span class="line">      <span class="attr">"lat"</span>: <span class="string">"string"</span>,</span><br><span class="line">      <span class="attr">"lng"</span>: <span class="string">"string"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"phone"</span>: <span class="string">"string"</span>,</span><br><span class="line">  <span class="attr">"website"</span>: <span class="string">"string"</span>,</span><br><span class="line">  <span class="attr">"company"</span>: &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"string"</span>,</span><br><span class="line">    <span class="attr">"catchPhrase"</span>: <span class="string">"string"</span>,</span><br><span class="line">    <span class="attr">"bs"</span>: <span class="string">"string"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="테스트-해보기"><a href="#테스트-해보기" class="headerlink" title="테스트 해보기"></a>테스트 해보기</h2><h3 id="첫번째-테스트"><a href="#첫번째-테스트" class="headerlink" title="첫번째 테스트"></a>첫번째 테스트</h3><p>아래 테스트는 Heroku에 연결되어 있다.</p><p><strong>Heroku는 무료로 사용할 때, 요청이 없는 동안 어플리케이션이 sleep 모드로 전환되는 경우가 있어, 로딩이 조금 오래 걸릴 수 있다.</strong></p><p>아래의 테스트(iframe)이 로딩되었다면, ► 버튼을 눌러보자.</p><iframe style="width: 100%" height="500px" resize="vertical" frameBorder="0" src="https://supawer-graphql-study.herokuapp.com/graphiql?query=%7B%0A%20%20todos%20%7B%0A%20%20%20%20id%0A%20%20%20%20title%0A%20%20%20%20completed%0A%20%20%7D%0A%7D"></iframe><p>왼쪽 박스가 요청을 나타내고 오른쪽 박스의 부분이 응답을 나타낸다.<br>요청한 내용의 구조 그대로 JSON의 응답이 오는 것을 확인할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  todos &#123;</span><br><span class="line">    id</span><br><span class="line">    title</span><br><span class="line">    completed</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 테스트 예제에서 id를 지우거나, title을 지우거나 한 후 다시 실행시켜보자.</p><h3 id="연관-타입-추가-호출"><a href="#연관-타입-추가-호출" class="headerlink" title="연관 타입 추가 호출"></a>연관 타입 추가 호출</h3><p>위 예제에서는 응답이 장황해지는 것을 피하고자 User를 포함하지 않았다.<br>아래 예제를 실행시켜보자.</p><iframe style="width: 100%" height="500px" resize="vertical" frameBorder="0" src="https://supawer-graphql-study.herokuapp.com/graphiql?query=%7B%0A%20%20todos(limit%3A%202)%20%7B%0A%20%20%20%20id%0A%20%20%20%20title%0A%20%20%20%20completed%0A%20%20%20%20user%20%7B%0A%20%20%20%20%20%20name%0A%20%20%20%20%20%20phone%0A%20%20%20%20%20%20address%20%7B%0A%20%20%20%20%20%20%20%20city%0A%20%20%20%20%20%20%20%20zipcode%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D"></iframe><p>우선 아래와 같이 <code>todos</code> 조회할 때 limit라는 파라미터를 넘기고 있다.<br>이 부분은 질의에 파라미터를 포함할 수 있다는 정도로 이해하고 넘어가자.</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- todos &#123;</span></span><br><span class="line"><span class="addition">+ todos(limit: 2) &#123;</span></span><br></pre></td></tr></table></figure><p>여기서 설명하고 싶은 점은, 클라이언트가 자신이 필요로한느 정보들을 서버에게 요청할 수 있다는 점이다.<br>또한 앞에서 스키마의 구조가 자기성찰적(Introspective)라고 했던 것도, 결국 스키마는 스키마를 포함한다는 내용으로 이해할 수 있다.<br>todos를 조회하면서 파라미터를 넣었듯이 하위에 포함되는 스키마에도 파라미터를 넣을 수 있다.</p><iframe style="width: 100%" height="500px" resize="vertical" frameBorder="0" src="https://supawer-graphql-study.herokuapp.com/graphiql?query=%7B%0A%20%20posts(limit%3A%202)%20%7B%0A%20%20%20%20id%0A%20%20%20%20title%0A%20%20%20%20comments(limit%3A%202)%20%7B%0A%20%20%20%20%20%20id%0A%20%20%20%20%20%20email%0A%20%20%20%20%20%20name%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D"></iframe><h3 id="여러-모델-받기"><a href="#여러-모델-받기" class="headerlink" title="여러 모델 받기"></a>여러 모델 받기</h3><p>앞서 Github API를 사용하는 클라이언트들에서 자신들이 원하는 화면을 구성하기 위해서는 여러 API를 호출해야 한다고 했다.</p><p>아래 예제를 실행시켜보자.</p><iframe style="width: 100%" height="500px" resize="vertical" frameBorder="0" src="https://supawer-graphql-study.herokuapp.com/graphiql?query=query%20getAll(%24id%3A%20Int!)%20%7B%0A%20%20thisIsPost%3A%20post(id%3A%20%24id)%20%7B%0A%20%20%20%20title%0A%20%20%20%20body%0A%20%20%7D%0A%20%20thisIsTodo%3A%20todo(id%3A%20%24id)%20%7B%0A%20%20%20%20title%0A%20%20%20%20completed%0A%20%20%7D%0A%20%20albumList%3A%20album(id%3A%20%24id)%20%7B%0A%20%20%20%20title%0A%20%20%20%20photos(limit%3A%202)%20%7B%0A%20%20%20%20%20%20title%0A%20%20%20%20%20%20thumbnailUrl%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D&variables=%7B%0A%20%20%22id%22%3A%201%0A%7D&operationName=getAll"></iframe><p><code>$id</code>에 대한 정의는 테스트 툴 하단의 <code>QUERY VARIABLES</code>를 열어보면 확인할 수 있다.<br>클라이언트에서 <code>thisIsPost</code>에 Post 질의 내용을, <code>thisIsTodo</code>에 Todo의 질의 내용을 각각 응답값으로 받도록 요청했다.</p><h3 id="Introspection"><a href="#Introspection" class="headerlink" title="Introspection"></a>Introspection</h3><p>이미 확인한 사람도 있겠지만, 상단 메뉴 우측에 <code>&lt; Docs</code>를 열어서 질의문들이나 각 타입에 대한 설명을 확인할 수 있다.</p><iframe style="width: 100%" height="500px" resize="vertical" frameBorder="0" src="https://supawer-graphql-study.herokuapp.com/graphiql?query=%7B%0A%20%20__schema%20%7B%0A%20%20%20%20types%20%7B%0A%20%20%20%20%20%20name%0A%20%20%20%20%20%20description%0A%20%20%20%20%20%20fields(includeDeprecated%3A%20false)%20%7B%0A%20%20%20%20%20%20%20%20name%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D"></iframe><p>앞에서 <code>GraphQL은 자기성찰적이다(Introspective): 클라이언트는 스키마의 상세를 알기 위해 스키마를 질의(query)한다</code>라고 설명한 것과 같이 <code>__schema</code>를 질의해보면, 내부에서 어떤 스키마가 정의되어 있는지 확인할 수 있다.</p><p>이를 기반으로 <a href="https://supawer-graphql-study.herokuapp.com/voyager" target="_blank" rel="noopener">Voyager 툴</a>은 다이어그램으로 표현해주기까지 한다.</p><h1 id="맺는말"><a href="#맺는말" class="headerlink" title="맺는말"></a>맺는말</h1><p>조금 심심하긴 하지만 이 체험하기 포스트는 이 정도로 마무리하려고 한다.</p><p>필자는 백엔드 서버 개발자이지만, 체험하기를 주제로 다루다 보니,<br>아무래도 요청을 보내고 응답을 받는 클라이언트의 입장이 부각된 것 같다.</p><p>여기까지만 봤을 때의 장점을 추리자면 다음과 같이 이야기할 수 있을 것 같다.</p><ul><li>새로운 API를 작성/호출하지 않는다.<ul><li>서버는 매번 새로운 API를 작성하지 않아도 되고,</li><li>클라이언트는 새로운 API를 또 비동기로 호출해서 조합해내고, 각각의 API의 Timeout은 어쩌니 고민하지 않아도 된다.</li></ul></li><li>네트워크 비용을 줄일 수 있다.<ul><li>클라이언트에서 필요한 값만 요청하고 응답받을 수 있다.</li></ul></li></ul><p>한 번 체험해본 것만으로는 REST API에 비해 어떠한 장점이 있는지, 피부에 와닿지 않을 것 같다.<br>위에서 설명한 장점 외에도 GraphQL을 더 깊게 공부한다면 더 많은 장점을 발견할 수 있다.</p><p>전체적인 구성을 체험해보기/GraphQL 이론/Spring Boot와 접목으로 생각하고 있는데, 갈 길이 멀다.</p><p>처음 GraphQL에 대해 배워보자 하는 분들께 조금이나마 도움이 되었으면 한다.</p>]]></content>
      
      <categories>
          
          <category> graphql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> graphql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>(Spring Boot)오류 처리에 대해</title>
      <link href="/2019/04/04/spring-error-handling/"/>
      <content type="html"><![CDATA[<h1 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h1><p>오류 처리는 어플리케이션 개발에 있어 매우 큰 부분을 차지한다.<br>오류를 예측하는 것과 예방하는 것, 그리고 <code>오류를 빨리 발견하고 고칠 수 있는 것</code>은 훌륭한 개발자의 필수조건이라고 생각한다.<br>본 문서에서는 Spring에서 어떻게 예외처리 잘 할 수 있도록 도와주는지를 알아보고 공유하려한다.</p><a id="more"></a><h1 id="ErrorController"><a href="#ErrorController" class="headerlink" title="ErrorController"></a>ErrorController</h1><p>먼저 아래 Spring Boot에서 기본적으로 오류처리를 어떻게 해주는지 살펴보자.<br>아래는 404 Not Found에 대해서 html, json 응답 예제이다.</p><p><strong>GET /123</strong></p><p><img src="/images/spring-error-handling/notfound.png" alt="image.png"></p><p><strong>GET /123 - json 응답</strong></p><ul><li>Content-Type: application/json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"timestamp"</span>: <span class="string">"2019-02-15T21:48:44.447+0000"</span>,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">404</span>,</span><br><span class="line">  <span class="attr">"error"</span>: <span class="string">"Not Found"</span>,</span><br><span class="line">  <span class="attr">"message"</span>: <span class="string">"No message available"</span>,</span><br><span class="line">  <span class="attr">"path"</span>: <span class="string">"/123"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위에서 살펴본 것과 같이 별다른 설정 없이 spring boot에서 웹 어플리케이션을 실행하면 기본적으로 오류 처리가 되고 있음을 알 수 있다.<br>그렇다면 어떠한 설정으로 spring boot에서 오류를 처리하는지 먼저 spring boot의 오류 처리에 대한 properties를 살펴보자.</p><p><strong>Spring Boot의 기본 오류 처리 properties</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># spring boot의 기본 properties</span></span><br><span class="line"><span class="attr">server.error:</span></span><br><span class="line">  <span class="attr">include-exception:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">include-stacktrace:</span> <span class="string">never</span> <span class="comment"># 오류 응답에 stacktrace 내용을 포함할 지 여부</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">'/error'</span> <span class="comment"># 오류 응답을 처리할 Handler의 경로</span></span><br><span class="line">  <span class="attr">whitelabel.enabled:</span> <span class="literal">true</span> <span class="comment"># 서버 오류 발생시 브라우저에 보여줄 기본 페이지 생성 여부</span></span><br></pre></td></tr></table></figure><ul><li><code>server.error.include-exception</code> : 응답에 exception의 내용을 포함할지 여부</li><li><code>server.error.include-stacktrace</code> : 응답에 stacktrace 내용을 포함할지 여부</li><li><code>server.error.path</code> : 오류 응답을 처리할 핸들러(ErrorController)의 path</li><li><code>server.error.whitelabel.enabled</code> : 브라우저 요청에 대해 서버 오류시 기본으로 노출할 페이지를 사용할지 여부</li></ul><p><code>server.error.whitelabel.enabled</code>의 기본값이 <code>true</code>이기 때문에 위에서와 같이 오류 페이지가 노출되고 있었다<br>아래 스크린샷은 <code>include-exception</code>과 <code>include-stacktrace</code>를 활성화하면 아래와 같이 응답을 받을 수 있다.</p><p><strong>HTML 응답</strong></p><p><img src="/images/spring-error-handling/error-html.png" alt="errorhtml"></p><p><strong>json 응답</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"timestamp"</span>: <span class="string">"2019-04-04T09:31:27.931+0000"</span>,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">500</span>,</span><br><span class="line">  <span class="attr">"error"</span>: <span class="string">"Internal Server Error"</span>,</span><br><span class="line">  <span class="attr">"exception"</span>: <span class="string">"java.lang.IllegalStateException"</span>,</span><br><span class="line">  <span class="attr">"message"</span>: <span class="string">"test"</span>,</span><br><span class="line">  <span class="attr">"trace"</span>: <span class="string">"java.lang.IllegalStateException: test ...(길어서 줄임)"</span>,</span><br><span class="line">  <span class="attr">"path"</span>: <span class="string">"/rest-test"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-Boot의-기본-오류-처리-BasicErrorController"><a href="#Spring-Boot의-기본-오류-처리-BasicErrorController" class="headerlink" title="Spring Boot의 기본 오류 처리 - BasicErrorController"></a>Spring Boot의 기본 오류 처리 - BasicErrorController</h2><p>그렇다면 Spring Boot에서는 어떻게 이런 기본 처리를 하고 있는 것일까.<br>Spring Boot는 오류가 발생하면 <code>server.error.path</code>에 설정된 경로에서 요청을 처리하게 한다.<br>Spring Boot에서는 기본적으로 BasicErrorController가 등록이 되어 해당 요청을 처리하게 된다.<br>BasicErrorController는 대략적으로 아래와 같이 구현되어 있다.<br>전반적으로 소스코드를 모두 읽어보면 좋겠지만 주요한 곳에 번호를 붙여 아래에 설명을 달아두었다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;"</span>) <span class="comment">// 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicErrorController</span> <span class="keyword">extends</span> <span class="title">AbstractErrorController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getErrorPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.errorProperties.getPath();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping</span>(produces = MediaType.TEXT_HTML_VALUE) <span class="comment">// 2)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">            </span><br><span class="line">    HttpStatus status = getStatus(request);</span><br><span class="line">    Map&lt;String, Object&gt; model =</span><br><span class="line">      getErrorAttributes(request, isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class="line"></span><br><span class="line">    response.setStatus(status.value());</span><br><span class="line">    ModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class="line">    <span class="keyword">return</span> (modelAndView != <span class="keyword">null</span>) ? modelAndView : <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>, model);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping</span> <span class="comment">// 3)</span></span><br><span class="line">  <span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4)</span></span><br><span class="line">    Map&lt;String, Object&gt; body =</span><br><span class="line">      getErrorAttributes(request, isIncludeStackTrace(request, MediaType.ALL));</span><br><span class="line">    HttpStatus status = getStatus(request);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(body, status);</span><br><span class="line">  &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>Spring 환경 내에 <code>server.error.path</code> 혹은 <code>error.path</code>로 등록된 property의 값을 넣거나, 없는 경우 <code>/error</code>를 사용한다.</li><li>HTML로 응답을 주는 경우 <code>errorHtml</code>에서 응답을 처리한다.</li><li>HTML 외의 응답이 필요한 경우 <code>error</code>에서 처리한다.</li><li>실질적으로 view에 보낼 model을 생성한다</li></ol><blockquote><p><strong>BasicErrorController 정리</strong><br><code>BasicErrorController</code>에서는 HTML 요청, 그 외의 요청을 나누어서 처리할 핸들러를 등록하고 <code>getErrorAttributes</code>를 통해 응답을 위한 모델을 생성한다.</p></blockquote><h2 id="Spring-Boot의-기본-오류-처리-AbstractErrorController와-ErrorAttributes"><a href="#Spring-Boot의-기본-오류-처리-AbstractErrorController와-ErrorAttributes" class="headerlink" title="Spring Boot의 기본 오류 처리 - AbstractErrorController와 ErrorAttributes"></a>Spring Boot의 기본 오류 처리 - AbstractErrorController와 ErrorAttributes</h2><p><code>getErrorAttributes</code>를 조금 더 깊게 살펴보자.<br><code>getErrorAttributes</code>는 <code>BasicErrorController</code>의 상위 클래스인 <code>AbstractErrorController</code>에 구현되어 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractErrorController</span> <span class="keyword">implements</span> <span class="title">ErrorController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ErrorAttributes errorAttributes;</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    WebRequest webRequest = <span class="keyword">new</span> ServletWebRequest(request);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.errorAttributes.getErrorAttributes(webRequest, includeStackTrace);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>구현된 내용을 보면 <code>ErrorAttributes</code> 인터페이스의 <code>getErrorAttributes</code>를 호출하는 것을 알 수 있다.(위임자 패턴)<br>별도로 <code>ErrorAttributes</code>를 등록하지 않았다면 Spring Boot는 <code>DefaultErrorAttributes</code>를 사용한다.<br>아래는 <code>DefaultErrorAttributes</code>의 일부 내용이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ErrorAttributes</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 요청을 기반으로 모델을 생성</span></span><br><span class="line"><span class="function">Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, <span class="keyword">boolean</span> includeStackTrace)</span></span>;</span><br><span class="line">  <span class="comment">// 요청에서 Throwable을 획득</span></span><br><span class="line"><span class="function">Throwable <span class="title">getError</span><span class="params">(WebRequest webRequest)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> DefaultErrorAttributes &#123;</span><br><span class="line">  <span class="comment">// 생성자 및 메서드</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest request, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; errorAttributes = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    errorAttributes.put(<span class="string">"timestamp"</span>, <span class="keyword">new</span> Date()); <span class="comment">// timestamp 생성</span></span><br><span class="line">    addStatus(errorAttributes, request); <span class="comment">// status 생성</span></span><br><span class="line">    addErrorDetails(errorAttributes, request, includeStackTrace); <span class="comment">// 오류 상세 내용</span></span><br><span class="line">    addPath(errorAttributes, request); <span class="comment">// path 생성</span></span><br><span class="line">    <span class="keyword">return</span> errorAttributes;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ErrorAttributes에서 가져온 모델로 응답을 생성</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"timestamp"</span>: <span class="string">"2019-02-15T21:48:44.447+0000"</span>,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">404</span>,</span><br><span class="line">  <span class="attr">"error"</span>: <span class="string">"Not Found"</span>,</span><br><span class="line">  <span class="attr">"message"</span>: <span class="string">"No message available"</span>,</span><br><span class="line">  <span class="attr">"path"</span>: <span class="string">"/123"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="확장-포인트-ErrorAttributes"><a href="#확장-포인트-ErrorAttributes" class="headerlink" title="확장 포인트 - ErrorAttributes"></a>확장 포인트 - ErrorAttributes</h2><p>위에서 살펴봤듯이 <code>ErrorAttributes</code>에서는 오류가 발생했을 때 응답을 내려줄 모델을 생성하고 있다.<br>여기서 우리는 <code>ErrorAttributes</code> 인터페이스를 마음껏 구현할 수 있다. Spring에서 제공하는 확장 포인트인 것이다.<br>개발자가 <code>ErrorAttributes</code>를 구현하여 bean으로 등록하면 <code>BasicErrorController</code>는 해당 <code>ErrorAttributes</code>를 사용한다.<br>아래는 임의로 모델에 <code>&quot;greeting&quot;: &quot;Hello&quot;</code>를 추가한 예제이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomErrorAttributes</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">super</span>.getErrorAttributes(webRequest, includeStackTrace);</span><br><span class="line">        result.put(<span class="string">"greeting"</span>, <span class="string">"Hello"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>응답 예제</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"timestamp"</span>: <span class="string">"2019-02-15T22:24:41.275+0000"</span>,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">404</span>,</span><br><span class="line">  <span class="attr">"error"</span>: <span class="string">"Not Found"</span>,</span><br><span class="line">  <span class="attr">"message"</span>: <span class="string">"No message available"</span>,</span><br><span class="line">  <span class="attr">"path"</span>: <span class="string">"/123"</span>,</span><br><span class="line">  <span class="attr">"greeting"</span>: <span class="string">"Hello"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HTML-View-연계-404-html-4xx-html"><a href="#HTML-View-연계-404-html-4xx-html" class="headerlink" title="HTML View 연계 - 404.html, 4xx.html"></a>HTML View 연계 - 404.html, 4xx.html</h2><p>본 문서에서는 View Template Engine으로 <a href="https://mustache.github.io/" target="_blank" rel="noopener">Mustache</a>를 사용했다.<br>이 경우 Spring은 view를 <code>src/main/resources/templates</code> 하위 경로에서 찾는다.(View Template Engine 구현에 따라 다를 수 있다)<br>이 때 기본 경로 하위에 <code>/error/{응답코드}</code>로 view의 이름을 작성하는 경우<br><code>ErrorController</code>에서 응답 코드에 맞게 해당 view로 응답을 내려줄 수 있다.</p><blockquote><p>본 문서에서는 HTML view의 접미사(suffix)를 <code>.html</code>로 사용했다</p></blockquote><p><strong>src/main/resources<code>/templates/error/404.html</code> 작성</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>404오류<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">timestamp: &#123;&#123;timestamp&#125;&#125;</span><br><span class="line">error: &#123;&#123;error&#125;&#125;</span><br><span class="line">message: &#123;&#123;message&#125;&#125;</span><br><span class="line">path: &#123;&#123;path&#125;&#125;</span><br><span class="line">greeting: &#123;&#123;greeting&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위와 같이 응답코드로 view 이름을 작성한 경우 404 응답은 위 view로 응답이 처리된다.<br>더 넓게 <code>4xx.html</code>과 같은 명명으로 400번 대의 응답코드를 모두 처리할 수도 있다.</p><h2 id="View를-가져오는-방법-TemplateAvailabilityProvider"><a href="#View를-가져오는-방법-TemplateAvailabilityProvider" class="headerlink" title="View를 가져오는 방법 - TemplateAvailabilityProvider"></a>View를 가져오는 방법 - TemplateAvailabilityProvider</h2><p>Spring은 어떻게 위와 같은 방식으로 view를 가져왔을까.<br>이는 <code>TemplateAvailablityProvider</code>로 구현되어 있다.<br><code>TemplateAvailabilityProvider</code> 인터페이스의 <code>isTemplateAvailable()</code>을 호출하여 view를 resolve할 수 있는지 여부를 파악한다.<br>현재 프로젝트에 쓰인 Mustache에 대해서는 <code>MustacheTemplateAvailabilityProvider</code> 구현체가 동작한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MustacheTemplateAvailabilityProvider</span> <span class="keyword">implements</span> <span class="title">TemplateAvailabilityProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTemplateAvailable</span><span class="params">(String view Environment environment,</span></span></span><br><span class="line"><span class="function"><span class="params">      ClassLoader classLoader, ResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    String prefix = environment.getProperty(<span class="string">"spring.mustache.prefix"</span>, DEFAULT_PREFIX); <span class="comment">// 1)</span></span><br><span class="line">    String suffix = environment.getProperty(<span class="string">"spring.mustache.suffix"</span>, DEFAULT_SUFFIX); <span class="comment">// 2)</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> resourceLoader.getResource(prefix + view + suffix).exists(); <span class="comment">// 3)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>spring.mustache.prefix</code>의 기본값 “classpath:/templates/“</li><li><code>spring.mustache.suffix</code>는 <code>.html</code>로 설정</li><li>view는 <code>error/{응답코드}</code>가 들어간다</li></ol><blockquote><p>view를 resolve하기 위해 <code>classpath:/templates/error/404.html</code>이 호출된다</p></blockquote><h2 id="확장-포인트-BasicErrorController"><a href="#확장-포인트-BasicErrorController" class="headerlink" title="확장 포인트 - BasicErrorController"></a>확장 포인트 - BasicErrorController</h2><p><code>ErrorAttributes</code>와 마찬가지로 <code>ErrorController</code>의 구현체를 개발자가 bean으로 등록한다면<br>Spring Boot는 해당 빈을 먼저 찾아 <code>BasicErrorController</code> 대신 오류 처리를 위해 사용하게 된다.<br>위임자 패턴을 사용해서 기본적인 처리는 <code>BasicErrorController</code>에게 위임하고, 나머지 필요한 처리를 추가할 수 있다.<br>아래 소스에서는 로그를 추가해보았다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomErrorController</span> <span class="keyword">extends</span> <span class="title">BasicErrorController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomErrorController</span><span class="params">(ErrorAttributes errorAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 ServerProperties serverProperties,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 List&lt;ErrorViewResolver&gt; errorViewResolvers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(errorAttributes, serverProperties.getError(), errorViewResolvers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(produces = MediaType.TEXT_HTML_VALUE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        log(request); <span class="comment">// 로그 추가</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.errorHtml(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line">        log(request);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.error(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        log.error(<span class="string">"error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="spring-webflux에서는"><a href="#spring-webflux에서는" class="headerlink" title="spring-webflux에서는?"></a>spring-webflux에서는?</h2><p>여태까지는 <code>spring-mvc</code> 모듈을 통해 지원되는 내용이었다.<br>SpringFramework 5에 추가된 <code>spring-webflux</code>에서도 <code>spring-mvc</code>와의 로직에 대한 대칭성을 유지하는 클래스들이 있다.</p><table><thead><tr><th>설명</th><th>spring-mvc</th><th>spring-webflux</th></tr></thead><tbody><tr><td>인터페이스</td><td>ErrorController</td><td>ErrorWebExceptionHandler extends WebExceptionHandler</td></tr><tr><td>편의를 위해 추상화된 클래스</td><td>AbstractErrorController</td><td>AbstractErrorWebExceptionHandler</td></tr><tr><td>기본 Bean으로 제공되는 클래스</td><td>BasicErrorController</td><td>DefaultErrorWebExceptionHandler</td></tr></tbody></table><p><code>spring-mvc</code>와 마찬가지로 <code>ErrorAttributes</code>를 확장해서 사용할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultErrorWebExceptionHandler</span> <span class="keyword">extends</span> <span class="title">AbstractErrorWebExceptionHandler</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> RouterFunction&lt;ServerResponse&gt; <span class="title">getRoutingFunction</span><span class="params">(ErrorAttributes errorAttributes)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> RouterFunctions.route(<span class="keyword">this</span>.acceptsTextHtml(), <span class="keyword">this</span>::renderErrorView)</span><br><span class="line">                          .andRoute(RequestPredicates.all(), <span class="keyword">this</span>::renderErrorResponse);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ErrorController에-대한-추가-설명"><a href="#ErrorController에-대한-추가-설명" class="headerlink" title="ErrorController에 대한 추가 설명"></a>ErrorController에 대한 추가 설명</h2><p><code>ErrorController</code>가 호출되기까지의 흐름을 설명하자면 다음과 같다.</p><ol><li>서블릿 컨테이너(ex: 톰캣)에서 등록된 서블릿에서 요청을 처리하다가</li><li>오류가 발생했는데</li><li>해당 서블릿에서 처리하지 못하고</li><li>서블릿 컨테이너까지 오류가 전파되었을 때, 서블릿 컨테이너가 오류를 처리하기 위해 특정 경로(<code>server.error.path</code>)로 해당 요청처리를 위임할 때 사용된다.</li></ol><img  src=http://www.plantuml.com/plantuml/svg/YmvEBIhBIIrHSCxFAqdCp4ijYbNGrRLJY8QAnofOAHZgARoPDUNDfhKARpRDUBriZKQ2Vaf-WYONGerkQG6I7cIph1ICWBfdB7czT8R2wmrptZJFrKY0AdEjI4ujACdCpqCo2fypZE46GPm1TPI6kdvgKL5-aRec0000><h1 id="spring-mvc-Exception-기반으로-오류-처리"><a href="#spring-mvc-Exception-기반으로-오류-처리" class="headerlink" title="spring-mvc Exception 기반으로 오류 처리"></a>spring-mvc Exception 기반으로 오류 처리</h1><p>앞의 추가 설명에서 봤듯이 <code>ErrorController</code>가 동작하는 것은 요청을 처리해야할 Servlet에서 오류가 발생했으나 해당 Servlet에서 오류를 처리하지 않아서 Servlet Container까지 오류가 전파되었을 때(<code>ServletException</code>으로 래핑된다), Servlet Container가 <code>ErrorController</code>를 호출한다. 이 때, 필자가 테스트한 Servlet Container(Tomcat 9.0.17)에서는 아래와 같은 로그를 남긴다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2019-04-04 18:31:27.915 ERROR 21947 --- [nio-8080-exec-1] o.a.c.c.C.[.[.[&#x2F;].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalStateException: test] with root cause</span><br></pre></td></tr></table></figure><p>해당 로그는 Servlet Container에서 남기고 있는 것으로, 개발자가 사용자화 하기 어려운 부분이다.<br>logging framework(log4j, logback) 등으로 해당 로그를 남기지 않거나 할 수는 있지만,<br>로그 내요을 변경하거나 하기는 어렵다는 것이다.</p><p>Spring에서는 Handler(Controller의 <code>@RequestMapping</code>이 걸린 메서드)에서 처리하다 Exception이 발생한 경우, 이를 Servlet Container까지 전파하지 않고, 직접 Exception 별로 처리를 할 수 있도록 해준다. Spring에서 Exception 기반으로 오류를 처리하는 방법을 알아보자.</p><h2 id="ExceptionHandler"><a href="#ExceptionHandler" class="headerlink" title="@ExceptionHandler"></a>@ExceptionHandler</h2><p>Spring에서는 발생한 Exception을 기반으로 오류를 처리할 수 있도록 <code>@ExceptionHandler</code>를 제공한다.</p><p><strong>예외를 던지도록 소스 추가</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/boards"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoardController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Board <span class="title">get</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (id &lt; <span class="number">1L</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BoardNotFoundException(<span class="string">"invalid id: "</span> + id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Board(<span class="string">"title"</span>, <span class="string">"content"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ResponseStatus</span>(HttpStatus.NOT_FOUND)</span><br><span class="line">  <span class="meta">@ExceptionHandler</span>(BoardNotFoundException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">public</span> <span class="title">Map</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt; <span class="title">handle</span>(<span class="title">BoardNotFoundException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">      log.error(e.getMessage(), e);</span><br><span class="line">      Map&lt;String, String&gt; errorAttributes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      errorAttributes.put(<span class="string">"code"</span>, <span class="string">"BOARD_NOT_FOUND"</span>);</span><br><span class="line">      errorAttributes.put(<span class="string">"message"</span>, e.getMessage());</span><br><span class="line">      <span class="keyword">return</span> errorAttribute;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 특정 Controller에서 예외가 발생한 경우, Spring은 <code>@ExceptionHandler</code>를 검색하여<br>해당 애너테이션에 선언된 예외 및 하위 예외에 대해서 특정 메서드가 처리할 수 있도록 한다.<br>또한 보통의 핸들러와 마찬가지로 <code>@ResponseStatus</code>를 통해 응답 코드를 정의하거나,<br><code>ModelAndView</code>, <code>String</code>을 반환하여 view를 resolve할 수 있고, <code>ResponseEntity&lt;T&gt;</code>를 반환할 수도 있다.</p><p>이제 오류가 발생하도록 요청을 보내보자.</p><p><strong>실행</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP&#x2F;1.1 404</span><br><span class="line">Content-Type: application&#x2F;json;charset&#x3D;UTF-8</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Date: Sun, 17 Feb 2019 04:31:33 GMT</span><br><span class="line"></span><br><span class="line">&#123;&quot;code&quot;:&quot;BOARD_NOT_FOUND&quot;,&quot;message&quot;:&quot;invalid id: 0&quot;&#125;</span><br></pre></td></tr></table></figure><h2 id="ControllerAdvice"><a href="#ControllerAdvice" class="headerlink" title="ControllerAdvice"></a>ControllerAdvice</h2><p>Spring에서는 Bean으로 등록되는 <code>@Controller</code>들을 선택적으로, 혹은 전역으로 몇가지 공통 설정을 적용할 수 있도록 <code>@ControllerAdvice</code>를 사용할 수 있다<br>이 <code>@ControllerAdvice</code>에서 사용할 수 있는 것 중 하나가 <code>@ExceptionHandler</code>다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalControllerAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ResponseStatus</span>(HttpStatus.NOT_FOUND)</span><br><span class="line">  <span class="meta">@ExceptionHandler</span>(BoardNotFoundException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">public</span> <span class="title">Object</span> <span class="title">handle</span>(<span class="title">BoardNotFoundException</span> <span class="title">e</span>, <span class="title">HttpServletRequest</span> <span class="title">request</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (JSON_응답해야하는지(request)) &#123;</span><br><span class="line">      <span class="keyword">return</span> makeJson(e);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"/error/404"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ControllerAdvice-나누기"><a href="#ControllerAdvice-나누기" class="headerlink" title="ControllerAdvice 나누기"></a>ControllerAdvice 나누기</h2><p>앞의 예제에서는 하나의 method에서 JSON응답과 HTML응답을 해야하는 경우를 나누고 있었다.<br>HTML view를 사용할 경우와 json view를 사용할 경우를 나누어 <code>ControllerAdivce</code>를 등록하고,<br><code>@Order</code>를 사용하여 우선 순위를 부여하면 분기처리 없이 나누어 오류 처리를 할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Order</span>(ORDER)</span><br><span class="line"><span class="meta">@RestControllerAdvice</span>(annotations = RestController<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">GlobalRestControllerAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ORDER = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.NOT_FOUND)</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(BoardNotFoundException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Map</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt; <span class="title">handle</span>(<span class="title">BoardNotFoundException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        log.error(e.getMessage(), e);</span><br><span class="line">        Map&lt;String, String&gt; errorAttributes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        errorAttributes.put(<span class="string">"code"</span>, <span class="string">"BOARD_NOT_FOUND"</span>);</span><br><span class="line">        errorAttributes.put(<span class="string">"message"</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> errorAttributes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Order</span>(GlobalRestControllerAdvice.ORDER + <span class="number">1</span>)</span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalHtmlControllerAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.NOT_FOUND)</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(BoardNotFoundException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">handle</span>(<span class="title">BoardNotFoundException</span> <span class="title">e</span>, <span class="title">Model</span> <span class="title">model</span>, <span class="title">HttpServletRequest</span> <span class="title">request</span>) </span>&#123;</span><br><span class="line">        log.error(e.getMessage(), e);</span><br><span class="line">        model.addAttribute(<span class="string">"timestamp"</span>, LocalDateTime.now());</span><br><span class="line">        model.addAttribute(<span class="string">"error"</span>, <span class="string">"BOARD_NOT_FOUND"</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"path"</span>, request.getRequestURI());</span><br><span class="line">        model.addAttribute(<span class="string">"message"</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/error/404"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-MVC에서-제공해주는-ResponseEntityExceptionHandler"><a href="#Spring-MVC에서-제공해주는-ResponseEntityExceptionHandler" class="headerlink" title="Spring MVC에서 제공해주는 ResponseEntityExceptionHandler"></a>Spring MVC에서 제공해주는 ResponseEntityExceptionHandler</h2><p><code>ControllerAdvice</code>를 사용하여 Exception 처리를 한 곳으로 모으는 경우, <a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ResponseEntityExceptionHandler.html" target="_blank" rel="noopener">ResponseEntityExceptionHandler</a>를 상속받도록 하여 Spring MVC에서 기본으로 제공되는 Exception들의 처리를 간단하게 등록할 수 있다. 각 Exception 처리를 위한 메서드들은 모두 <code>protected</code>로 선언되어 있으며, 하위 클래스에서 필요에 따라 Override할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseEntityExceptionHandler</span> </span>&#123;</span><br><span class="line">  <span class="meta">@ExceptionHandler</span>(&#123;</span><br><span class="line">    HttpRequestMethodNotSupportedException<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">    <span class="title">HttpMediaTypeNotSupportedException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">    <span class="title">HttpMediaTypeNotAcceptableException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">    <span class="title">MissingPathVariableException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">    <span class="title">MissingServletRequestParameterException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">    <span class="title">ServletRequestBindingException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">    <span class="title">ConversionNotSupportedException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">    <span class="title">TypeMismatchException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">    <span class="title">HttpMessageNotReadableException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">    <span class="title">HttpMessageNotWritableException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">    <span class="title">MethodArgumentNotValidException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">    <span class="title">MissingServletRequestPartException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">    <span class="title">BindException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">    <span class="title">NoHandlerFoundException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">    <span class="title">AsyncRequestTimeoutException</span>.<span class="title">class</span></span></span><br><span class="line"><span class="class">  &#125;)</span></span><br><span class="line"><span class="class">  @<span class="title">Nullable</span></span></span><br><span class="line"><span class="class">  <span class="title">public</span> <span class="title">final</span> <span class="title">ResponseEntity</span>&lt;<span class="title">Object</span>&gt; <span class="title">handleException</span>(<span class="title">Exception</span> <span class="title">ex</span>, <span class="title">WebRequest</span> <span class="title">request</span>) <span class="title">throws</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 각 예외에 대한 분기처리 로직(상속 구현 가능하도록 protected로 메서드가 선언되어 있음)</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 각 예외 처리를 위한 protected 메서드들이 있음</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> ResponseEntity&lt;Object&gt; <span class="title">handleHttpRequestMethodNotSupported</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      HttpRequestMethodNotSupportedException ex, HttpHeaders headers, HttpStatus status, WebRequest request)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 예외 처리</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>각 Spring MVC Exception 설명</strong></p><table><thead><tr><th>Exception</th><th>설명</th><th>응답코드</th></tr></thead><tbody><tr><td>HttpRequestMethodNotSupportedException</td><td>요청 경로는 있으나 지원하지 않는 Method인 경우 발생</td><td>405 - Method Not Allowed</td></tr><tr><td>HttpMediaTypeNotSupportedException</td><td>요청의 Content Type을 핸들러가 지원하지 않는 경우 발생</td><td>415 - Unsupported Media Type</td></tr><tr><td>HttpMediaTypeNotAcceptableException</td><td>핸들러가 Client가 요청한 Type으로 응답을 내려줄 수 없는 경우 발생</td><td>406 - Not Acceptable</td></tr><tr><td>MissingPathVariableException</td><td>핸들러가 URL에서 기대한 Path Variable을 찾지 못한 경우 발생</td><td>500 - Internal Server Error</td></tr><tr><td>MissingServletRequestParameterException</td><td>핸들러가 기대한 요청 Parameter를 찾지 못한 경우 발생</td><td>400 - Bad Request</td></tr><tr><td>ServletRequestBindingException</td><td>복구 불가능한 치명적인 간주할 binding exception<br>Filter 등의 Servlet Resource에서 던지기 쉽도록 ServletException을 상속하고 있음</td><td>400 - Bad Request</td></tr><tr><td>ConversionNotSupportedException</td><td>bean property로 요청 내용을 변경하기 위한<br><code>editor</code> 혹은 <code>converter</code>를 찾지 못한 경우 발생</td><td>500 - Internal Server Error</td></tr><tr><td>TypeMismatchException</td><td>bean property로 값을 변경할 때, 핸들러가 예상한 class로 변경할 수 없는 경우 발생</td><td>400 - Bad Request</td></tr><tr><td>HttpMessageNotReadableException</td><td><code>HttpMessageConverter</code>에서 발생하며 <code>read</code> 메서드가 실패한 경우 발생</td><td>400 - Bad Request</td></tr><tr><td>HttpMessageNotWritableException</td><td><code>HttpMessageConverter</code>에서 발생하며 <code>write</code> 메서드가 실패한 경우 발생</td><td>500 - Internal Server Error</td></tr><tr><td>MethodArgumentNotValidException</td><td><code>@Valid</code>가 붙은 파라미터에 대해 검증 실패시 발생</td><td>400 - Bad Request</td></tr><tr><td>MissingServletRequestPartException</td><td><code>multipart/form-data</code> 요청의 일부가 손실(can’t be found)되었을 때 발생</td><td>400 - Bad Request</td></tr><tr><td>NoHandlerFoundException</td><td>Dispatcher Servlet에서 핸들러를 찾지 못한 경우 기본적으로 404 응답을 내리지만<br>Dispatcher Servlet의 <code>throwExceptionIfNoHandlerFound</code> 값이 true인 경우 해당 예외를 발생</td><td>404 - Not Found</td></tr><tr><td>AsyncRequestTimeoutException</td><td>비동기 요청의 응답시간이 초과될 때 발생</td><td>503 - Service Unavailable</td></tr></tbody></table><h2 id="HandlerExceptionResolver"><a href="#HandlerExceptionResolver" class="headerlink" title="HandlerExceptionResolver"></a>HandlerExceptionResolver</h2><p>애너테이션 기반으로 동작하는 <code>@ExceptionHandler</code> 외에도 <code>HandlerExceptionResolver</code> 인터페이스를 사용할 수 있다.<br>이 인터페이스는 요청, 응답, 핸들러, 예외를 받아 <code>ModelAndView</code>를 반환값으로 하는 <code>resolveException</code> 메서드를 가지고 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest req, HttpServletResponse res, Object handler, Exception ex)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HandlerExceptionResolver-구현체"><a href="#HandlerExceptionResolver-구현체" class="headerlink" title="HandlerExceptionResolver 구현체"></a>HandlerExceptionResolver 구현체</h3><ul><li>ExceptionHandlerExceptionResolver : <code>@ExceptionHandler</code>가 붙은 메서드를 통해 예외 처리를 할 수 있도록 설정하는 클래스</li><li>SimpleMappingExceptionResolver : 예외 이름과 view 이름을 매핑해주며, browser 요청을 view로 렌더링할 때 유용하게 쓸 수 있다</li><li>ResponseStatusExceptionResolver : Exception 클래스에 <code>@ResponseStatus</code>를 달아 해당 응답 코드로 응답을 보낼 수 있도록 설정하는 클래스</li><li>DefaultHandlerExceptionResolver : Spring MVC Exception에 대해 기본적인 처리를 해주는 클래스</li></ul><h4 id="Exception에-응답코드-달기"><a href="#Exception에-응답코드-달기" class="headerlink" title="Exception에 응답코드 달기"></a>Exception에 응답코드 달기</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseStatus</span>(HttpStatus.NOT_FOUND)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">NotFoundException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoardNotFoundException</span> <span class="keyword">extends</span> <span class="title">NotFoundException</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 Exception에 <code>@ResponseStatus</code>가 붙어 있고, 해당 Exception이 발생하면<br>Spring에서는 해당 Response Code로 응답을 준다.</p><blockquote><p>이 경우 서비스 로직에서 사용할 Exception이 HTTP라고 하는 MVC 구현에 종속된다.<br>MVC Layer와 Service Layer의 커플링을 발생시키지 않도록 유의해야 한다.</p></blockquote><h3 id="사용자-정의-HandlerExceptionResolver-구현"><a href="#사용자-정의-HandlerExceptionResolver-구현" class="headerlink" title="사용자 정의 HandlerExceptionResolver 구현"></a>사용자 정의 HandlerExceptionResolver 구현</h3><h1 id="번외"><a href="#번외" class="headerlink" title="번외"></a>번외</h1><h2 id="Filter와-Interceptor"><a href="#Filter와-Interceptor" class="headerlink" title="Filter와 Interceptor"></a>Filter와 Interceptor</h2><p>Filter와 Interceptor는 실행되는 위치가 다르다.<br>때문에 Exception이 발생했을 때 처리하는 방법도 달라진다.</p><p>Interceptor는 DispatcherServlet 내부에서 발생하기 때문에 <code>ControllerAdvice</code>를 적용할 수 있다.<br>하지만 Filter는 DispatcherServlet 외부에서 발생해서 <code>ErrorController</code>에서 처리해야 한다.</p><p><img src="/images/spring-filter-interceptor/spring-request-lifecycle.jpg" alt="image"><br>이미지 출처: <a href="https://justforchangesake.files.wordpress.com/2014/05/spring-request-lifecycle.jpg" target="_blank" rel="noopener">https://justforchangesake.files.wordpress.com/2014/05/spring-request-lifecycle.jpg</a></p><h1 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h1><p>Spring에서 예외처리를 하는 방법에 대해 훑어보았다.<br>Spring MVC 내에서는 <code>@HandlerException</code>을 통해 각 <code>@Controller</code>별로 예외 처리를 할 수 있었으며,<br><code>@HandlerException</code>을 <code>@ControllerAdvice</code>에 등록하여 전역적으로 예외를 처리할 수도 있었다.<br>또한 브라우저 요청과 REST API의 요청을 나누어서 <code>@ControllerAdvice</code>에서 처리할 수 있다.<br>이러한 기본 동작들은 <code>HandlerExceptionResolver</code>에 의해 이루어진다.</p><p>Spring MVC 내에서 처리하지 못한 예외들은 <code>ServletException</code>으로 포장되어 서블릿 컨테이너까지 전파되며, 서블릿 컨테이너는 예외를 처리하기 위해나 경로로 예외 처리를 위임하게 된다. 이때 Spring boot를 기본설정으로 사용하는 경우, <code>BasicErrorController</code>가 이를 담당하게 된다.</p><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>예외 처리에 대해 잘 이해하고, 이를 잘 해내는 것은 견고한 어플리케이션을 작성하기 위한 밑거름이 된다고 생각한다.<br>경험있는 개발자들은 예외를 미리 예측하고 방지할 수 있다. 하지만 이러한 경험을 잘 쌓기 위해서는 그동안 발생하는 예외에 대해서 파악하기 쉬워야 한다.<br>예외 처리를 잘 해낸다면 같은 오류가 발생해도 더 빠르게 인지하고, 문제점을 정확하게 짚어낼 수 있을 것이다.<br>어플리케이션 개발이 운영 국면에 들어서면 기능만 잘 뽑아내는 것보다 예외 탐지, 트러블슈팅, 장애 방지를 잘하는 것이 얼마나 가치있는 것인지 깨닫게 되는 것 같다.</p><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><p>Spring framework reference </p><ul><li>mvc exceptions : <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-exceptionhandler" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-exceptionhandler</a></li><li>controller exceptions : <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-exceptionhandler" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-exceptionhandler</a></li></ul>]]></content>
      
      <categories>
          
          <category> spring </category>
          
          <category> boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> spring-boot </tag>
            
            <tag> error </tag>
            
            <tag> error-handling </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>(Spring Boot)Spring Boot Actuator 소개</title>
      <link href="/2018/05/12/spring-actuator/"/>
      <content type="html"><![CDATA[<h1 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h1><p>웹 개발자로서 웹 애플리케이션을 만들 때 신경써야할 것은 서비스 로직 뿐만이 아니다. 웹 애플리케이션의 사용자는 누구인지(일반인? 외부시스템?), 어떤 경로로 애플리케이션에 요청을 할 지(Load Balancing, Fire Wall), 요청 수나 TPS 등 많은 것들을 고려해야한다. 이번에 소개할 <code>spring-boot-actuator</code>라는 모듈은 <strong>애플리케이션의 상태</strong>를 종합적으로 정리하여 우리에게 제공해준다. 본문에서는 <a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples" target="_blank" rel="noopener">Spring Boot Samples</a>에 있는 프로젝트 중에서 <code>spring-boot-sample-actuator-ui</code>를 가져와 살짝 소스를 수정하여 actuator가 무엇이고 어떤 일 해주는지 알아보려한다.</p><a id="more"></a><h1 id="샘플-프로젝트로-Actuator-체험해보기"><a href="#샘플-프로젝트로-Actuator-체험해보기" class="headerlink" title="샘플 프로젝트로 Actuator 체험해보기"></a>샘플 프로젝트로 Actuator 체험해보기</h1><h2 id="소스-수정"><a href="#소스-수정" class="headerlink" title="소스 수정"></a>소스 수정</h2><p><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples/spring-boot-sample-actuator-ui" target="_blank" rel="noopener">spring-boot-sample-actuator-ui</a>에서 소스를 다운받아 <code>pom.xml</code> 파일의 <code>parent</code>를 수정하여 바로 실행해볼 수 있다. 여기서는 <code>sprint-boot-starter-security</code>도 제외시키겠다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- parent를 spring-boot-starter-parent로 수정 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Your own application should inherit from spring-boot-starter-parent --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- spring-security 주석처리 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="applcation-properties"><a href="#applcation-properties" class="headerlink" title="applcation.properties"></a>applcation.properties</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.security.user.name</span>=<span class="string">user</span></span><br><span class="line"><span class="meta">spring.security.user.password</span>=<span class="string">password</span></span><br><span class="line"><span class="meta">management.health.diskspace.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br></pre></td></tr></table></figure><p>앞서 security 의존성을 없앴기 때문에 <code>spring-security</code>가 동작하지는 않는다.</p><h2 id="실행"><a href="#실행" class="headerlink" title="실행"></a>실행</h2><p>maven의 <code>spring-boot:run</code>이나 직접 <code>SampleActuatorUiApplication</code>의 <code>main()</code>을 호출하여 서버를 띄운 후 <code>GET /actuator</code>를 실행해보자. 아래와 같은 json 정보를 얻을 수 있다.(몇몇 부분은 생략했다) </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"_links"</span>:&#123;</span><br><span class="line">      <span class="attr">"self"</span>:&#123;<span class="attr">"href"</span>:<span class="string">"http://localhost:8080/actuator"</span>&#125;,</span><br><span class="line">      <span class="attr">"auditevents"</span>:&#123;<span class="attr">"href"</span>:<span class="string">"http://localhost:8080/actuator/auditevents"</span>&#125;,</span><br><span class="line">      <span class="attr">"beans"</span>:&#123;<span class="attr">"href"</span>:<span class="string">"http://localhost:8080/actuator/beans"</span>&#125;,</span><br><span class="line">      <span class="attr">"health"</span>:&#123;<span class="attr">"href"</span>:<span class="string">"http://localhost:8080/actuator/health"</span>&#125;,</span><br><span class="line">      <span class="attr">"conditions"</span>:&#123;<span class="attr">"href"</span>:<span class="string">"http://localhost:8080/actuator/conditions"</span>&#125;,</span><br><span class="line">      <span class="attr">"configprops"</span>:&#123;<span class="attr">"href"</span>:<span class="string">"http://localhost:8080/actuator/configprops"</span>&#125;,</span><br><span class="line">      <span class="attr">"env"</span>:&#123;<span class="attr">"href"</span>:<span class="string">"http://localhost:8080/actuator/env"</span>&#125;,</span><br><span class="line">      <span class="attr">"env-toMatch"</span>:&#123;<span class="attr">"href"</span>:<span class="string">"http://localhost:8080/actuator/env/&#123;toMatch&#125;"</span>&#125;,</span><br><span class="line">      <span class="attr">"info"</span>:&#123;<span class="attr">"href"</span>:<span class="string">"http://localhost:8080/actuator/info"</span>&#125;,</span><br><span class="line">      <span class="attr">"loggers"</span>:&#123;<span class="attr">"href"</span>:<span class="string">"http://localhost:8080/actuator/loggers"</span>&#125;,</span><br><span class="line">      <span class="attr">"loggers-name"</span>:&#123;<span class="attr">"href"</span>:<span class="string">"http://localhost:8080/actuator/loggers/&#123;name&#125;"</span>&#125;,</span><br><span class="line">      <span class="attr">"heapdump"</span>:&#123;<span class="attr">"href"</span>:<span class="string">"http://localhost:8080/actuator/heapdump"</span>&#125;,</span><br><span class="line">      <span class="attr">"threaddump"</span>:&#123;<span class="attr">"href"</span>:<span class="string">"http://localhost:8080/actuator/threaddump"</span>&#125;,</span><br><span class="line">      <span class="attr">"metrics-requiredMetricName"</span>:&#123;<span class="attr">"href"</span>:<span class="string">"http://localhost:8080/actuator/metrics/&#123;requiredMetricName&#125;"</span>&#125;,</span><br><span class="line">      <span class="attr">"metrics"</span>:&#123;<span class="attr">"href"</span>:<span class="string">"http://localhost:8080/actuator/metrics"</span>&#125;,</span><br><span class="line">      <span class="attr">"scheduledtasks"</span>:&#123;<span class="attr">"href"</span>:<span class="string">"http://localhost:8080/actuator/scheduledtasks"</span>&#125;,</span><br><span class="line">      <span class="attr">"httptrace"</span>:&#123;<span class="attr">"href"</span>:<span class="string">"http://localhost:8080/actuator/httptrace"</span>&#125;,</span><br><span class="line">      <span class="attr">"mappings"</span>:&#123;<span class="attr">"href"</span>:<span class="string">"http://localhost:8080/actuator/mappings"</span>&#125;,</span><br><span class="line">      <span class="attr">"jolokia"</span>:&#123;<span class="attr">"href"</span>:<span class="string">"http://localhost:8080/actuator/jolokia"</span>&#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같은 내용의 애플리케이션의 상태를 확인할 수 있다. 예를 들어 <code>GET /actuator/health</code>를 실행해보자. 아래와 같이 현재 애플리케이션의 health 상태를 알 수 있다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"status"</span>: <span class="string">"UP"</span>&#125;</span><br></pre></td></tr></table></figure><p>혹은 <code>GET /actuator/metrics/jvm.threads.live</code>를 요청해보자. 현재 JVM의 활성화된 Thread의 정보를 가져올 수 있다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">   <span class="attr">"name"</span>:<span class="string">"jvm.threads.live"</span>,</span><br><span class="line">   <span class="attr">"measurements"</span>:[  </span><br><span class="line">      &#123;  </span><br><span class="line">         <span class="attr">"statistic"</span>:<span class="string">"VALUE"</span>,</span><br><span class="line">         <span class="attr">"value"</span>:<span class="number">23</span></span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">   <span class="attr">"availableTags"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>GET /actuator/heapdump</code>나 <code>GET /actuator/threaddump</code>를 요청하면 dump 파일을 받을 수도 있다.</p><p>이러한 애플리케이션의 상태 정보를 아무에게나 노출하면 안될 것 같다. 확인된 사용자에게만 actuator 정보를 노출하고자 할 때에는 간단하게 두 가지 방법을 고려할 수 있다.</p><ol><li><code>management.server.port</code>, <code>management.server.address</code> 값을 수정해서 해당 ip, address에 한해 ACL를 걺</li><li><code>spring-security</code>를 이용하여 <code>management.endpoints.web.base-path(기본값 /actuator)</code>에 대해 권한을 확인</li></ol><p>물론 두 방법을 동시에 사용할 수도 있다.</p><h1 id="그래서-Spring-Boot-Actuator란"><a href="#그래서-Spring-Boot-Actuator란" class="headerlink" title="그래서 Spring Boot Actuator란"></a>그래서 Spring Boot Actuator란</h1><p>간단히 말하자면 Spring Boot Application의 상태를 관리해준다.</p><ul><li>Spring Boot Application의 상태 정보(health, properties, beans, 구동된 AutoConfiguration 목록 등)를 다룰 수 있도록 자동 설정.</li><li>각종 추상화 클래스(HealthIndicator 등)을 제공하여, 상태 정보를 변경할 수 있도록 Service를 제공.</li></ul><h1 id="써먹을-만한-설정과-사용자화-가능한-것들"><a href="#써먹을-만한-설정과-사용자화-가능한-것들" class="headerlink" title="써먹을 만한 설정과 사용자화 가능한 것들"></a>써먹을 만한 설정과 사용자화 가능한 것들</h1><h2 id="노출할-항목-설정"><a href="#노출할-항목-설정" class="headerlink" title="노출할 항목 설정"></a>노출할 항목 설정</h2><p>앞서 본 샘플에서는 많은 정보들이 노출되고 있었다. <code>auditevents</code>, <code>beans</code>, <code>health</code>, <code>env</code> 등등, 필요해 보이는 것부터 T.M.I.까지 있다. <code>application.properties</code>에서 <code>management.endpoints.web.exposure.include</code>에 필요한 endpoint의 id를 설정할 수 있다. endpoint의 목록은 <a href="https://docs.spring.io/spring-boot/docs/2.0.2.RELEASE/reference/htmlsingle/#production-ready-endpoints" target="_blank" rel="noopener">레퍼런스 문서</a>를 참고하자.</p><p><strong>예제: health와 metrics 정보만 노출</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">management.endpoints.web.exposure.include&#x3D;health,metrics</span><br></pre></td></tr></table></figure><h2 id="Endpoint-경로-설정"><a href="#Endpoint-경로-설정" class="headerlink" title="Endpoint 경로 설정"></a>Endpoint 경로 설정</h2><p>앞에서 소개한 것과 같이 <code>management.endpoint.web.base-path(기본값 /actuator)</code>를 수정하여 base-path를 수정할 수 있다. 그 외에도 <code>management.endpoints.web.path-mapping.&lt;id&gt;</code>값을 수정하여, 특정 id의 endpoint의 경로를 수정할 수 있다.</p><p><strong>예제: health의 경로를 /monitor/healthcheck로 변경</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">management.endpoints.web.base-path&#x3D;&#x2F;monitor</span><br><span class="line">management.endpoints.web.path-mapping.health&#x3D;healthcheck</span><br></pre></td></tr></table></figure><h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><p><code>spring-boot-actuator</code>는 기본적으로 <strong>클라우드 환경에서 관리자가 각종 애플리케이션의 상태를 파악하기 쉽도록 설계되어 있다.</strong> 때문에 필요한 경우 외부 UI를 구성한 다른 도메인명을 가진 Web Application에서 각각의 서비스 애플리케이션의 상태를 파악하기 위해서 actuator 정보를 요청할 수도 있다. 이럴때 CORS를 설정하여 사용할 수 있다.</p><p><strong>예제: <a href="http://other-domain.com" target="_blank" rel="noopener">http://other-domain.com</a> 의 GET, POST요청을 허용</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">management.endpoints.web.cors.allowed-origins&#x3D;http:&#x2F;&#x2F;other-domain.com</span><br><span class="line">management.endpoints.web.cors.allowed-methods&#x3D;GET,POST</span><br></pre></td></tr></table></figure><h2 id="Health-Endpoint"><a href="#Health-Endpoint" class="headerlink" title="Health Endpoint"></a>Health Endpoint</h2><h3 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h3><p>Health Endpoint는 위 샘플에서 소개된 것 외에도 사실상 많은 정보들을 내보일 수 있다. 이전의 샘플 소스로 돌아가서 <code>pom.xml</code>과 <code>application.properties</code>를 아래와 같이 수정해보자.</p><p><strong>pom.xml: jpa와 h2 database 의존성 추가</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.h2database&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;h2&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>application.properties: 상세 정보를 노출하도록 변경</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">management.endpoint.health.show-details&#x3D;always</span><br></pre></td></tr></table></figure><p>다시 애플리케이션을 실행시킨 후 <code>GET /actuator/health</code> 요청을 보내보면 아래와 같이 응답이 온다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">   &quot;status&quot;:&quot;UP&quot;,</span><br><span class="line">   &quot;details&quot;:&#123;  </span><br><span class="line">      &quot;db&quot;:&#123;  </span><br><span class="line">         &quot;status&quot;:&quot;UP&quot;,</span><br><span class="line">         &quot;details&quot;:&#123;  </span><br><span class="line">            &quot;database&quot;:&quot;H2&quot;,</span><br><span class="line">            &quot;hello&quot;:1</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>애플리케이션에서 의존하고 있는 시스템의 Health check도 함께 파악할 수 있다. <code>DataSource</code> 외에도 <code>Disk</code>, <code>Cassandra</code>, <code>ElasticSearch</code>, <code>Redis</code> 등의 health check를 확인할 수 있다.</p><h3 id="사용자-정의-Health-Indicator"><a href="#사용자-정의-Health-Indicator" class="headerlink" title="사용자 정의 Health Indicator"></a>사용자 정의 Health Indicator</h3><p>Health Endpoint의 내용은 <code>HealthIndicator</code>를 구현하여 정의할 수 있다.</p><p><strong>HealthIndicator</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HealthIndicator</span> </span>&#123;</span><br><span class="line">    <span class="function">Health <span class="title">health</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>아래는 간단하게 health indicator를 구현한 예제이다.</p><ul><li><code>PUT /actuator/health/up</code> : UP 상태로 변경</li><li><code>PUT /actuator/health/down</code> : DOWN 상태로 변경</li><li><code>PUT /actuator/health/maintenance</code> : 점검 상태로 변경</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"$&#123;management.endpoints.web.base-path:/actuator&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomHealthIndicator</span> <span class="keyword">implements</span> <span class="title">HealthIndicator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicReference&lt;Health&gt; health = <span class="keyword">new</span> AtomicReference&lt;&gt;(Health.up().build());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Health <span class="title">health</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> health.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"$&#123;management.endpoints.web.path-mapping.health:health&#125;/up"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Health <span class="title">up</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Health up = Health.up().build();</span><br><span class="line">        <span class="keyword">this</span>.health.set(up);</span><br><span class="line">        <span class="keyword">return</span> up;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"$&#123;management.endpoints.web.path-mapping.health:health&#125;/down"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Health <span class="title">down</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Health down = Health.down().build();</span><br><span class="line">        <span class="keyword">this</span>.health.set(down);</span><br><span class="line">        <span class="keyword">return</span> down;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"$&#123;management.endpoints.web.path-mapping.health:health&#125;/maintenance"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Health <span class="title">maintenance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Health maintenance = Health.status(<span class="keyword">new</span> Status(<span class="string">"MAINTENANCE"</span>, <span class="string">"점검중"</span>)).build();</span><br><span class="line">        <span class="keyword">this</span>.health.set(maintenance);</span><br><span class="line">        <span class="keyword">return</span> maintenance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>각 URL에 맞춰서 <code>health</code>의 값을 변경한다. 기본적으로 <code>up</code>, <code>down</code>, <code>out-of-service</code>, <code>unkwon</code>의 상태값이 존재하지만 <code>maintenance</code>의 상태값은 없다. 사실 의미상 <code>out-of-service</code>와 동일하지만, 사용자화를 할 수 있다는 걸 보이기 위해서 새로 만들었다. 새로운 상태값을 만들어 actuator에서 인식하도록 만들려면 <code>application.properties</code>를 수정해야한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 심각도에 따른 순서</span><br><span class="line">management.health.status.order&#x3D;DOWN, MAINTENANCE, UNKOWN, UP</span><br><span class="line"></span><br><span class="line"># 각 상태별 Http 응답 코드</span><br><span class="line">management.health.status.http-mapping.DOWN&#x3D;503</span><br><span class="line">management.health.status.http-mapping.MAINTENANCE&#x3D;503</span><br><span class="line">management.health.status.http-mapping.UNKNOWN&#x3D;200</span><br><span class="line">management.health.status.http-mapping.UP&#x3D;200</span><br></pre></td></tr></table></figure><p>이제 애플리케이션을 실행하여 <code>PUT /actuator/health/maintenance</code>를 요청한 후 <code>GET /actuator/health</code>로 확인해보자 아래와 같이 나온다.</p><p><img src="/images/spring-actuator/maintenance.png" alt="점검중"></p><h4 id="HealthIndicator를-구현하며-management-endpoint-health-show-details-always가-설정된-경우"><a href="#HealthIndicator를-구현하며-management-endpoint-health-show-details-always가-설정된-경우" class="headerlink" title="HealthIndicator를 구현하며, management.endpoint.health.show-details=always가 설정된 경우"></a>HealthIndicator를 구현하며, <code>management.endpoint.health.show-details=always</code>가 설정된 경우</h4><p>사용자화한 항목을 하나의 상세로 표시해준다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">   <span class="attr">"status"</span>:<span class="string">"UP"</span>,</span><br><span class="line">   <span class="attr">"details"</span>:&#123;  </span><br><span class="line">      <span class="attr">"custom"</span>:&#123;  </span><br><span class="line">         <span class="attr">"status"</span>:<span class="string">"UP"</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Metrics"><a href="#Metrics" class="headerlink" title="Metrics"></a>Metrics</h2><p>간단히 말하자면 시계열 지표로 활용할 수 있는 정보를 관리한다. 아래는 그 일부이다.</p><ul><li>JVM 정보<ul><li>thread 수</li><li>GC 정보</li><li>heap 정보</li></ul></li><li>DBCP 정보</li><li>PROCESS 관련 정보</li><li>CPU<ul><li>USAGE</li><li>LOAD</li></ul></li><li>FILE<ul><li>최대 사용가능한 File Descriptor 수</li><li>현재 사용중인 File Descriptor 수</li></ul></li></ul><h3 id="사용자-정의-Metircs"><a href="#사용자-정의-Metircs" class="headerlink" title="사용자 정의 Metircs"></a>사용자 정의 Metircs</h3><p>Metrics의 정보도 사용자 정의할 수 있다. 예를 들어 현재 처리중인 동시 요청 수나 분당 요청 처리량 등을 표시할 수 있다. 방법은 간단하다. <code>MeterRegistry</code>를 주입받아 사용하면 된다.  아래는 처리중인 동시 요청 수에 대한 예제이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class ConcurrentTransactionCountInterceptor extends HandlerInterceptorAdapter &#123;</span><br><span class="line"></span><br><span class="line">    private final Counter counter;</span><br><span class="line"></span><br><span class="line">    public ConcurrentTransactionCountInterceptor(MeterRegistry meterRegistry) &#123;</span><br><span class="line">        this.counter &#x3D; meterRegistry.counter(&quot;transaction.current.count&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line">        counter.increment();</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;</span><br><span class="line">        counter.increment(-1d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>GET /actuator/metrics/transaction.current.count</code>를 호출하면 아래와 같이 나온다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"transaction.current.count"</span>,</span><br><span class="line">  <span class="attr">"measurements"</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"statistic"</span>: <span class="string">"COUNT"</span>,</span><br><span class="line">      <span class="attr">"value"</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>Spring Boot Actuator에 대해서 간략하게 살펴보았다. actuator에서는 이외에도 많은 기능을 제공해주지만, 자주 사용할 것 같은 기능 위주로 살펴봤다.</p><p>actuator는 기본적으로 애플리케이션의 상태를 조회하고, 변경할 수 있도록 기능을 추상화하여 정의하고 있다. 추상화된 기능들에 대한 간단한 구현체들을 제공해주며, 개발자로 하여금 사용자 정의를 통해 더욱 상세한 설정을 할 수 있도록 가능성을 열어두었다. actuator로 인해 프로젝트 내에서 애플리케이션 관리를 통합해서 사용할 수 있으며, 이는 클라우드 환경에서 애플리케이션을 관리하는 데 매우 유용하게 사용할 수 있다. Load Balancing은 물론이거니와 필요시 Instance를 자동으로 배포, 제거하는 데에 유용한 정보들을 제공해줄 수 있다.</p><p>애플리케이션 개발팀과 인프라스트럭처 관리팀이 나누어진 경우, 인프라스트럭처 관리팀에서 정해둔 정책이 있다면 <code>spring-boot-starter</code>를 사용자 정의하여 <code>actuator</code>를 회사, 혹은 팀 단위에 맞춰서 미리 정의해서 사용해보자. 그렇게 되면 개발팀은 서비스 로직에만 신경쓸 수 있게 될 것이다.</p>]]></content>
      
      <categories>
          
          <category> spring </category>
          
          <category> boot </category>
          
          <category> actuator </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> spring-boot </tag>
            
            <tag> spring-boot-actuator </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>(Spring Boot) 다중 DataSource 사용하기 with Sharding</title>
      <link href="/2018/05/06/spring-boot-multiple-datasource/"/>
      <content type="html"><![CDATA[<h1 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h1><p>Spring Boot를 사용해서 Database Sharding을 처리할 수 있을까?<br>요즘 NoSQL에서는 Sharding과 관련해서 많은 편의를 제공한다. 알아서 Sharding을 제공해주고, 클러스터에 노드가 추가되면 Shard key를 기반으로 자동으로 새로운 노드로 값들을 분배해주거나, 노드를 제거하면 대상 노드에 있던 값들을 Shard Key에 맞추어 남은 노드로 분배해준다. 자세히 알아보지는 않았지만 RDBMS 측의 각종 벤더들도 이러한 아키텍처를 구현기위한 방법을 제공할 것이라 생각된다.(예를 들어 MySQL의 Fabric - 현재 MySQL Utilities에 통합)</p><p>이번 포스트에서는 RDBMS Sharding을 각 벤더에 의존해서 구현하지 않고, Spring Boot로 편리하게 설정을 추상화하여 사용할 방법에 대해 공유하려 한다. 앞서 Sharding에 대해서 거창하게 이야기를 했지만, 본문에서 다루고자 하는 영역은 아래의 두 가지 기능이다.</p><ul><li>이름 기반으로 다중 DataSource 정보를 등록 : AbstractRoutingDataSource</li><li>특정 값을 기반으로 대상 DataSource를 사용 : Spring AOP</li></ul><a id="more"></a><h1 id="이름-기반으로-다중-DataSource-정보-등록하기"><a href="#이름-기반으로-다중-DataSource-정보-등록하기" class="headerlink" title="이름 기반으로 다중 DataSource 정보 등록하기"></a>이름 기반으로 다중 DataSource 정보 등록하기</h1><h2 id="AbstractRoutingDataSource"><a href="#AbstractRoutingDataSource" class="headerlink" title="AbstractRoutingDataSource"></a>AbstractRoutingDataSource</h2><p>우선 <code>spring-jdbc</code> 모듈에 있는 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/datasource/lookup/AbstractRoutingDataSource.html" target="_blank" rel="noopener">AbstractRoutingDataSource</a>에 대해서 먼저 소개를 해야할 것 같다. 여러 DataSource를 등록하고, 특정 상황에 맞게 원하는 DataSource를 사용할 수 있도록 추상화한 클래스다. 이 클래스의 <code>public void setTargetDataSources(Map&lt;Object, Object&gt; targetDataSource)</code>를 호출하여 <code>String:DataSource</code>을 <code>키:값</code>으로하는 <code>Map</code>을 저장할 수 있다. 또한 <code>Object determineCurrentLooupKey()</code>를 오버라이드해서 상황에 맞게 Key를 반환하도록 구현할 수 있다.</p><p>예시로 MyBatis의 <a href="https://github.com/hatunet/spring-data-mybatis/blob/master/src/main/java/org/springframework/data/mybatis/replication/datasource/ReplicationRoutingDataSource.java" target="_blank" rel="noopener">ReplicationRoutingDataSource</a>를 살펴보자.</p><p>아래 소스는 <code>ReplicationRoutingDataSource</code>의 내용을 간략화한 것이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReplicationRoutingDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 1</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ReplicationRoutingDataSource</span><span class="params">(DataSource master, List&lt;DataSource&gt; slaves)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">super</span>.setDefaultTargetDataSource(master);</span><br><span class="line">    Map&lt;Object, Object&gt; targetDataSources =</span><br><span class="line">      IntStream.range(<span class="number">0</span>, slaves.size)</span><br><span class="line">               .boxed()</span><br><span class="line">               .collect(toMap(n -&gt; <span class="string">"slave_"</span> + n, n -&gt; slaves.get(n));</span><br><span class="line">    targetDataSources.put(<span class="string">"master"</span>, master);</span><br><span class="line">    <span class="keyword">super</span>.setTargetDataSources(targetDataSources);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> transactionActive = TransactionSynchronizationManager.isActualTransactionActive();</span><br><span class="line">    <span class="keyword">if</span> (transactionActive) &#123;</span><br><span class="line">      <span class="keyword">boolean</span> readOnly = TransactionSynchronizationManager.isCurrentTransactionReadOnly();</span><br><span class="line">      <span class="keyword">if</span> (readOnly) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"slave_"</span> + dataSourceSelectPolicy.select(slaves);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"master"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1: 생성자를 통해서 <code>master</code>로 사용할 <code>DataSource</code>와 <code>slave</code>로 사용할 <code>DataSource</code> 목록을 받고 있다.<br>2: 현재 트랜잭션이 활성화되어 있고, 읽기 전용이면 <code>slave</code> 중에 하나를 선택해서 반환하도록 되어 있다.</p><p>이를 응용해서 이름 기반으로 동작하는 <code>AbstractRoutingDataSource</code>를 구현할 수 있다.</p><h2 id="application-yml을-이용해서-구현해보기"><a href="#application-yml을-이용해서-구현해보기" class="headerlink" title="application.yml을 이용해서 구현해보기"></a>application.yml을 이용해서 구현해보기</h2><p>아래와 같은 구조로 RDBMS가 구성되어 있다고 가정해보자.</p><img  src=http://www.plantuml.com/plantuml/svg/IqaiIKnAB4vLo4qiBaajqiZ9JqxCoSWlBh4oDZOmqrIevb9GY4xEBqgD1J6ACnABKWmHJADOhbekhXIO6SKvYMMfg4QO8ncX0PRNH389GyG8Bb8B0000><p>이러한 구조를 아래와 같은 property를 등록하여 설정되도록 하려고 한다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">named-routing-data-source:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">slave-suffix:</span> <span class="string">-slave</span></span><br><span class="line">  <span class="attr">default-data-source:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">data-sources:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">core</span></span><br><span class="line">      <span class="attr">hikari:</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">jdbc-url:</span> <span class="string">jdbc:mysql://localhost:3306/core?useSSL=false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">slave-of:</span> <span class="string">core</span> <span class="comment"># slave의 경우에는 `slave-of`로 등록한다</span></span><br><span class="line">      <span class="attr">hikari:</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">jdbc-url:</span> <span class="string">jdbc:mysql://localhost:3307/core?useSSL=false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shard1</span></span><br><span class="line">      <span class="attr">hikari:</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">jdbc-url:</span> <span class="string">jdbc:mysql://localhost:3306/shard1?useSSL=false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">slave-of:</span> <span class="string">shard1</span></span><br><span class="line">      <span class="attr">hikari:</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">jdbc-url:</span> <span class="string">jdbc:mysql://localhost:3307/shard1?useSSL=false</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shard2</span></span><br><span class="line">      <span class="attr">hikari:</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">jdbc-url:</span> <span class="string">jdbc:mysql://localhost:3306/shard2?useSSL=false</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">slave-of:</span> <span class="string">shard2</span></span><br><span class="line">      <span class="attr">hikari:</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">jdbc-url:</span> <span class="string">jdbc:mysql://localhost:3307/shard2?useSSL=false</span></span><br></pre></td></tr></table></figure><p>위 properties는 java로 아래와 같이 나타낼 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 전역 설정</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"named-routing-data-source"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NamedRoutingDataSourceGlobalProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Boolean enabled;</span><br><span class="line">  <span class="keyword">private</span> String slaveSuffix = <span class="string">"-slave"</span>;</span><br><span class="line">  <span class="keyword">private</span> String defaultDataSource = <span class="string">"default"</span>;</span><br><span class="line">  <span class="keyword">private</span> List&lt;NamedRoutingDataSourceTargetProperties&gt; dataSources;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DataSource 항목 설정</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NamedRoutingDataSourceTargetProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> String slaveOf;</span><br><span class="line">  <span class="keyword">private</span> HikariConfig hikari;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSlave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !StringUtils.isEmpty(slaveOf);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> hasName = !StringUtils.isEmpty(name);</span><br><span class="line">    <span class="keyword">if</span> (hasName == isSlave) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"name 혹은 slaveOf 둘 중 하나만 있어야 합니다"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>NamedRoutingDataSourceTargetProperties</code>에서 <code>name</code>이나 <code>slaveOf</code> 둘 중 하나만 값이 있어야 한다.<ul><li><code>slaveOf</code>가 <code>a</code>인 경우 <code>name</code>은 <code>&quot;a&quot; + slaveSuffix</code>가 된다.</li></ul></li></ul><h2 id="NamedRoutingDataSource와-NamedDataSource"><a href="#NamedRoutingDataSource와-NamedDataSource" class="headerlink" title="NamedRoutingDataSource와 NamedDataSource"></a>NamedRoutingDataSource와 NamedDataSource</h2><p><code>NamedRoutingDataSource</code>는 <code>AbstractRoutingDataSource</code>를 구현하였다.  <code>NamedDataSource</code>는 <code>NamedRoutingDataSource</code>에서 들고 있을 대상이다. 먼저 <code>NamedDataSource</code>부터 살펴보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>(access = AccessLevel.PRIVATE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NamedDataSource</span> <span class="keyword">implements</span> <span class="title">DataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String slaveOf;</span><br><span class="line">  <span class="meta">@Delegate</span>(types = DataSource<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">private</span> <span class="title">final</span> <span class="title">DataSource</span> <span class="title">delegate</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> NamedDataSource <span class="title">slaveOf</span><span class="params">(String slaveOf, String slaveSuffix, DataSource delegate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> NamedDataSource(slaveOf + slaveSuffix, slaveOf, delegate);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> NamedDataSource <span class="title">asMaster</span><span class="params">(String name, DataSource delegate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> NamedDataSource(name, <span class="keyword">null</span>, delegate);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSlave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !StringUtils.isEmpty(slaveOf);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>NamedDataSource</code>는 slave(<code>slaveOf()</code>)로, 혹은 master(<code>asMaster()</code>)로 생성된다. 그리고 <code>DataSource</code>를 구현하고 있는데, 구현에 필요한 메서드는 모두 <code>delegate</code>에 위임하였다.</p><p>다음은 이 <code>NamedDataSource</code>를 가지고 routing 처리를 할 <code>NamedRoutingDataSource</code>를 살펴보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NamedRoutingDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String defaultDataSource;</span><br><span class="line">  <span class="comment">// 이름을 key로 하여 실제 대상을 메모리로 들고 있는다</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, NamedDataSource&gt; dataSourceMap;</span><br><span class="line">  <span class="comment">// master key에 대한 slave key를 들고 있는다.</span></span><br><span class="line">  <span class="comment">// 여러 slave를 등록할 수 있도록 구현하고 싶다면 Map&lt;String, List&lt;String&gt;&gt;으로 구현할 수 있다.</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String&gt; masterSlaveMap;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">NamedRoutingDataSource</span><span class="params">(String defaultDataSource, List&lt;NamedDataSource&gt; dataSources)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.defaultDataSource = defaultDataSource;</span><br><span class="line">    <span class="keyword">this</span>.dataSourceMap = createDataSourceMap(dataSources);</span><br><span class="line">    <span class="keyword">this</span>.masterSlaveMap = dataSourceMap.values()</span><br><span class="line">                                       .stream()</span><br><span class="line">                                       .filter(NamedDataSource::isSlave)</span><br><span class="line">                                       .collect(toMap(NamedDataSource::getSlaveOf, NamedDataSource::getName));</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// AbstractRoutingDataSource에 등록</span></span><br><span class="line">    <span class="keyword">super</span>.setTargetDataSources(dataSourceMap.entrySet().stream().collect(toMap(Entry::getKey, Entry::getValue)));</span><br><span class="line">    <span class="keyword">super</span>.setDefaultTargetDataSource(dataSourceMap.get(defaultDataSource));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> Map&lt;String, NamedDataSource&gt; <span class="title">createDataSourceMap</span><span class="params">(List&lt;NamedDataSource&gt; dataSources)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dataSources.stream().collect(toMap(NamedDataSource::getName, Function.identity()));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// routing 로직</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String dataSourceName = NamedRoutingDataSourceManager.getCurrentDataSourceName();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dataSourceName == <span class="keyword">null</span>) &#123;</span><br><span class="line">      dataSourceName = defaultDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> transactionActive = TransactionSynchronizationManager.isActualTransactionActive();</span><br><span class="line">    <span class="keyword">if</span> (transactionActive) &#123;</span><br><span class="line">      <span class="keyword">boolean</span> readOnly = TransactionSynchronizationManager.isCurrentTransactionReadOnly();</span><br><span class="line">      <span class="keyword">if</span> (readOnly) &#123;</span><br><span class="line">        dataSourceName = masterSlaveMap.getOrDefault(dataSourceName, dataSourceName);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.debug(<span class="string">"dataSourceName: &#123;&#125;"</span>, dataSourceName);</span><br><span class="line">    <span class="keyword">return</span> dataSourceName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;NamedDataSource&gt; <span class="title">masters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dataSourceMap.values().stream().filter(dataSource -&gt; !dataSource.isSlave()).collect(Collectors.toList());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>NamedRoutingDataSourceManager</code>에서 현재 사용할 DataSource의 이름을 가지고 올 수 있다(<code>getDataSourceName()</code>). <code>NamedRoutingDataSourceManager</code>의 구현은 아래와 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NamedRoutingDataSourceManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; currentDataSourceName = <span class="keyword">new</span> NamedThreadLocal&lt;&gt;(<span class="string">"name of DataSource selected in this thread"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">NamedRoutingDataSourceManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"this class can't be instance"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCurrentDataSourceName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> currentDataSourceName.get();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setCurrentDataSourceName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    currentDataSourceName.set(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeCurrentDataSourceName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    currentDataSourceName.remove();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ThreadLocal</code>로 현재 사용할 DataSource의 이름을 설정할 수 있다. 어디선가는 이 이름을 설정해줘야 <code>Sharding</code>이 제대로 동작할 것이다. 만약 이름이 없다면 <code>NamedRoutingDataSource</code>는 항상 <code>defaultDataSource</code>만 반환할 것이다.</p><h2 id="Spring-AOP를-활용해서-DataSource-이름-설정하기"><a href="#Spring-AOP를-활용해서-DataSource-이름-설정하기" class="headerlink" title="Spring AOP를 활용해서 DataSource 이름 설정하기"></a>Spring AOP를 활용해서 DataSource 이름 설정하기</h2><p>긴 설명보다는 아래 소스를 보고 어떻게 동작할 지 설명하는게 빠를 것 같다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoardRepository</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 1</span></span><br><span class="line">  <span class="meta">@SetDataSourceName</span>(getterType = HashModularDataSourceNameGetter<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">public</span> <span class="title">List</span>&lt;<span class="title">Board</span>&gt; <span class="title">findByWriterId</span>(<span class="title">String</span> <span class="title">id</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 2</span></span><br><span class="line">  <span class="meta">@SetDataSourceName</span>(spel = <span class="string">"#this[0].id"</span>, getterType = HashModularDataSourceNameGetter<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">public</span> <span class="title">List</span>&lt;<span class="title">Board</span>&gt; <span class="title">findByWriter</span>(<span class="title">Writer</span> <span class="title">writer</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SetDataSourceName &#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">spel</span><span class="params">()</span> <span class="keyword">default</span> "#<span class="keyword">this</span>[0]"</span>;</span><br><span class="line">  Class&lt;? extends DataSourceNameGetter&gt; getterType();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DataSourceNameGetter</span> </span>&#123;</span><br><span class="line">  <span class="function">String <span class="title">getDataSourceName</span><span class="params">(Object object)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashModularDataSourceNameGetter</span> <span class="keyword">implements</span> <span class="title">DataSourceNameGetter</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> modValue;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">HashModularDataSourceNameGetter</span><span class="params">(NamedRoutingDataSource dataSource)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.modValue = dataSource.masters().size();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getDataSourceName</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"shard"</span> + (object.hashCode % modValue + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1: <code>findByWriterId</code>의 <code>id</code>값의 <code>hashCode()</code> 결과에 modular 연산을 수행하여 대상 DataSource의 이름을 설정할 수 있다.<br>2: <a href="https://docs.spring.io/spring/docs/5.0.5.RELEASE/spring-framework-reference/core.html#expressions" target="_blank" rel="noopener">SpEL</a>를 적용하여 메서드의 특정 argument를 대상으로 DataSource의 이름을 설정할 수 있다.</p><p>이를 가능하게 하는 <code>SetDataSourceNameAspect</code> 클래스는 다음과 같이 정의할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetDataSourceNameAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> BeanFactory factory;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Pointcut</span>(<span class="string">"@annotation(setDataSourceName)"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hasAnnotation</span><span class="params">(SetDataSourceName setDataSourceName)</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Around</span>(<span class="string">"hasAnnotation(setDataSourceName)"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint, SetDataSourceName setDataSourceName)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">    Object getterKey = parser.parseExpression(setDataSourceName.spel()).getValue(joinPoint.getArgs());</span><br><span class="line">    <span class="comment">// Spring Context에 등록되어 있는 Bean 중에서 Type을 기반으로 검색</span></span><br><span class="line">    DataSourceNameGetter getter = factory.getBean(setDataSourceName.getterType());</span><br><span class="line">    String dataSourceName = getter.getDataSourceName(getterKey);</span><br><span class="line">    <span class="comment">// NamedRoutingDataSourceManager에 사용할 DataSource의 이름 등록</span></span><br><span class="line">    NamedRoutingDataSourceManager.setCurrentDataSourceName(dataSourceName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="comment">// ThreadLocal을 사용하므로 반드시 `remove()`를 실행할 것</span></span><br><span class="line">      NamedRoutingDataSourceManager.removeCurrentDataSourceName();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h1><p>여러 DataSource를 이름 기반으로 등록하고, Spring AOP를 통해서 사용할 DataSource의 이름을 정하도록 소스를 작성해보았다. <code>AbstractRoutingDataSource</code>와 Spring AOP의 원리를 이용해 간단하게 추상화해보고 구현까지 해보았다. 해당 소스에서는 복잡성을 증가시키지 않기 위해 <code>slave</code>는 하나라고 단정하고 진행하였는데, 필요하다면 <code>slave</code> 용도의 DataSource를 따로 <code>SlaveNamedRoutingDataSource</code>같은 클래스로 묶어서 단순한 round-robin 정도라면 간단히 load balancing까지 쉽게 할 수 있을 것이다.<br>한 가지 애매한 것이 DataSource의 이름은 무슨 기준으로 정하느냐 하는 것이다. String으로 되어 있어, 등록하는 부분(<code>NamedDataSource</code>)과 실제로 값을 가져오는 부분(<code>DataSourceNameGetter</code>)에서 문자열을 잘못 입력하여 런타임 오류가 발생하는 가능성도 있는데, 이 부분에 있어서 좋은 해결책이 딱히 떠오르지는 않았다. 만약 강한 제약을 넣고 싶다면 <code>NamedDataSource</code>가 아니라 <code>EnumedDataSource</code>를 사용하는 것도 하나의 옵션으로 고려할 수 있지 않을까 생각된다.</p><p>위에서 소개한 내용 중에 <code>application.yml</code>에 설정된 property를 기반으로 <code>NamedRoutingDataSource</code>를 생성하는 소스는 빠져있다. property와 java 소스가 대칭을 이루기에 굳이 구현 소스를 넣지는 않았다. 상세한 구현이 궁금하다면 github 소스를 참고하자.</p><p>Github 소스 : <a href="https://github.com/supawer0728/parfait-spring-boot-starter-sharding" target="_blank" rel="noopener">https://github.com/supawer0728/parfait-spring-boot-starter-sharding</a></p>]]></content>
      
      <categories>
          
          <category> spring </category>
          
          <category> practice </category>
          
          <category> practice </category>
          
          <category> spring-boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> spring-boot </tag>
            
            <tag> sharding </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cache 장애 대응 방안</title>
      <link href="/2018/04/18/spring-cache-fallback/"/>
      <content type="html"><![CDATA[<h1 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h1><p>Spring은 <a href="https://docs.spring.io/spring/docs/5.0.5.RELEASE/spring-framework-reference/integration.html#cache" target="_blank" rel="noopener">캐시 추상화</a>를 통해서 쉽게 캐시를 사용할 수 있게 해준다. <code>CacheManager</code>를 잘 구현한다면 <code>@Cacheable</code>, <code>@CachePut</code>, <code>@CacheEvict</code> 등을 통해서 얼마든지 커스터마이징된 캐시를 사용할 수 있다. 하지만 의외로 장애에 대응하는 방안에 대해서는 Reference 상에서도 구체적인 설명을 해주지 않고 있다. 덕분에 다시 글 쓸 거리가 생긴 것 같다.</p><p>사용하는 캐시 시스템에 문제가 생겼을 때 어떻게 대처해야하는지는 어떤 정보를 캐시하느냐에 따라 다르다. 경우의 수 자체가 너무 많다. 또한 캐시 자체가 여러 용도로 쓰일 수 있다. HTTP 응답을 캐시하든지, Repository의 결과를 캐시하든지 혹은 Service의 결과를 캐시할 수도 있다. 본문에서는 아래 두 경우로 간단하게 나누고 이에 대한 해결법을 궁리해보고자 한다.</p><ul><li>부하가 많이 걸린다면? 2차 캐시 구성을 고려하자.(Local Cache, Global Cache 구성)</li><li>Global Cache에서 장애가 발생할 경우를 대비, Hystrix를 고려하자</li></ul><a id="more"></a><h1 id="서비스-입장에서-본-구조"><a href="#서비스-입장에서-본-구조" class="headerlink" title="서비스 입장에서 본 구조"></a>서비스 입장에서 본 구조</h1><p>MVC의 Controller에서 로직을 실행하기 위해 Service를 호출할 때 캐시를 사용하려 한다.</p><img  src=http://www.plantuml.com/plantuml/svg/YovEBIhBJ4xLIqyjqT2CLT3LjLE8TavCpaYDLR1II0OnNY_Te_1wnPut2neKtixOyMRR72wO0jsYpFIC4f2EeDIKpE9We56fHR5SA3m5tPpKj1A4gGZD47q5-SMP9Vb5bN3htaoVeF1cmTJNcxUysj2Wy6PwsvivUrwlt0Ar6m00><h1 id="기본-예제"><a href="#기본-예제" class="headerlink" title="기본 예제"></a>기본 예제</h1><p>우선 Spring에서 캐시를 사용하는 기본 예제를 간단히 작성하자. 여기서는 Redis를 캐시로 사용한다.</p><h2 id="의존성-설정"><a href="#의존성-설정" class="headerlink" title="의존성 설정"></a>의존성 설정</h2><p><code>Spring Boot</code>는 <code>2.0.1.RELEASE</code>를 사용했다.</p><p>2.0.x부터 redis를 사용시 <code>lettuce</code> 라이브러리가 기본으로 설정된다. 하지만 예전부터 Spring을 사용하는 경우라면 jedis에 익숙한 개발자가 많을 것으로 예상된다. 어차피 본문에서는 라이브러리에 따라 크게 달라지는 설정이 없으므로 익숙한 jedis를 사용하려고 한다. </p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-cache'</span>)</span><br><span class="line">    <span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-data-redis'</span>) &#123;</span><br><span class="line">        <span class="keyword">exclude</span> <span class="keyword">group</span>: <span class="string">'io.lettuce'</span>, module: <span class="string">'lettuce-core'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">compile</span>(<span class="string">'redis.clients:jedis'</span>)</span><br><span class="line">    <span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-web'</span>)</span><br><span class="line">    compileOnly(<span class="string">'org.projectlombok:lombok'</span>)</span><br><span class="line">    testCompile(<span class="string">'org.springframework.boot:spring-boot-starter-test'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="도메인"><a href="#도메인" class="headerlink" title="도메인"></a>도메인</h2><p><strong>Person</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 테스트 정보를 넣기 위한 생성자</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(@NonNull String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 캐시에 저장된 json string을 인스턴스로 만들기 위한 생성자</span></span><br><span class="line">    <span class="meta">@JsonCreator</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(@JsonProperty(<span class="string">"id"</span>)</span> Long id,</span></span><br><span class="line"><span class="function">                  @<span class="title">JsonProperty</span><span class="params">(<span class="string">"name"</span>)</span> String name,</span></span><br><span class="line"><span class="function">                  @<span class="title">JsonProperty</span><span class="params">(<span class="string">"age"</span>)</span> <span class="keyword">int</span> age) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>PersonRepository</strong></p><p>본문에서는 Repository의 내용이 중요하진 않으므로 Method Signature만 적고 넘어가려고 한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">save</span><span class="params">(Person person)</span> </span>&#123; ... &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">findOne</span><span class="params">(Long id)</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="응용-계층"><a href="#응용-계층" class="headerlink" title="응용 계층"></a>응용 계층</h2><p><strong>PersonService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PersonRepository personRepository;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PersonService</span><span class="params">(@NonNull PersonRepository personRepository)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.personRepository = personRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 메서드 항상 실행, 결과값에 id가 null이 아닌 경우 캐싱</span></span><br><span class="line">    <span class="meta">@CachePut</span>(cacheNames = <span class="string">"person"</span>, key = <span class="string">"#person.id"</span>, unless = <span class="string">"#result.id != null"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">save</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"save() called"</span>);</span><br><span class="line">        <span class="keyword">return</span> personRepository.save(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 캐시에 값이 없는 경우에는 로그를 남기고 repository 실행</span></span><br><span class="line">    <span class="meta">@Cacheable</span>(cacheNames = <span class="string">"person"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">get</span><span class="params">(@NonNull Long id)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"get(Long) called"</span>);</span><br><span class="line">        <span class="keyword">return</span> personRepository.findOne(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/people"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PersonService personService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PersonController</span><span class="params">(@NonNull PersonService personService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.personService = personService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">get</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> personService.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">save</span><span class="params">(@RequestBody Person person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> personService.save(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="캐시-설정"><a href="#캐시-설정" class="headerlink" title="캐시 설정"></a>캐시 설정</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span>(proxyTargetClass = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;redis.host:localhost&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String redisHost;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;redis.port:6379&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer redisPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JedisConnectionFactory <span class="title">jedisConnectionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 현 버전에서 factory.setHostName() 등의 api는 Deprecated되었다.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JedisConnectionFactory(<span class="keyword">new</span> RedisStandaloneConfiguration(redisHost, redisPort));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RedisCacheManager.RedisCacheManagerBuilder builder = RedisCacheManager.RedisCacheManagerBuilder.fromConnectionFactory(jedisConnectionFactory());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 값은 json 문자열로 넣는다. @class 필드로 클래스 정보가 들어간다.</span></span><br><span class="line">        RedisCacheConfiguration defaultConfig =</span><br><span class="line">                RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                                       .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer()))</span><br><span class="line">                                       .entryTtl(Duration.ofSeconds(<span class="number">20L</span>));</span><br><span class="line"></span><br><span class="line">        builder.cacheDefaults(defaultConfig);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="기본-데이터-인입"><a href="#기본-데이터-인입" class="headerlink" title="기본 데이터 인입"></a>기본 데이터 인입</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleCacheApplication</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonRepository personRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        personRepository.save(<span class="keyword">new</span> Person(<span class="string">"John"</span>, <span class="number">12</span>));</span><br><span class="line">        personRepository.save(<span class="keyword">new</span> Person(<span class="string">"Michel"</span>, <span class="number">16</span>));</span><br><span class="line">        personRepository.save(<span class="keyword">new</span> Person(<span class="string">"Chris"</span>, <span class="number">52</span>));</span><br><span class="line">        personRepository.save(<span class="keyword">new</span> Person(<span class="string">"Michael"</span>, <span class="number">25</span>));</span><br><span class="line">        personRepository.save(<span class="keyword">new</span> Person(<span class="string">"Susan"</span>, <span class="number">34</span>));</span><br><span class="line">        personRepository.save(<span class="keyword">new</span> Person(<span class="string">"Kim"</span>, <span class="number">44</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h2><p><strong>/people/1</strong>를 호출하면 <code>get(Long) called</code>가 로그에 한 번 남고, 이후에는 20초 동안 남지 않는다. 그리고 <code>redis-cli</code>로 키를 직접 조회해보면 아래와 같이 정보가 잘 인입되었음을 확인할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get person::1</span><br><span class="line">&quot;&#123;\&quot;@class\&quot;:\&quot;com.parfait.study.simplecache.person.domain.Person\&quot;,\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;John\&quot;,\&quot;age\&quot;:12&#125;&quot;</span><br></pre></td></tr></table></figure><blockquote><p>소스코드 : <a href="https://github.com/supawer0728/simple-cache/tree/simple-cache" target="_blank" rel="noopener">https://github.com/supawer0728/simple-cache/tree/simple-cache</a></p></blockquote><h1 id="2차-캐시-구성"><a href="#2차-캐시-구성" class="headerlink" title="2차 캐시 구성"></a>2차 캐시 구성</h1><p>캐시에 많은 부하가 몰릴 수 있는 시스템의 경우 캐시를 수직적으로 나누어 1차, 2차 캐시를 사용하는 것이 좋을 때가 있다. 서비스 입장에서 구성을 나타내면 아래와 같다.</p><img  src=http://www.plantuml.com/plantuml/svg/YovEBIhBJ4xLIqyjqT2CLT3LjLE8zibFJinnJapEI8rLi5B8I4qiU3EtHU5DqvetirQ-dJhZTTSKXHoG4eLaa1g5jpDslDasXmj56yYOr0mmHyC3Q81cB1SQNm7D9ZJz85dtdFma98SWsVbc-WI5LniclPcxHU7Dz3QGwrvFxL4eIitDBqb5SnMA8Rf5cUaP9I2pWr9JCek3WPvFBG9QZSnJqCr9JIj1jn_T88WP1Vd5cINvHPKWvo7RZijzCFLGrm40><p>이러한 구성을 할 때 주의할 점이 있다. local cache와 global cache의 정보가 맞지 않는 기간이 발생할 수 있다는 것이다. 당연한 이야기지만 local cache의 만료 시간이 길면 길수록 그 기간은 길어진다. 때문에 일관된 데이터가 필요한 만큼 local cache의 만료 시간을 짧게 가져가야한다.</p><p>아쉽게도 이러한 n차 캐시 구성은 Spring에서 지원해주지 않는다. <code>CompositeCacheManager</code>라는 클래스가 있는데, 이 클래스는 등록된 여러 CacheManager 중에서 캐시명으로 Cache를 조회해서 하나만 내어준다.</p><p><strong>CompositeCacheManager</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Cache <span class="title">getCache</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (CacheManager cacheManager : <span class="keyword">this</span>.cacheManagers) &#123;</span><br><span class="line">    Cache cache = cacheManager.getCache(name);</span><br><span class="line">    <span class="keyword">if</span> (cache != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> cache;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>우리가 필요한 것은 CacheManager의 목록을 연결(Chained) 구성하는 것이다. 다행히 핵심 로직은 이미 라이브러리들이 구현해두었다. 우리는 CacheManager와 Cache만 연결 구현하면 된다. </p><h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><h3 id="ChainedCacheManager"><a href="#ChainedCacheManager" class="headerlink" title="ChainedCacheManager"></a>ChainedCacheManager</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainedCacheManager</span> <span class="keyword">implements</span> <span class="title">CacheManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;CacheManager&gt; cacheManagers;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Cache&gt; cacheMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 반드시 하나 이상의 CacheManager를 등록</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChainedCacheManager</span><span class="params">(@NonNull CacheManager... cacheManagers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cacheManagers.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.cacheManagers = Collections.unmodifiableList(Arrays.asList(cacheManagers));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 특정 캐시명으로 조회시 map에 없으면 ChainedCache를 생성</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cache <span class="title">getCache</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cacheMap.computeIfAbsent(name, key -&gt; <span class="keyword">new</span> ChainedCache(getCaches(key)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Cache&gt; <span class="title">getCaches</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cacheManagers.stream().map(manager -&gt; manager.getCache(name)).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;String&gt; <span class="title">getCacheNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cacheManagers.stream()</span><br><span class="line">                            .flatMap(manager -&gt; manager.getCacheNames().stream())</span><br><span class="line">                            .collect(Collectors.toSet());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>실제 로직을 담고 있는 <code>cacheManagers</code>를 두고 위임자 패턴으로 구현하였다. <code>getCache(String)</code> 호출이 있으면, <code>cacheManagers</code>의 순서로 해당 <code>CacheManager</code>의 <code>Cache</code>를 불러와 <code>ChainedCache</code>를 새로 생성한다.</p><h3 id="ChainedCache"><a href="#ChainedCache" class="headerlink" title="ChainedCache"></a>ChainedCache</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainedCache</span> <span class="keyword">implements</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 실제 로직을 위임할 캐시들(local, global)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Cache&gt; caches;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> first = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChainedCache</span><span class="params">(List&lt;Cache&gt; caches)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.caches = Collections.unmodifiableList(caches);</span><br><span class="line">        <span class="keyword">this</span>.size = caches.size();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ValueWrapper <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 순서대로 캐시에서 값을 불러온다</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = first; i &lt; size; i++) &#123;</span><br><span class="line">            ValueWrapper valueWrapper = caches.get(i).get(key);</span><br><span class="line">            <span class="keyword">if</span> (valueWrapper != <span class="keyword">null</span> &amp;&amp; valueWrapper.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 첫번째 캐시에 값이 있으면 그대로 반환</span></span><br><span class="line">                <span class="keyword">if</span> (i == first) &#123;</span><br><span class="line">                    <span class="keyword">return</span> valueWrapper;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 첫번째 이후의 캐시에 값이 있으면 이전 index의 캐시에 각각 저장</span></span><br><span class="line">                putIntoPreviousIndexedCaches(i, key, valueWrapper.get());</span><br><span class="line">                <span class="keyword">return</span> valueWrapper;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">putIntoPreviousIndexedCaches</span><span class="params">(<span class="keyword">int</span> index, Object key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index - <span class="number">1</span>; i &gt;= first; i--) &#123;</span><br><span class="line">            singleCachePut(caches.get(i), key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CacheManager</code>에서 실제 구현을 담고 있는 <code>Cache</code>를 저장한다. 우리가 구현할 내용은 순서를 지정해주고 순서에 따라 값을 넣는 것이다. 실제 동작은 <code>caches</code>에 위임하자.</p><h3 id="CacheConfig"><a href="#CacheConfig" class="headerlink" title="CacheConfig"></a>CacheConfig</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span>(proxyTargetClass = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;redis.host:localhost&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String redisHost;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;redis.port:6379&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer redisPort;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.cache.jcache.provider&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String jCacheProvider;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.cache.jcache.config&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Resource jCacheConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JedisConnectionFactory <span class="title">jedisConnectionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JedisConnectionFactory(<span class="keyword">new</span> RedisStandaloneConfiguration(redisHost, redisPort));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">redisCacheManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RedisCacheManager.RedisCacheManagerBuilder builder = RedisCacheManager.RedisCacheManagerBuilder.fromConnectionFactory(jedisConnectionFactory());</span><br><span class="line"></span><br><span class="line">        RedisCacheConfiguration defaultConfig =</span><br><span class="line">                RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                                       .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer()))</span><br><span class="line">                                       .entryTtl(Duration.ofSeconds(<span class="number">20L</span>));</span><br><span class="line"></span><br><span class="line">        builder.cacheDefaults(defaultConfig);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoggingCacheManager(builder.build(), <span class="string">"Global-Cache"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">jCacheCacheManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CachingProvider provider = Caching.getCachingProvider(jCacheProvider);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> LoggingCacheManager(<span class="keyword">new</span> JCacheCacheManager(provider.getCacheManager(jCacheConfig.getURI(), provider.getDefaultClassLoader())), <span class="string">"Local-Cache"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"can't create URI with spring.cache.jcache.config"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ChainedCacheManager(jCacheCacheManager(), redisCacheManager());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>RedisCacheManager</code>와 <code>JCacheCacheManager(ehCache)</code>를 각각 원격, 로컬 캐시로 잡았다. <code>LoggingCacheManager</code>는 필자가 로그를 남기기 위해 작성한 것이다.</p><h2 id="테스트-1"><a href="#테스트-1" class="headerlink" title="테스트"></a>테스트</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># 최초 호출시 service의 get(Long)까지 부른다</span><br><span class="line">03:24:17  INFO LoggingCache     : Local-Cache.getName() called</span><br><span class="line">03:24:17  INFO LoggingCache     : Local-Cache.get(Object) called</span><br><span class="line">03:24:17  INFO LoggingCache     : Global-Cache.get(Object) called</span><br><span class="line">03:24:17  INFO PersonService    : get(Long) called</span><br><span class="line">03:24:17  INFO LoggingCache     : Local-Cache.put(Object, Object) called</span><br><span class="line">03:24:17  INFO LoggingCache     : Global-Cache.put(Object, Object) called</span><br><span class="line"></span><br><span class="line"># 이후 10초 동안 local-cache의 값 호출</span><br><span class="line">03:24:19  INFO LoggingCache     : Local-Cache.getName() called</span><br><span class="line">03:24:19  INFO LoggingCache     : Local-Cache.get(Object) called</span><br><span class="line">03:24:23  INFO LoggingCache     : Local-Cache.getName() called</span><br><span class="line">03:24:23  INFO LoggingCache     : Local-Cache.get(Object) called</span><br><span class="line">03:24:26  INFO LoggingCache     : Local-Cache.getName() called</span><br><span class="line">03:24:26  INFO LoggingCache     : Local-Cache.get(Object) called</span><br><span class="line"></span><br><span class="line"># 10초가 지나면 local-cache가 만료됨. global-cache까지 호출</span><br><span class="line">03:24:29  INFO LoggingCache     : Local-Cache.getName() called</span><br><span class="line">03:24:29  INFO LoggingCache     : Local-Cache.get(Object) called</span><br><span class="line">03:24:29  INFO LoggingCache     : Global-Cache.get(Object) called</span><br><span class="line">03:24:29  INFO LoggingCache     : Local-Cache.put(Object, Object) called</span><br><span class="line"></span><br><span class="line"># 이후 10초간 local-cache만 호출</span><br><span class="line">03:24:34  INFO LoggingCache     : Local-Cache.getName() called</span><br><span class="line">03:24:34  INFO LoggingCache     : Local-Cache.get(Object) called</span><br><span class="line">03:24:38  INFO LoggingCache     : Local-Cache.getName() called</span><br><span class="line">03:24:38  INFO LoggingCache     : Local-Cache.get(Object) called</span><br><span class="line"></span><br><span class="line"># 10초 뒤 모든 캐시 만료되고 다시 service 호출</span><br><span class="line">03:24:43  INFO LoggingCache     : Local-Cache.getName() called</span><br><span class="line">03:24:43  INFO LoggingCache     : Local-Cache.get(Object) called</span><br><span class="line">03:24:43  INFO LoggingCache     : Global-Cache.get(Object) called</span><br><span class="line">03:24:43  INFO PersonService    : get(Long) called</span><br><span class="line">03:24:43  INFO LoggingCache     : Local-Cache.put(Object, Object) called</span><br><span class="line">03:24:43  INFO LoggingCache     : Global-Cache.put(Object, Object) called</span><br></pre></td></tr></table></figure><p>원하는 대로 정상적으로 동작하고 있다.</p><blockquote><p>소스코드 : <a href="https://github.com/supawer0728/simple-cache/tree/double-cache" target="_blank" rel="noopener">https://github.com/supawer0728/simple-cache/tree/double-cache</a></p></blockquote><h1 id="Hystrix-구성"><a href="#Hystrix-구성" class="headerlink" title="Hystrix 구성"></a>Hystrix 구성</h1><p>전역 캐시가 부하를 받아 Timeout이 발생하거나 특정 이유로 접근이 되지 않는 등의 장애가 발생한 경우, 일전에 공유했던 Hystrix를 고려해볼 수 있다. <strong>전역 캐시에 장애를 감지한 시점부터는 요청을 보내면 안된다.</strong> 물론 이 방법 또한 만병 통치약인 것은 아니다. 아래의 경우를 생각해보자.</p><ul><li>단순 네트워크 단절 : 다행이다. 1차 캐시와 repository로 2차 캐시를 복구할 때까지 운용할 수 있다.</li><li>트래픽 부하로 인한 장애 : 전역 캐시에 장애를 일으켰던 트래픽을 고스란히 1차 캐시와 repository로 견뎌내어야 한다. 2차 캐시를 복구하기 위한 잠깐의 시간 벌기는 가능할 것이다.</li></ul><p>위와 같은 한계가 있음을 숙지하고, 이제 Hystirx를 어떻게 구성할 수 있을지 예제로 작성하려한다.</p><img  src=http://www.plantuml.com/plantuml/svg/YovEBIhBJ4xLIqyjqT2CLT3LjLE8zibFJinnJapEI8rLi5B8I4qiU3EtHU5DqvetirQ-dJhZTTSKXHoG4eLaa1g5jpDslDasXmj56yYOr0mmHyC3Q81cB1SQNm7D9ZJz85dtdFma98SWsVbc-WI5LniclPcxHU7Dz3QGwrvFxL4eIitDBqb5SnMA8Ref-ULvM8mEIat9B0u61aLgaSARUKlVJ5tmUk4SXJTpTxoTEaSXERCekJIpH26_83LF4Tr0a651gGNvnPab-KML8BEGNO7BdJ3rK5S20000><h2 id="HystirxCacheManager"><a href="#HystirxCacheManager" class="headerlink" title="HystirxCacheManager"></a>HystirxCacheManager</h2><p>사실상 Spring에서 캐시 추상화(<code>CacheManager</code>, <code>Cache</code>)를 제공하니 우리는 앞에서 한 작업의 반복을 할 뿐이다. 실제 구현체를 <code>delegate</code>로 잡아두고 위임자 패턴을 사용하여 구현하자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixCacheManager</span> <span class="keyword">implements</span> <span class="title">CacheManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CacheManager delegate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Cache&gt; cacheMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HystrixCacheManager</span><span class="params">(@NonNull CacheManager delegate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.delegate = delegate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cache <span class="title">getCache</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cacheMap.computeIfAbsent(name, key -&gt; <span class="keyword">new</span> HystrixCache(delegate.getCache(key)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;String&gt; <span class="title">getCacheNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.getCacheNames();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HystrixCache"><a href="#HystrixCache" class="headerlink" title="HystrixCache"></a>HystrixCache</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixCache</span> <span class="keyword">implements</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Cache delegate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HystrixCache</span><span class="params">(Cache delegate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.delegate = delegate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ValueWrapper <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HystrixCacheGetCommand(delegate, key).execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Object key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> HystrixCachePutCommand(delegate, key, value).execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evict</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> HystrixCacheEvictCommand(delegate, key).execute();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>아쉽게도 <code>spring-netflix-starter-hystrix</code>에서 지원해주는 애노테이션들을 이용한 설정은 어렵다. 애노테이션을 사용해서 Hystirx설정을 하기 위해서는 설정할 인스턴스가 <code>ApplicationContext</code>에 Bean으로 등록되어야 한다. 때문에 여기서는 Spring의 도움 없이 직접 Hystrix API를 사용하였다. <code>execute()</code>는 HystrixCommand를 동기로 실행한다.</p><h2 id="HystrixCacheGetCommand"><a href="#HystrixCacheGetCommand" class="headerlink" title="HystrixCacheGetCommand"></a>HystrixCacheGetCommand</h2><p>앞에서 get, push, evict에 대해서 모두 <code>HystirxCacheXXXCommand</code>로 작성하였으나 본문에서는 <code>HystrixCacheGetCommand</code>만 살펴보려고 한다. 나머지든 대동소이하다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixCacheGetCommand</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">ValueWrapper</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Cache delegate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object key;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HystrixCacheGetCommand</span><span class="params">(Cache delegate, Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="string">"testGroupKey"</span>))</span><br><span class="line">                    .andCommandKey(HystrixCommandKey.Factory.asKey(<span class="string">"cache-get"</span>))</span><br><span class="line">                    .andCommandPropertiesDefaults(</span><br><span class="line">                            HystrixCommandProperties.defaultSetter()</span><br><span class="line">                                                    .withExecutionTimeoutInMilliseconds(<span class="number">500</span>)</span><br><span class="line">                                                    .withCircuitBreakerErrorThresholdPercentage(<span class="number">50</span>)</span><br><span class="line">                                                    .withCircuitBreakerRequestVolumeThreshold(<span class="number">5</span>)</span><br><span class="line">                                                    .withMetricsRollingStatisticalWindowInMilliseconds(<span class="number">20000</span>)));</span><br><span class="line">        <span class="keyword">this</span>.delegate = delegate;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ValueWrapper <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ValueWrapper <span class="title">getFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.warn(<span class="string">"get fallback called, circuit is &#123;&#125;"</span>, <span class="keyword">super</span>.circuitBreaker.isOpen() ? <span class="string">"opened"</span> : <span class="string">"closed"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>20초간 API의 성공/실패 여부를 측정하며, 5번 이상 실행되고 50% 이상 실패했을 경우 회로가 열린다. Timeout은 500ms로 설정했다. <code>execute()</code>를 실행하면 <code>run()</code>이 실행되며, 실패한 경우 <code>getFallback()</code>이 실행된다.</p><h2 id="CacheConfig-1"><a href="#CacheConfig-1" class="headerlink" title="CacheConfig"></a>CacheConfig</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span>(proxyTargetClass = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">redisCacheManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RedisCacheManager.RedisCacheManagerBuilder builder = RedisCacheManager.RedisCacheManagerBuilder.fromConnectionFactory(jedisConnectionFactory());</span><br><span class="line"></span><br><span class="line">        RedisCacheConfiguration defaultConfig =</span><br><span class="line">                RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                                       .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer()))</span><br><span class="line">                                       .entryTtl(Duration.ofSeconds(<span class="number">20L</span>));</span><br><span class="line"></span><br><span class="line">        builder.cacheDefaults(defaultConfig);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HystrixCacheManager(<span class="keyword">new</span> LoggingCacheManager(builder.build(), <span class="string">"Global-Cache"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>앞서 만들었던 부분을 그대로 생성자로 주입하자.</p><h2 id="테스트-2"><a href="#테스트-2" class="headerlink" title="테스트"></a>테스트</h2><p>서버를 실행 후 Redis 서버를 Down 시킨 후 <code>/people/1</code>을 호출해보았다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">2018-04-18 22:55:09.653  INFO LoggingCache           : Local-Cache.get(Object) called</span><br><span class="line">2018-04-18 22:55:09.653  INFO LoggingCache           : Global-Cache.get(Object) called</span><br><span class="line">2018-04-18 22:55:09.661  WARN HystrixCacheGetCommand : get fallback called, circuit is closed</span><br><span class="line">2018-04-18 22:55:09.662  INFO PersonService          : get(Long) called</span><br><span class="line">2018-04-18 22:55:09.662  INFO LoggingCache           : Local-Cache.put(Object, Object) called</span><br><span class="line">2018-04-18 22:55:09.663  INFO LoggingCache           : Global-Cache.put(Object, Object) called</span><br><span class="line">2018-04-18 22:55:10.164  WARN HystrixCachePutCommand : put fallback called, circuit is closed</span><br><span class="line">2018-04-18 22:55:14.085  INFO LoggingCache           : Local-Cache.get(Object) called</span><br><span class="line">2018-04-18 22:55:14.086  INFO LoggingCache           : Global-Cache.get(Object) called</span><br><span class="line">2018-04-18 22:55:14.588  WARN HystrixCacheGetCommand : get fallback called, circuit is closed</span><br><span class="line">2018-04-18 22:55:14.588  INFO PersonService          : get(Long) called</span><br><span class="line">2018-04-18 22:55:14.588  INFO LoggingCache           : Local-Cache.put(Object, Object) called</span><br><span class="line">2018-04-18 22:55:14.588  INFO LoggingCache           : Global-Cache.put(Object, Object) called</span><br><span class="line">2018-04-18 22:55:15.090  WARN HystrixCachePutCommand : put fallback called, circuit is closed</span><br><span class="line">2018-04-18 22:55:16.104  INFO LoggingCache           : Local-Cache.get(Object) called</span><br><span class="line">2018-04-18 22:55:16.105  INFO LoggingCache           : Global-Cache.get(Object) called</span><br><span class="line">2018-04-18 22:55:16.606  WARN HystrixCacheGetCommand : get fallback called, circuit is closed</span><br><span class="line">2018-04-18 22:55:16.606  INFO PersonService          : get(Long) called</span><br><span class="line">2018-04-18 22:55:16.606  INFO LoggingCache           : Local-Cache.put(Object, Object) called</span><br><span class="line">2018-04-18 22:55:16.607  INFO LoggingCache           : Global-Cache.put(Object, Object) called</span><br><span class="line">2018-04-18 22:55:17.108  WARN HystrixCachePutCommand : put fallback called, circuit is closed</span><br><span class="line">2018-04-18 22:55:17.973  INFO LoggingCache           : Local-Cache.get(Object) called</span><br><span class="line">2018-04-18 22:55:17.974  INFO LoggingCache           : Global-Cache.get(Object) called</span><br><span class="line">2018-04-18 22:55:18.474  WARN HystrixCacheGetCommand : get fallback called, circuit is closed</span><br><span class="line">2018-04-18 22:55:18.474  INFO PersonService          : get(Long) called</span><br><span class="line">2018-04-18 22:55:18.474  INFO LoggingCache           : Local-Cache.put(Object, Object) called</span><br><span class="line">2018-04-18 22:55:18.475  INFO LoggingCache           : Global-Cache.put(Object, Object) called</span><br><span class="line">2018-04-18 22:55:18.977  WARN HystrixCachePutCommand : put fallback called, circuit is closed</span><br><span class="line">2018-04-18 22:55:19.112  INFO LoggingCache           : Local-Cache.get(Object) called</span><br><span class="line">2018-04-18 22:55:19.112  INFO LoggingCache           : Global-Cache.get(Object) called</span><br><span class="line">2018-04-18 22:55:19.613  WARN HystrixCacheGetCommand : get fallback called, circuit is closed</span><br><span class="line">2018-04-18 22:55:19.613  INFO PersonService          : get(Long) called</span><br><span class="line">2018-04-18 22:55:19.613  INFO LoggingCache           : Local-Cache.put(Object, Object) called</span><br><span class="line">2018-04-18 22:55:19.614  INFO LoggingCache           : Global-Cache.put(Object, Object) called</span><br><span class="line">2018-04-18 22:55:20.114  WARN HystrixCachePutCommand : put fallback called, circuit is closed</span><br><span class="line">2018-04-18 22:55:20.241  INFO LoggingCache           : Local-Cache.get(Object) called</span><br><span class="line">2018-04-18 22:55:20.241  INFO LoggingCache           : Global-Cache.get(Object) called</span><br><span class="line">2018-04-18 22:55:20.742  WARN HystrixCacheGetCommand : get fallback called, circuit is closed</span><br><span class="line">2018-04-18 22:55:20.742  INFO PersonService          : get(Long) called</span><br><span class="line">2018-04-18 22:55:20.743  INFO LoggingCache           : Local-Cache.put(Object, Object) called</span><br><span class="line"></span><br><span class="line"># 일정 횟수 fallback이 호출된 후 회로 열림!</span><br><span class="line">2018-04-18 22:55:20.743  WARN HystrixCachePutCommand : put fallback called, circuit is opened</span><br><span class="line">2018-04-18 22:55:21.312  INFO LoggingCache           : Local-Cache.get(Object) called</span><br><span class="line">2018-04-18 22:55:21.312  WARN HystrixCacheGetCommand : get fallback called, circuit is opened</span><br><span class="line">2018-04-18 22:55:21.312  INFO PersonService          : get(Long) called</span><br><span class="line">2018-04-18 22:55:21.312  INFO LoggingCache           : Local-Cache.put(Object, Object) called</span><br><span class="line">2018-04-18 22:55:21.312  WARN HystrixCachePutCommand : put fallback called, circuit is opened</span><br><span class="line">2018-04-18 22:55:22.250  INFO LoggingCache           : Local-Cache.get(Object) called</span><br><span class="line">2018-04-18 22:55:22.250  WARN HystrixCacheGetCommand : get fallback called, circuit is opened</span><br></pre></td></tr></table></figure><blockquote><p>소스코드 : <a href="https://github.com/supawer0728/simple-cache/tree/hystrix-cache" target="_blank" rel="noopener">https://github.com/supawer0728/simple-cache/tree/hystrix-cache</a></p></blockquote><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>Spring의 캐시 추상화를 사용하며, 부하 분산을 통해 장애에 대응할 수 있는 방안에 대해 다뤄보았다.</p><p>우선 n차 캐시 구성을 통해서 Heap을 사용하여 외부 시스템의 호출을 줄여서 전역 리소스(전역 캐시, repository)의 부하를 줄였다. n차 캐시 구성을 사용하는 경우, 리소스 간의 일관성이 무너질 수 있다. 일관성이 중요할수록 로컬 캐시의 수명을 짧게해서 사용해야 한다. </p><p>원격 캐시의 경우 파티션(장애)이 발생할 수 있다. 이에 대응하기 위해 Hystrix를 활용할 수 있다. 회로를 열어 원격에 요청을 보내지 않고, 빠른 실패처리를 할 수 있다. 하지만 여기서도 유의해야할 점이 있는데. 트래픽이 몰리는 상황에서 부하를 견디지 못해 장애가 발생한 경우, 이를 1차 캐시와 repository가 받아내게 된다. 본문에서는 fallback에서 null을 던져 repository를 실행시켰다. 원격 캐시에서 장애가 발생했을 때, 사용자 정의 Exception을 던져 캐시 오류인 경우의 응답을 따로 내려줘서 repository를 지켜내는 것도 방법이 될 수 있을 것 같다.</p>]]></content>
      
      <categories>
          
          <category> spring </category>
          
          <category> practice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> cache </tag>
            
            <tag> fault-tolerance </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>(Spring Boot)Logging과 Profile 전략</title>
      <link href="/2018/04/07/spring-boot-logging/"/>
      <content type="html"><![CDATA[<h1 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h1><p><code>spring-boot</code>에서는 Logback을 확장해서 편리한 logging 설정을 할 수 있다. <code>application.yml</code>의 설정을 읽어 오거나 특정 profile의 동작을 수행할 수 있다. 이 글에서는 Spring Boot에서 어떻게 logging 설정을 하는지를 알아볼 것이다. 그리고 그것을 기반으로 <code>spring-boot</code>를 사용할 때 profile을 활용할 수 있는 방법을 공유하려고 한다.</p><blockquote><p>본문에서는 logback의 기초적인 정보를 가이드하지 않는다.<br><code>spring-boot</code>는 logback 외에도 log4j 등을 지원하지만 logback만을 고려하고 작성한다.</p></blockquote><a id="more"></a><h1 id="Logback-확장-Extentions"><a href="#Logback-확장-Extentions" class="headerlink" title="Logback 확장(Extentions)"></a>Logback 확장(Extentions)</h1><p><code>spring-boot</code>에서는 <a href="https://logback.qos.ch" target="_blank" rel="noopener">Logback</a>을 사용한다. 기존의 logback을 사용해본 사람은 알 것이다. Web Application을 가동하면 classpath 내에서 환경 설정 파일(<code>logback.xml(logback-text.xml)</code>)을 검색해서 logback을 초기화시킨다. 이때는 아직 Spring이 구동되기 전의 시점이다. <code>spring-boot</code>에서는 <code>logback-spring.xml</code>을 사용해서 Spring이 logback을 구동할 수 있도록 지원해준다. 덕분에 profile이나 <code>application.xml</code>에 설정된 properties를 읽어올 수 있다.</p><p>우선은 logger를 등록하는 방법을 알아보자.</p><h2 id="Logger-등록과-level-설정"><a href="#Logger-등록과-level-설정" class="headerlink" title="Logger 등록과 level 설정"></a>Logger 등록과 level 설정</h2><p>기존에 logback에서 logger를 등록하던 방식을 알아보자.<br>우선 아래와 같이 소스 상에서 로그를 남긴다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>logback.xml</code>에서 해당 로그가 남을 수 있도록 설정을 한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.parfait.study.simplelogging.service.SomeService"</span> <span class="attr">level</span>=<span class="string">"INFO"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"warn"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위 설정에서는 전역으로 log level이 warn 이상인 로그만 남기고 있지만, <code>SomeService</code>의 로그는 info 이상이면 남기도록 했다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">02:15:04.557 [restartedMain] INFO  c.p.s.s.service.SomeService - hello</span><br></pre></td></tr></table></figure><p><code>spring-boot</code>를 사용한다면 이제 <code>logback.xml</code>은 필요 없다.</p><p><strong>application.yml</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">warn</span></span><br><span class="line">    <span class="attr">com.parfait.study.simplelogging.service.SomeService:</span> <span class="string">info</span></span><br></pre></td></tr></table></figure><p>보다시피 <code>application.yml</code>의 설정만으로 logger와 level을 설정할 수 있다.</p><h2 id="Logging-관련-Spring-Boot-Properties"><a href="#Logging-관련-Spring-Boot-Properties" class="headerlink" title="Logging 관련 Spring Boot Properties"></a>Logging 관련 Spring Boot Properties</h2><p><code>spring-boot</code>에서는 <code>application.yml</code>에 정의한 properties로도 logging이 동작하도록 지원해준다. 그중에서 활용도가 있어 보이는 몇 개를 골라보았다.</p><table><thead><tr><th>key</th><th>default</th><th>description<td colspan=3></th></tr></thead><tbody><tr><td>logging.file</td><td>- <td colspan=4> 절대 경로로 표현되거나 현재 경로의 상대 경로로 로그 파일명을 지정한다.</td><td></td></tr><tr><td>logging.file.path</td><td>- <td colspan=4> <code>logging.file</code>의 값이 없을 때 동작한다. 지정된 경로에 <code>spring.log</code>로 로그를 남긴다.</td><td></td></tr><tr><td>logging.file.max-size</td><td>10MB <td colspan=4> 로그 파일의 사이즈가 지정된 임계치를 초과하면 파일명에 index를 추가한 후 새로운 파일을 작성한다.<br>예 : spring1.log, spring2.log</td><td></td></tr><tr><td>logging.file.max-history</td><td>0 <td colspan=4> 아래에서 따로 설명한다.</td><td></td></tr><tr><td>logging.level.*</td><td>- <td colspan=4> path 기반으로 logger의 level을 지정한다.</td><td></td></tr></tbody></table><p><strong>logging.file.max-history 부가 설명</strong></p><p>File Appender는 <code>RollingFileAppender</code>를 사용한다. 하지만 <code>spring-boot 1.5.x</code>까지만 해도 file을 rolling하는 정책이 <code>SizeBasedTriggeringPolicy</code>으로 파일 크기가 특정 값에 도달하면 새로운 log file을 남기는 기능만 지원했었다. 때문에 시간이 많이 경과한 log를 지우기 위해서는 서버에서 따로 crond를 돌리거나 별도의 <code>logback-spring.xml</code> 설정을 했어야 했다. 하지만 <code>spring-boot 2.0.0</code>부터는 rolling 정책이 <code>SizeAndTimeBasedRollingPolicy</code>로 변경되었다. 즉 기본 설정으로 로그가 일별로 남는다.(예 : spring.2018-01-01.log) 그리고 <code>logging.file.max-history</code>에 지정한 일수가 지난 로그를 자동으로 삭제해준다.</p><h2 id="기본-설정-파헤치기"><a href="#기본-설정-파헤치기" class="headerlink" title="기본 설정 파헤치기"></a>기본 설정 파헤치기</h2><p>그렇다면 <code>spring-boot</code>는 어떻게 저런 일들을 지원하는 것일까? spring에 있는 기본 설정을 한 번 살펴보자.</p><p><strong>base.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">included</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/defaults.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_FILE"</span> <span class="attr">value</span>=<span class="string">"$&#123;LOG_FILE:-$&#123;LOG_PATH:-$&#123;LOG_TEMP:-$&#123;java.io.tmpdir:-/tmp&#125;&#125;&#125;/spring.log&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/console-appender.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/file-appender.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">included</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;include resource=&quot;.../defaults.xml&quot;&gt;</code> : <code>defaults.xml</code>에서 추가로 설정을 읽어온다. Console Log Pattern과 File Log Pattern의 기본값이 정의되어 있고, 그 외의 <code>tomcat</code>이나 <code>hibernate</code> 등의 모듈의 log level 설정이 되어 있다. 궁금하면 따로 찾아보자.</li><li><code>&lt;property name=&quot;LOG_FILE&quot; ...&gt;</code> : <code>${LOG_FILE}</code>이 없으면 <code>${LOG_PATH}</code>를 부른다. <code>${LOG_PATH}</code>가 없으면 <code>${LOG_TEMP}</code>를 부른다. 이러한 형식으로 <code>application.yml</code>의 property를 불러오고 있다는 것을 파악할 수 있다.</li><li><code>&lt;include resource=&quot;.../console-appender.xml&quot;&gt;</code> : Console Appender 설정을 읽어온다. 아래에서 살펴보자.</li><li><code>&lt;include resource=&quot;.../file-appender.xml&quot;&gt;</code> : File Appender 설정을 읽어온다. 아래에서 살펴보자.</li></ul><p><strong>console-appender.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">included</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONSOLE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">included</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>file-appender.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">included</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_FILE&#125;<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_FILE&#125;.%d&#123;yyyy-MM-dd&#125;.%i.gz<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>$&#123;LOG_FILE_MAX_SIZE:-10MB&#125;<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;LOG_FILE_MAX_HISTORY:-0&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">included</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>rollingPolicy</code> : 앞에서도 설명했지만 <code>SizeAndTimeBasedRollingPolicy</code>로 정책이 변경되면서 날짜별로 로그를 남기고, <code>maxHistory</code>에서 지정한 일수가 지나면 자동으로 삭제한다. 만약 <code>2.0.x</code>보다 옛 버전을 사용하고 있다면 차라리 위 설정을 복사해서 쓰자.</li></ul><h2 id="application-yml의-property-가져오기"><a href="#application-yml의-property-가져오기" class="headerlink" title="application.yml의 property 가져오기"></a>application.yml의 property 가져오기</h2><p>애플리케이션에서 원격의 로그 서버로 로그를 보내고, 로그 서버의 주소를 <code>application.yml</code>에서 <code>logserver.host: http://logserver.com</code>으로 정의했다고 하자. 이때 아래와 같이 <code>application.yml</code>을 참조할 수 있다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">source</span>=<span class="string">"logserver.host"</span> <span class="attr">defaultValue</span>=<span class="string">"http://dev-logserver.com"</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"REMOTE_LOG_SERVER"</span> <span class="attr">class</span>=<span class="string">"xxx.yyy.RemoteLogAppender"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">remoteHost</span>&gt;</span>$&#123;host&#125;<span class="tag">&lt;/<span class="name">remoteHost</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.parfait.study.simplelogging.service.SomeService"</span> <span class="attr">level</span>=<span class="string">"INFO"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"warn"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"REMOTE_LOG_SERVER"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Profile별-환경-설정"><a href="#Profile별-환경-설정" class="headerlink" title="Profile별 환경 설정"></a>Profile별 환경 설정</h2><p><code>spring.profiles.active</code>에서 지정한 profile에 따라 조건들을 추가할 수 있다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONSOLE"</span> <span class="attr">class</span>=<span class="string">"..."</span>&gt;</span><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"alpha"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span> <span class="attr">class</span>=<span class="string">"..."</span>&gt;</span><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"staging"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- staging profile인 경우 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"!production"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- production profile이 아닌 경우 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위 예제는 <a href="https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#_profile_specific_configuration" target="_blank" rel="noopener">Spring Reference에 있는 예제</a>를 약간 수정한 것이다. 이 예제를 보고 아쉬움이 생긴다. <code>OOP</code>스럽지 않다는 것이다. <code>OOP</code>스러운 것은 무엇일까? 작은 문제들로 나누고 이를 조합해서 큰 문제를 해결하는 방식이다! 어떻게 profile로 그러한 사용을 할지 알아보자.</p><h1 id="Profile-전략"><a href="#Profile-전략" class="headerlink" title="Profile 전략"></a>Profile 전략</h1><p>앞서 보았던 profile은 애플리케이션 배포의 주기를 그대로 따르고 있다.</p><ul><li>dev : 개발 단계. 여기서는 CONSOLE로 로그를 남긴다.</li><li>alpha : 알파 테스트 단계. 여기서부터 서버에 배포하므로 FILE로 로그를 남긴다.</li></ul><p>언뜻 보기에는 별다른 문제가 없을 것 같다. 여기에 아까 만들었던 원격 로그 서버로 로그를 내보내는 Appender를 추가해보자. beta profile에서는 FILE과 REMOTE_LOG_SERVER Appender를 사용한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"beta"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span> <span class="attr">class</span>=<span class="string">"..."</span>&gt;</span><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"REMOTE_LOG_SERVER"</span> <span class="attr">class</span>=<span class="string">"..."</span>&gt;</span><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"REMOTE_LOG_SERVER"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure><p>문제가 발생했다. 중복이 생긴 것이다. alpha에서도 FILE Appender를 선언하고 beta에서도 FILE Appender를 선언했다. 어떻게 해야 할까?</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"alpha,beta"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span> <span class="attr">class</span>=<span class="string">"..."</span>&gt;</span><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"beta"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"REMOTE_LOG_SERVER"</span> <span class="attr">class</span>=<span class="string">"..."</span>&gt;</span><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"REMOTE_LOG_SERVER"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위와 예제가 실행되는지는 모르겠지만, 여하튼 저렇게 해서는 안될 것 같다.</p><p>필자가 제시하고 싶은 해결책은 profile을 <code>조합</code>해서 사용하자는 것이다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"console-logging"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONSOLE"</span> <span class="attr">class</span>=<span class="string">"..."</span>&gt;</span><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"file-logging"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span> <span class="attr">class</span>=<span class="string">"..."</span>&gt;</span><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"remote-logging"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"REMOTE_LOG_SERVER"</span> <span class="attr">class</span>=<span class="string">"..."</span>&gt;</span><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"console-logging"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"file-logging"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"remote-logging"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"REMOTE_LOG_SERVER"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>조합을 사용하면 훨씬 유리하게 환경을 구성할 수 있다. 배포 환경과 맞춰서 설정을 해보자.</p><p><strong>배포 환경에 따른 <code>spring.profiles.active</code></strong></p><ul><li>dev : console-logging</li><li>alpha : file-logging</li><li>beta : file-logging,remote-logging</li></ul><p>조합을 해서 원하는 환경을 쉽게 구성할 수 있다는 건 알겠는데 또 다른 문제가 있다. beta에서 모든 것을 다 조합해서 쓰기에는 profile을 입력하는 게 꽤 눈이 아프다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -Dspring.profiles.active&#x3D;file-logging,remote-logging -jar simple-logging-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>이런 문제를 해결하기 위해 <code>spring.profiles.include</code> 설정을 걸어둘 수 있다.</p><p><strong>application-dev.yml</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.profiles.include:</span> <span class="string">console-logging</span></span><br></pre></td></tr></table></figure><p><strong>application-alpha.yml</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.profiles.include:</span> <span class="string">file-logging</span></span><br></pre></td></tr></table></figure><p><strong>application-beta.yml</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.profiles.include:</span> <span class="string">file-logging,remote-logging</span></span><br></pre></td></tr></table></figure><p>배포 단계에 맞춰 필요한 조합을 미리 구성해두고 쓰자.</p><p>이러한 조합은 비단 로깅에서만 쓸 것이 아니다. 업무를 진행하다 보면 배포 환경에 유연성이 필요함을 느낄 때가 있다. 한 마일스톤 내에 두 개의 큰 기능을 배포해야 할 경우가 있다. 예를 들어 메일링 기능 추가와 SMS 기능 추가라고 하자. QA를 진행하다가 한 쪽이 통과하지 못하면 해당 기능을 빼고 배포를 하기 위한 준비가 되어 있고, 각각 별도의 서버(alpha1, alpha2)에서 QA를 진행한다. alpha1에서는 메일링 테스트를 하는데 메일 서버는 운영 환경을 바라보도록 하고, alpha2에서 진행되는 SMS 또한 SMS 서비스만 실제 운영 환경을 바라보도록 해야 한다. 이러한 요구 사항들은 얼마든지 있을 수 있으며, 이에 대한 준비 또한 필요하다.</p><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>사실 Profile 전략을 공유하기 위해서 <code>spring-boot</code>에서 지원하는 로깅을 소개했다. 로깅 지원은 Spring Reference만 읽어봐도 어떤 일을 해주는지 알 수 있다. Spring Boot는 여러 자동 설정으로 우리를 간편하게 해준다. 이번에는 그 설정의 간편화로 인해 얻을 수 있는 큰 이점에 대해서 이야기해봤다. Profile을 배포 단계와 동일시하는 경향이 있다. 실제로 Spring Reference조차 profile을 그런식으로 설명하는 부분이 많으니 어쩔 수 없다. 하지만 <code>spring-boot</code>에서 <code>spring.profiles.include</code>가 생기면서 Profile을 바라보는 시각을 조금 바꿀 수 있게 된 것 같다. 우리는 이제 애플리케이션 설정을 마치 플러그인 다루듯이 할 수 있게 된 것이다.</p><p>이제 <code>spring-boot</code>를 사용할 때 자바 설정상으로는 배포 단계를 나타내지 말자. <code>application-{배포단계}.yml</code>을 작성하고 필요한 설정을 조합하여 사용하자.</p>]]></content>
      
      <categories>
          
          <category> spring </category>
          
          <category> boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> spring-boot </tag>
            
            <tag> log </tag>
            
            <tag> logging </tag>
            
            <tag> logback </tag>
            
            <tag> profile </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>(Spring)Filter와 Interceptor의 차이</title>
      <link href="/2018/04/04/spring-filter-interceptor/"/>
      <content type="html"><![CDATA[<h1 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h1><p>Spring을 익힌지 얼마 되지 않았을 때, 회원 인증 로직을 구현할 일이 생겼었다. 그 인증을 구현하기 위해 Filter와 Interceptor를 조사했었다. 하지만 Filter와 Interceptor를 어떤 경우에 써야 좋은지 명확하게 알지는 못했다. 이제 와서 옛 기억들이 떠올라 다시 <code>spring filter interceptor 차이</code>로 검색을 해보고 올라온 글들을 읽어봤는데, 아무래도 몇 가지 아쉬운 부분들이 있었다. 이번 글에서는 Spring Web Application에서 사용하는 Filter와 Interceptor에 대해, 많은 글에서 공통적으로 이야기하는 부분과 의외로 언급하지 않는 부분 두가지를 쓰려고 한다.</p><a id="more"></a><h1 id="실행-시점"><a href="#실행-시점" class="headerlink" title="실행 시점"></a>실행 시점</h1><table><thead><tr><th><img src="/images/spring-filter-interceptor/spring-request-lifecycle.jpg" alt="request-lifecycle"></th></tr></thead><tbody><tr><td>출처 : <a href="https://justforchangesake.wordpress.com/2014/05/07/spring-mvc-request-life-cycle/" target="_blank" rel="noopener">https://justforchangesake.wordpress.com/2014/05/07/spring-mvc-request-life-cycle/</a></td></tr></tbody></table><h2 id="공통적으로-이야기하는-점"><a href="#공통적으로-이야기하는-점" class="headerlink" title="공통적으로 이야기하는 점"></a>공통적으로 이야기하는 점</h2><ul><li>Filter와 Interceptor는 실행되는 시점이 다르다.</li><li>Filter는 Web Application에 등록을 하고, Interceptor는 Spring의 Context에 등록을 한다.</li></ul><h2 id="추가로-이야기하고-싶은-점"><a href="#추가로-이야기하고-싶은-점" class="headerlink" title="추가로 이야기하고 싶은 점"></a>추가로 이야기하고 싶은 점</h2><p>tomcat의 경우 <code>deployment descriptor(/WEB-INF/web.xml)</code>에 사용할 Filter를 등록한다. 때문에 애플리케이션 전역에 영향을 주는 작업은 Filter로 한다는 의견이 있다. 실제로 필자도 예전에는 그런 줄 알았다. 하지만 사실은 그렇지 않다. Filter도 Interceptor도 모두 요청에 대한 <code>전후 처리</code>라고 하는 역할을 수행한다. 또한 uri기반으로 언제 실행할 것인지를 조정 가능하며, 직접 request의 내용을 파악해서 원하는 조건에 부합할 때 로직을 수행할 수 있다는 점에서 차이가 없다.</p><p>실행 시점이 다르기 때문에 가장 큰 영향을 받는 것. 내가 생각하기에는 예외 처리(Exception Handling)다.</p><p>Filter에서 예외가 발생하면 Web Application에서 처리해야 한다. tomcat을 사용한다면 <code>&lt;error-page&gt;</code>를 잘 선언하든가 아니면 Filter 내에서 예외를 잡아 <code>request.getRequestDispatcher(String)</code>으로 마치 핑퐁 하듯이 예외 처리를 미뤄야 한다. 하지만 Interceptor에서 예외가 발생하면? Interceptor의 실행 시점을 보자, Spring의 ServletDispatcher 내에 있다. 즉 <code>@ControllerAdvice</code>에서 <code>@ExceptionHandler</code>를 사용해서 예외를 처리를 할 수 있다. Spring Web Application의 예외 처리 방법에 대해서는 서술하지 않겠다. 대신 <a href="https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc" target="_blank" rel="noopener">좋은 글</a>이 있으니 읽어두면 좋을 것 같다. 예외 처리가 견고한 Application은 유지 보수하기 좋다. 만약 작성해야할 전후처리 로직에서 예외를 전역적으로 처리하고 싶다면 Interceptor를 사용하자.</p><h1 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h1><p>당연하지만 interface가 다르다. 두 interface의 실행 메서드를 비교해보자.</p><p><strong>Filter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>HandlerInterceptor</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView mav)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServeletResponse response, Object handler, Exception ex)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="공통적으로-이야기하는-점-1"><a href="#공통적으로-이야기하는-점-1" class="headerlink" title="공통적으로 이야기하는 점"></a>공통적으로 이야기하는 점</h2><ul><li>Filter는 Servlet에서 처리하기 전후를 다룰 수 있다.</li><li>Interceptor는 Handler를 실행하기전(preHandle), Handler를 실행한 후(postHandle), view를 렌더링한 후(afterCompletion) 등, Servlet내에서도 메서드에 따라 실행 시점을 다르게 가져간다.</li></ul><h2 id="추가로-이야기하고-싶은-점-1"><a href="#추가로-이야기하고-싶은-점-1" class="headerlink" title="추가로 이야기하고 싶은 점"></a>추가로 이야기하고 싶은 점</h2><h3 id="Interceptor에서만-할-수-있는-것"><a href="#Interceptor에서만-할-수-있는-것" class="headerlink" title="Interceptor에서만 할 수 있는 것"></a>Interceptor에서만 할 수 있는 것</h3><ul><li>AOP 흉내를 낼 수 있다. <code>@RequestMapping</code> 선언으로 요청에 대한 <code>HandlerMethod(@Controller의 메서드)</code>가 정해졌다면, handler라는 이름으로 <code>HandlerMethod</code>가 들어온다. <code>HandlerMethod</code>로 메서드 시그니처 등 추가적인 정보를 파악해서 로직 실행 여부를 판단할 수 있다.</li><li>View를 렌더링하기 전에 추가 작업을 할 수 있다. 예를 들어 웹 페이지가 권한에 따라 GNB(Global Navigation Bar)이 항목이 다르게 노출되어야 할 때 등의 처리를 하기 좋다.</li></ul><h3 id="Filter에서만-할-수-있는-것"><a href="#Filter에서만-할-수-있는-것" class="headerlink" title="Filter에서만 할 수 있는 것"></a>Filter에서만 할 수 있는 것</h3><p><code>ServletRequest</code> 혹은 <code>ServletResponse</code>를 교체할 수 있다. 아래와 같은 일이 가능하다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> </span>&#123;</span><br><span class="line">    chain.doFilter(<span class="keyword">new</span> CustomServletRequest(), <span class="keyword">new</span> CustomResponse());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>설마 저런 일을 할까? 꽤 자주 있는 요구 사항이다. HttpServletRequest의 body(ServletInputStream의 내용)를 로깅하는 것을 예로 들 수 있을 것 같다. <code>HttpServletRequest</code>는 body의 내용을 한 번만 읽을 수 있다. Rest API Application을 작성할 때, 흔히 json 형식으로 요청을 받는다. <code>@Controller(Handler)</code>에 요청이 들어오면서 body를 한 번 읽게 된다. 때문에 Filter나 Interceptor에서는 body를 읽을 수 없다. <code>IOException</code>이 발생한다. body를 로깅하기 위해서는 <code>HttpServletRequest</code>를 감싸서 여러 번 inputStream을 열 수 있도록 커스터마이징 된 <code>ServletRequest</code>를 쓸 수밖에 없다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> </span>&#123;</span><br><span class="line">    chain.doFilter(<span class="keyword">new</span> BodyCachedServletRequestWrapper(request), response);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>Spring으로 Web Application을 작성할 때, 한 번쯤은 Filter와 Interceptor를 선택해야 할 상황에 놓일 것이다. 전후 처리라는 점에서 그 역할은 비슷하나, 실제로 실행되는 시점이나 할 수 있는 것들이 다르다. 처리해야 할 요구 사항에 따라서 무엇을 써도 무방할 수도 있다. 하지만 차이점을 정확히 파악하고 있다면 조금이나마 더 효과적으로 개발을 할 수 있을 것이라고 믿는다.</p>]]></content>
      
      <categories>
          
          <category> spring </category>
          
          <category> mvc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> interceptor </tag>
            
            <tag> filter </tag>
            
            <tag> spring-webmvc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring WebSocket 소개</title>
      <link href="/2018/03/30/spring-websocket/"/>
      <content type="html"><![CDATA[<h1 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h1><p>Web Browser에서 Request를 보내면 Server는 Response를 준다. HTTP 통신의 기본적인 동작 방식이다. 하지만 Server에서 Client로 특정 동작을 알려야 하는 상황도 있다. 예를 들어 Browser로 Facebook에 접속해 있다가 누군가 친구가 글을 등록하는 경우, 혹은 Web Browser로 메신저를 구현하는 경우다. WebSocket이 있기 전에는 이를 Polling이나 Long polling 등의 방식으로 해결했었다. 하지만 WebSocket의 등장으로 Server-Client 간의 실시간 통신이 가능하게 되면서, 앞으로 Long polling은 역사의 뒤안길로 사라질 것 같다.</p><a id="more"></a><p>WebSocket이란 HTTP 환경에서 전이중 통신(full duplex, 2-way communication)을 지원하기 위한 프로토콜로, <a href="https://tools.ietf.org/html/rfc6455" target="_blank" rel="noopener">RFC 6455</a>에 정의되어 있다. HTTP 프로토콜에서 Handshaking을 완료한 후, HTTP로 동작을 하지만, HTTP와는 다른 방식으로 통신을 한다.</p><p>본 문서는 WebSocket을 소개하며, 간단하게 Web Chatting을 지원하는 Application을 작성하여 Spring에서 어떻게 WebSocket을 사용할 수 있도록 지원하는지 소개한다.</p><h1 id="Handshake"><a href="#Handshake" class="headerlink" title="Handshake"></a>Handshake</h1><p>WebSocket은 HTTP 기반으로 Handshaking을 한다. 어떠한 방식인지 잠깐 훑어보자.</p><h2 id="Handshake-요청"><a href="#Handshake-요청" class="headerlink" title="Handshake 요청"></a>Handshake 요청</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;chat HTTP&#x2F;1.1</span><br><span class="line">Host: server.example.com</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ&#x3D;&#x3D;</span><br><span class="line">Origin: http:&#x2F;&#x2F;example.com</span><br><span class="line">Sec-WebSocket-Protocol: v10.stomp, v11.stomp, my-team-custom</span><br><span class="line">Sec-WebSocket-Version: 13</span><br></pre></td></tr></table></figure><ul><li><code>Connection: Upgrade</code> : HTTP 사용 방식을 변경하자.</li><li><code>Upgrade : websocket</code> : WebSocket을 사용하자.</li><li><code>Sec-WebSocket-Protocol: xxx, yyy, zzz</code> : WebSocket을 쓰면서 이 중에서 protocol을 골라서 쓰자.</li><li><code>Sec-WebSocket-Key</code> : 보안을 위한 요청 키.</li></ul><h2 id="Handshake-응답"><a href="#Handshake-응답" class="headerlink" title="Handshake 응답"></a>Handshake 응답</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP&#x2F;1.1 101 Switching Protocols</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo&#x3D;</span><br></pre></td></tr></table></figure><ul><li><code>101 Switching Protocols</code> : Handshake 요청 내용을 기반으로 다음부터 WebSocket으로 통신할 수 있다.</li><li><code>Sec-WebSocket-Accept</code> : 보안을 위한 응답 키 - <code>base64.encode(Sec-WebSocket-Key.concat(GUID))</code></li></ul><h1 id="WebSocket-Sevrer를-운용할-때의-유의사항"><a href="#WebSocket-Sevrer를-운용할-때의-유의사항" class="headerlink" title="WebSocket Sevrer를 운용할 때의 유의사항"></a>WebSocket Sevrer를 운용할 때의 유의사항</h1><ul><li>HTTP에서 동작하나, 그 방식이 HTTP와는 많이 상이하다.<ul><li>REST한 방식의 HTTP 통신에서는 많은 URI를 통해 application이 설계된다.</li><li>WebSocket은 하나의 URL을 통해 Connection이 맺어지고, 후에는 해당 Connection으로만 통신한다.</li></ul></li><li>Handshake가 완료되고 Connection을 유지한다.<ul><li>전통적인 HTTP 통신은 요청-응답이 완료되면 Connection을 close한다. 때문에 이론상 하나의 Server가 Port 수의 한계(<code>n&lt;65535</code>)를 넘는 client의 요청을 처리할 수 있다.</li><li>WebSocket은 Connection을 유지하고 있으므로, 가용 Port 수만큼의 Client와 통신할 수 있다.</li></ul></li></ul><p>Spring의 지원을 받아 Web Application Server에서 HTTP를 지원하면서 WebSocket도 지원할 수 있다. 하지만 HTTP와 WebSocket의 개념이 많이 상이하다 보니, WebSocket을 사용해야 한다면 전용 Server를 구축하는 편이 운영하기 쉬울 것으로 판단된다.</p><h1 id="언제-쓰면-좋을까"><a href="#언제-쓰면-좋을까" class="headerlink" title="언제 쓰면 좋을까?"></a>언제 쓰면 좋을까?</h1><p><a href="https://docs.spring.io/spring/docs/5.0.4.RELEASE/spring-framework-reference/web.html#websocket-intro-when-to-use" target="_blank" rel="noopener">Spring Reference</a>을 참조하면, <code>자주 + 많은 양의 + 지연이 짧아야 하는 통신</code>을 할 수록 WebSocket이 적합하다고 설명하고 있다. 주로 채팅이나 게임이 이러한 요구 사항을 가질 것이다. 단순한 알림 성격의 뉴스 피드 같은 정보에는 polling이나 streaming 방식이 더욱 단순하고 효율적인 솔루션이 될 수 있다.</p><h1 id="지원하는-Browser"><a href="#지원하는-Browser" class="headerlink" title="지원하는 Browser"></a>지원하는 Browser</h1><table><thead><tr><th><img src="/images/spring-websocket/support-browsers.png" alt="지원브라우저"></th></tr></thead><tbody><tr><td><a href="https://caniuse.com/#feat=websockets" target="_blank" rel="noopener">https://caniuse.com/#feat=websockets</a></td></tr></tbody></table><blockquote><p>IE는 10부터 지원한다</p></blockquote><h1 id="SockJS"><a href="#SockJS" class="headerlink" title="SockJS"></a>SockJS</h1><p>IE 8, 9는 여전히 많은 인터넷 사용자가 사용하고 있는 브라우저이나, 해당 버전에서는 WebSocket을 지원하지 않는다. Spring에서는 <a href="https://github.com/sockjs/sockjs-client/" target="_blank" rel="noopener">sockjs-client</a>와 합을 맞추어서, 기존 설정에 큰 변경 없이, 마치 WebSocket Polyfill을 사용하는 것과 같은 효과를 낸다.</p><h2 id="Spring-WebSocket-설정"><a href="#Spring-WebSocket-설정" class="headerlink" title="Spring WebSocket 설정"></a>Spring WebSocket 설정</h2><p><strong>WebSocket 기본 설정</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addHandler(<span class="keyword">new</span> MyHandler(), <span class="string">"/myHandler"</span>).setAllowedOrigins(<span class="string">"*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>WebSocket SockJS 설정</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addHandler(<span class="keyword">new</span> MyHandler(), <span class="string">"/myHandler"</span>).setAllowedOrigins(<span class="string">"*"</span>).withSockJS();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>.withSockJS()</code>만 추가되었다. Client에서는 <code>GET /myHandler/info</code>를 호출해서 Server의 정보를 취득하며, Client의 지원 여부에 따라 Long polling이나 Polling으로 통신한다. Server 측에서는 위 설정 외에는 소스 코드의 변함없이 운영할 수 있다.</p><h1 id="SockJS-기반-채팅서버-예제"><a href="#SockJS-기반-채팅서버-예제" class="headerlink" title="SockJS 기반 채팅서버 예제"></a>SockJS 기반 채팅서버 예제</h1><p>서버에서 미리 정의한 채팅방(<code>ChatRoom</code>)에 들어가 있는 사용자(<code>Session</code>) 간에 채팅을 지원한다.</p><h2 id="Gradle-설정"><a href="#Gradle-설정" class="headerlink" title="Gradle 설정"></a>Gradle 설정</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">  <span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-mustache'</span>)</span><br><span class="line">  <span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-web'</span>)</span><br><span class="line">  <span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-websocket'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">compile</span>(<span class="string">'org.webjars.bower:jquery:3.3.1'</span>)</span><br><span class="line">  <span class="keyword">compile</span>(<span class="string">'org.webjars:sockjs-client:1.1.2'</span>)</span><br><span class="line">  <span class="keyword">compile</span>(<span class="string">'org.webjars:webjars-locator:0.30'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">runtime</span>(<span class="string">'org.springframework.boot:spring-boot-devtools'</span>)</span><br><span class="line">  compileOnly(<span class="string">'org.projectlombok:lombok'</span>)</span><br><span class="line">  testCompile(<span class="string">'org.springframework.boot:spring-boot-starter-test'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-Application-설정"><a href="#Spring-Application-설정" class="headerlink" title="Spring Application 설정"></a>Spring Application 설정</h2><p><strong>application.yml</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.mustache.suffix:</span> <span class="string">.html</span></span><br></pre></td></tr></table></figure><p><strong>WebSocketConfig</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Profile</span>(<span class="string">"!stomp"</span>)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ChatHandler chatHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 해당 endpoint로 handshake가 이루어진다.</span></span><br><span class="line">        registry.addHandler(chatHandler, <span class="string">"/ws/chat"</span>).setAllowedOrigins(<span class="string">"*"</span>).withSockJS();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>WebSocketHandlerRegistry</code>에 <code>WebSocketHandler</code>의 구현체를 등록한다. 등록된 Handler는 특정 endpoint(<code>&quot;/wa/chat&quot;</code>)로 handshake를 완료한 후 맺어진 connection의 관리한다. <code>WebSocketHandler</code>의 구현체(<code>ChatHandler</code>)의 내용은 아래에서 살펴보겠다.</p><h2 id="채팅방-입장-구현"><a href="#채팅방-입장-구현" class="headerlink" title="채팅방 입장 구현"></a>채팅방 입장 구현</h2><h3 id="ChatRoom"><a href="#ChatRoom" class="headerlink" title="ChatRoom"></a>ChatRoom</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatRoom</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;WebSocketSession&gt; sessions = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 채팅방 생성</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ChatRoom <span class="title">create</span><span class="params">(@NonNull String name)</span> </span>&#123;</span><br><span class="line">        ChatRoom created = <span class="keyword">new</span> ChatRoom();</span><br><span class="line">        created.id = UUID.randomUUID().toString();</span><br><span class="line">        created.name = name;</span><br><span class="line">        <span class="keyword">return</span> created;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>채팅방은 <code>id</code>, <code>name</code>, <code>sessions</code>로 구성된다. <code>WebSocketSession</code>은 spring에서 WebSocket connection이 맺어진 세션을 가리킨다. 편하게 고수준 <code>socket</code>이라고 생각하자. 해당 session을 통해서 메시지를 보낼(<code>sendMessage()</code>) 수 있다.</p><h3 id="ChatRoomRepository"><a href="#ChatRoomRepository" class="headerlink" title="ChatRoomRepository"></a>ChatRoomRepository</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatRoomRepository</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, ChatRoom&gt; chatRoomMap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChatRoomRepository</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        chatRoomMap = Collections.unmodifiableMap(</span><br><span class="line">                Stream.of(ChatRoom.create(<span class="string">"1번방"</span>), ChatRoom.create(<span class="string">"2번방"</span>), ChatRoom.create(<span class="string">"3번방"</span>))</span><br><span class="line">                      .collect(Collectors.toMap(ChatRoom::getId, Function.identity())));</span><br><span class="line"></span><br><span class="line">        chatRooms = Collections.unmodifiableCollection(chatRoomMap.values());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChatRoom <span class="title">getChatRoom</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> chatRoomMap.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;ChatRoom&gt; <span class="title">getChatRooms</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> chatRoomMap.values();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>테스트를 위한 용도로 UUID로 채팅방 id를 지정하여, 3개의 채팅방을 생성해두었다.</p><h3 id="ChatController"><a href="#ChatController" class="headerlink" title="ChatController"></a>ChatController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/chat"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatRoomController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ChatRoomRepository repository;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger seq = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChatRoomController</span><span class="params">(ChatRoomRepository repository)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.repository = repository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/rooms"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">rooms</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"rooms"</span>, repository.getChatRooms());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/chat/room-list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/rooms/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">room</span><span class="params">(@PathVariable String id, Model model)</span> </span>&#123;</span><br><span class="line">        ChatRoom room = repository.getChatRoom(id);</span><br><span class="line">        model.addAttribute(<span class="string">"room"</span>, room);</span><br><span class="line">        model.addAttribute(<span class="string">"member"</span>, <span class="string">"member"</span> + seq.incrementAndGet()); <span class="comment">// 회원 이름 부여</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/chat/room"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>채팅방에 진입을 하기 위한 Controller다. <code>/chat/rooms</code>를 통해서 채팅방의 목록을 확인할 수 있고, <code>/chat/rooms/{id}</code>를 통해서 특정 id의 채팅방에 입장할 수 있다.</p><h3 id="room-list-html"><a href="#room-list-html" class="headerlink" title="room-list.html"></a>room-list.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>채팅방 목록<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;&#123;#rooms&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/chat/rooms/&#123;&#123;id&#125;&#125;"</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;&#123;/rooms&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="room-html"><a href="#room-html" class="headerlink" title="room.html"></a>room.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123;room.name&#125;&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/webjars/jquery/dist/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/webjars/sockjs-client/sockjs.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;room.name&#125;&#125;(&#123;&#123;room.id&#125;&#125;)<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span> <span class="attr">data-room-id</span>=<span class="string">"&#123;&#123;room.id&#125;&#125;"</span> <span class="attr">data-member</span>=<span class="string">"&#123;&#123;member&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"chat_box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"send"</span>&gt;</span>보내기<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> chatBox = $(<span class="string">'.chat_box'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> messageInput = $(<span class="string">'input[name="message"]'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> sendBtn = $(<span class="string">'.send'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> roomId = $(<span class="string">'.content'</span>).data(<span class="string">'room-id'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> member = $(<span class="string">'.content'</span>).data(<span class="string">'member'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// handshake</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> sock = <span class="keyword">new</span> SockJS(<span class="string">"/ws/chat"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// onopen : connection이 맺어졌을 때의 callback</span></span></span><br><span class="line"><span class="actionscript">        sock.onopen = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// send : connection으로 message를 전달</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// connection이 맺어진 후 가입(JOIN) 메시지를 전달</span></span></span><br><span class="line"><span class="javascript">            sock.send(<span class="built_in">JSON</span>.stringify(&#123;<span class="attr">chatRoomId</span>: roomId, <span class="attr">type</span>: <span class="string">'JOIN'</span>, <span class="attr">writer</span>: member&#125;));</span></span><br><span class="line">            </span><br><span class="line"><span class="actionscript">            <span class="comment">// onmessage : message를 받았을 때의 callback</span></span></span><br><span class="line"><span class="actionscript">            sock.onmessage = <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> content = <span class="built_in">JSON</span>.parse(e.data);</span></span><br><span class="line"><span class="actionscript">                chatBox.append(<span class="string">'&lt;li&gt;'</span> + content.message + <span class="string">'('</span> + content.writer + <span class="string">')&lt;/li&gt;'</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        sendBtn.click(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> message = messageInput.val();</span></span><br><span class="line"><span class="javascript">            sock.send(<span class="built_in">JSON</span>.stringify(&#123;<span class="attr">chatRoomId</span>: roomId, <span class="attr">type</span>: <span class="string">'CHAT'</span>, <span class="attr">message</span>: message, <span class="attr">writer</span>: member&#125;));</span></span><br><span class="line"><span class="actionscript">            messageInput.val(<span class="string">''</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>new SockJS(&quot;/ws/chat&quot;)</code> : handshake를 한다.</li><li><code>sock.onoepn = function() { ... }</code> : handshake가 완료되고 connection이 맺어지면 실행된다.</li><li><code>sock.send(string)</code> : socket을 대상으로 문자열을 전송한다.</li><li><code>sock.onmessage = function(evt) { ... }</code> : socket에서 정보를 수신했을 때 실행된다. <code>evt.data</code>로 정보가 들어온다.</li></ul><h3 id="ChatMessage"><a href="#ChatMessage" class="headerlink" title="ChatMessage"></a>ChatMessage</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatMessage</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String chatRoomId;</span><br><span class="line">    <span class="keyword">private</span> String writer;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> MessageType type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client와 주고받을 모델이다.</p><h3 id="ChatHandler"><a href="#ChatHandler" class="headerlink" title="ChatHandler"></a>ChatHandler</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Profile</span>(<span class="string">"!stomp"</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatHandler</span> <span class="keyword">extends</span> <span class="title">TextWebSocketHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ChatRoomRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChatHandler</span><span class="params">(ObjectMapper objectMapper, ChatRoomRepository chatRoomRepository)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.objectMapper = objectMapper;</span><br><span class="line">        <span class="keyword">this</span>.repository = chatRoomRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleTextMessage</span><span class="params">(WebSocketSession session, TextMessage message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String payload = message.getPayload();</span><br><span class="line">        log.info(<span class="string">"payload : &#123;&#125;"</span>, payload);</span><br><span class="line"></span><br><span class="line">        ChatMessage chatMessage = objectMapper.readValue(payload, ChatMessage<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        ChatRoom chatRoom = repository.getChatRoom(chatMessage.getChatRoomId());</span><br><span class="line">        chatRoom.handleMessage(session, chatMessage, objectMapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionClosed</span><span class="params">(WebSocketSession session, CloseStatus status)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        repository.remove(session);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ChatHandler</code>는 <code>WebSocketHandler</code>의 구현체이다. <code>WebSocketHandler</code>는 다음 메서드를 가지고 있다.</p><ul><li><code>afterConnectionEstablished(WebSocketSession)</code> : connection이 맺어진 후 실행된다.</li><li><code>handleMessage(WebSocketSession, WebSocketMessage&lt;?&gt;)</code> : session에서 메시지를 수신했을 때 실행된다. message 타입에 따라 <code>handleTextMessage()</code>, <code>handleBinaryMessage()</code>를 실행한다.<ul><li>본문에서 상속한 <code>TextWebSocketHandler</code>는 <code>handleTextMessage(WebSocketSession, TextMessage)</code>를 실행한다.</li></ul></li><li><code>afterConnectionClosed(WebSocketSession, CloseStatus)</code> : close 이후 실행된다.</li></ul><p>위 소스에서는 message가 들어오는 경우, <code>message.getChatRoomId()</code>로 채팅방을 찾아 메시지를 전파한다.</p><h3 id="ChatRoom-1"><a href="#ChatRoom-1" class="headerlink" title="ChatRoom"></a>ChatRoom</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatRoom</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;WebSocketSession&gt; sessions = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(WebSocketSession session, ChatMessage chatMessage, ObjectMapper objectMapper)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (chatMessage.getType() == MessageType.JOIN) &#123;</span><br><span class="line">            join(session);</span><br><span class="line">            chatMessage.setMessage(chatMessage.getWriter() + <span class="string">"님이 입장했습니다."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        send(chatMessage, objectMapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(WebSocketSession session)</span> </span>&#123;</span><br><span class="line">        sessions.add(session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">(T messageObject, ObjectMapper objectMapper)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        TextMessage message = <span class="keyword">new</span> TextMessage(objectMapper.writeValueAsString(messageObject));</span><br><span class="line">        sessions.parallelStream().forEach(session -&gt; session.sendMessage(message));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="실행"><a href="#실행" class="headerlink" title="실행"></a>실행</h2><p><img src="/images/spring-websocket/websocket-example1.png" alt="스크린샷1"></p><h2 id="현재-채팅-서버의-단점"><a href="#현재-채팅-서버의-단점" class="headerlink" title="현재 채팅 서버의 단점"></a>현재 채팅 서버의 단점</h2><p><code>ChatRoom</code>이 하는 일이 저수준이다. 마치 socket을 직접 처리하는 것 같다. socket을 보유하고 있고, 특정 이벤트가 발생하면 socket에 메시지를 보내고, session이 종료되면 socket을 삭제한다. 지금까지의 소스에서 WebSocket의 기본적인 동작에 대해서 배웠다고 생각하자. Spring에서 지원해주는 STOMP를 사용하게 되면, 지금까지와는 전혀 다른 모습으로 개발을 하게 될 것이다.</p><h1 id="STOMP"><a href="#STOMP" class="headerlink" title="STOMP"></a>STOMP</h1><br>> 여태까지의 WebSocket Application은 잊자. STOMP를 사용하게 되면, 사실상 Application에서 직접 session을 처리하는 것이 아니라, 오히려 proxy에 가까운 역할을 하게 된다.<p>앞서 <code>WebSocketHandler</code>에 대해서 설명하기를 message 타입이 binary 혹은 text로 나뉜다고 했었다. message가 binary거나 text이기만 하면 실제 내용물이 무엇이든지 통신이 이루어지는 것이다. 이를 sub-protocol을 사용해서 제어할 수 있다. handshake 과정에서 특정 sub-protocol을 사용하기로 합의할 수 있다. sub-protocol의 하나인 STOMP를 사용하게 되면 단순한 binary, text가 아닌 규격을 갖춘(format) message를 보낼 수 있다.</p><p>STOMP의 형식은 마치 HTTP와 닮아 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">COMMAND</span><br><span class="line">header1:value1</span><br><span class="line">header2:value2</span><br><span class="line"></span><br><span class="line">Body^@</span><br></pre></td></tr></table></figure><ul><li>COMMAND : SEND, SUBSCRIBE를 지시할 수 있다.</li><li>header : 기존의 WebSocket으로는 표현이 불가능한 header를 작성할 수 있다.<ul><li>destination : 이 헤더로 메시지를 보내거나(SEND), 구독(SUBSCRIBE)할 수 있다. 이를 통해 간단하게 PUB-SUB를 구현할 수 있다.</li></ul></li></ul><p>예를 들어 ClientA는 아래와 같이 5번 채팅방에 대해 구독을 걸어둘 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SUBSCRIBE</span><br><span class="line">destination: &#x2F;subscribe&#x2F;chat&#x2F;room&#x2F;5</span><br></pre></td></tr></table></figure><p>후에 ClientB에서 아래와 같이 채팅 메시지를 보낼 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SEND</span><br><span class="line">content-type: application&#x2F;json</span><br><span class="line">destination: &#x2F;publish&#x2F;chat</span><br><span class="line"></span><br><span class="line">&#123;&quot;chatRoomId&quot;: 5, &quot;type&quot;: &quot;MESSAGE&quot;, &quot;writer&quot;: &quot;clientB&quot;&#125;</span><br></pre></td></tr></table></figure><p>이때 Server에서는 내용을 기반(<code>chatRoomId</code>)으로 메시지를 전송할 broker에 전달한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MESSAGE</span><br><span class="line">destination: &#x2F;subscribe&#x2F;chat&#x2F;room&#x2F;5</span><br><span class="line"></span><br><span class="line">&#123;&quot;chatRoomId&quot;: 5, &quot;type&quot;: &quot;MESSAGE&quot;, &quot;writer&quot;: &quot;clientB&quot;&#125;</span><br></pre></td></tr></table></figure><p>이렇게 <code>/subscribe/chat/room/5</code>를 구독하는 Client에게 메시지가 송신된다.</p><img  src=http://www.plantuml.com/plantuml/svg/Iyx9JCqhSLJGjLC8JYqgIorIi58mr5C83dKATWxoT79Lq2ykJIfEBifCIjLFpaWiqI_Apy_LD-M2AhRHLKW6c-04r6S4rEVgvwAWNr2Qb9DPd07M05E9R86ndeAlQt2mepiXuu6Qag4Ej58mqLDuCtVYw-wj0000><h1 id="STOMP-기반-채팅서버-예제"><a href="#STOMP-기반-채팅서버-예제" class="headerlink" title="STOMP 기반 채팅서버 예제"></a>STOMP 기반 채팅서버 예제</h1><p><a href="https://docs.spring.io/spring/docs/5.0.4.RELEASE/spring-framework-reference/web.html#websocket-stomp-message-flow" target="_blank" rel="noopener">Spring Reference</a>에서는 동작 방식을 먼저 상세히 설명한 후에 이런저런 소스를 설명하는데, 오히려 소스를 한 번 보고 동작 방식을 설명하는 것이 이해하기 쉬울 것 같아서 예제를 먼저 소개하려고 한다.</p><h2 id="Spring-Application-설정-1"><a href="#Spring-Application-설정-1" class="headerlink" title="Spring Application 설정"></a>Spring Application 설정</h2><h3 id="StompWebSocketConfig"><a href="#StompWebSocketConfig" class="headerlink" title="StompWebSocketConfig"></a>StompWebSocketConfig</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Profile</span>(<span class="string">"stomp"</span>)</span><br><span class="line"><span class="meta">@EnableWebSocketMessageBroker</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StompWebSocketConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketMessageBrokerConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerStompEndpoints</span><span class="params">(StompEndpointRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addEndpoint(<span class="string">"/stomp-chat"</span>).setAllowedOrigins(<span class="string">"*"</span>).withSockJS();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageBroker</span><span class="params">(MessageBrokerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.setApplicationDestinationPrefixes(<span class="string">"/publish"</span>);</span><br><span class="line">        registry.enableSimpleBroker(<span class="string">"/subscribe"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>구현할 interface의 대상이 <code>WebSocketMessageBrokerConfigurer</code>로 바뀌었다. <code>registerStompEndpoints</code>에서 기존의 WebSocket 설정과 마찬가지로 handshake와 통신을 담당할 endpoint를 지정한다. <code>configureMessageBroker</code>에서 Application 내부에서 사용할 path를 지정할 수 있다.</p><ul><li><code>setApplicationDestinationPrefixes</code> : client에서 <code>SEND</code> 요청을 처리한다.<ul><li>Spring Reference에서는 <code>/topic</code>, <code>/queue</code>가 주로 등장하는데 여기서는 이해를 돕기 위해 <code>/publish</code>로 지정하였다.<ul><li><code>/topic</code> : 암시적으로 1:N 전파를 의미한다.</li><li><code>/queue</code> : 암시적으로 1:1 전파를 의미한다.</li></ul></li></ul></li><li><code>enableSimpleBroker</code> : 해당 경로로 <code>SimpleBroker</code>를 등록한다. <code>SimpleBroker</code>는 해당하는 경로를 <code>SUBSCRIBE</code>하는 client에게 메시지를 전달하는 간단한 작업을 수행한다.</li><li><code>enableStompBrokerRelay</code> : <code>SimpleBroker</code>의 기능과 외부 message broker(<code>RabbitMQ</code>, <code>ActiveMQ</code> 등)에 메시지를 전달하는 기능을 가지고 있다.</li></ul><h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><h3 id="room-html-1"><a href="#room-html-1" class="headerlink" title="room.html"></a>room.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123;room.name&#125;&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/webjars/jquery/dist/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/webjars/sockjs-client/sockjs.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/webjars/stomp-websocket/stomp.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;room.name&#125;&#125;(&#123;&#123;room.id&#125;&#125;)<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span> <span class="attr">data-room-id</span>=<span class="string">"&#123;&#123;room.id&#125;&#125;"</span> <span class="attr">data-member</span>=<span class="string">"&#123;&#123;member&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"chat_box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"send"</span>&gt;</span>보내기<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> chatBox = $(<span class="string">'.chat_box'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> messageInput = $(<span class="string">'input[name="message"]'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> sendBtn = $(<span class="string">'.send'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> roomId = $(<span class="string">'.content'</span>).data(<span class="string">'room-id'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> member = $(<span class="string">'.content'</span>).data(<span class="string">'member'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> sock = <span class="keyword">new</span> SockJS(<span class="string">"/stomp-chat"</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> client = Stomp.over(sock); <span class="comment">// 1. SockJS를 내부에 들고 있는 client를 내어준다.</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 2. connection이 맺어지면 실행된다.</span></span></span><br><span class="line"><span class="actionscript">        client.connect(&#123;&#125;, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 3. send(path, header, message)로 메시지를 보낼 수 있다.</span></span></span><br><span class="line"><span class="javascript">            client.send(<span class="string">'/publish/chat/join'</span>, &#123;&#125;, <span class="built_in">JSON</span>.stringify(&#123;<span class="attr">chatRoomId</span>: roomId, <span class="attr">writer</span>: member&#125;)); </span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 4. subscribe(path, callback)로 메시지를 받을 수 있다. callback 첫번째 파라미터의 body로 메시지의 내용이 들어온다.</span></span></span><br><span class="line"><span class="actionscript">            client.subscribe(<span class="string">'/subscribe/chat/room/'</span> + roomId, <span class="function"><span class="keyword">function</span> <span class="params">(chat)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> content = <span class="built_in">JSON</span>.parse(chat.body);</span></span><br><span class="line"><span class="actionscript">                chatBox.append(<span class="string">'&lt;li&gt;'</span> + content.message + <span class="string">'('</span> + content.writer + <span class="string">')&lt;/li&gt;'</span>)</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        sendBtn.click(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> message = messageInput.val();</span></span><br><span class="line"><span class="javascript">            client.send(<span class="string">'/publish/chat/message'</span>, &#123;&#125;, <span class="built_in">JSON</span>.stringify(&#123;<span class="attr">chatRoomId</span>: roomId, <span class="attr">message</span>: message, <span class="attr">writer</span>: member&#125;));</span></span><br><span class="line"><span class="actionscript">            messageInput.val(<span class="string">''</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Profile</span>(<span class="string">"stomp"</span>)</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatMessageController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SimpMessagingTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChatMessageController</span><span class="params">(SimpMessagingTemplate template)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.template = template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MessageMapping</span>(<span class="string">"/chat/join"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(ChatMessage message)</span> </span>&#123;</span><br><span class="line">        message.setMessage(message.getWriter() + <span class="string">"님이 입장하셨습니다."</span>);</span><br><span class="line">        template.convertAndSend(<span class="string">"/subscribe/chat/room/"</span> + message.getChatRoomId(), message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MessageMapping</span>(<span class="string">"/chat/message"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">message</span><span class="params">(ChatMessage message)</span> </span>&#123;</span><br><span class="line">        template.convertAndSend(<span class="string">"/subscribe/chat/room/"</span> + message.getChatRoomId(), message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>SimpleMessagingTemplate</code> : <code>@EnableWebSocketMessageBroker</code>를 통해서 등록되는 bean이다. 특정 Broker로 메시지를 전달한다.</li><li><code>@MessageMapping</code> : Client가 <code>SEND</code>를 할 수 있는 경로다. <code>StompWebSocketConfig</code>에서 등록한 <code>applicationDestinationPrfixes</code>와 <code>@MessageMapping</code>의 경로가 합쳐진다.(<code>/publish/chat/join</code>)</li></ul><h2 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h2><p>소스는 위에서 설명한 것이 전부다. session도 Spring이 알아서 관리한다. 개발자가 할 일은 권한과 서비스 로직에 맞게 메시지를 처리하거나, broker로 메시지를 라우팅하는 것이다.</p><h3 id="메시지-흐름"><a href="#메시지-흐름" class="headerlink" title="메시지 흐름"></a>메시지 흐름</h3><p>아래 그림은 <a href="https://docs.spring.io/spring/docs/5.0.4.RELEASE/spring-framework-reference/web.html#websocket-stomp-message-flow" target="_blank" rel="noopener">Spring Reference</a>에서 가져왔다. 이해하기 어렵다면 <code>/app</code>을 <code>/publish</code>로, <code>/topic</code>을 <code>/subscribe</code>로 치환해서 보자.</p><table><thead><tr><th><img src="/images/spring-websocket/message-flow-simple-broker.png" alt="메시지 흐름"></th></tr></thead><tbody><tr><td>출처 : <a href="https://docs.spring.io/spring/docs/5.0.4.RELEASE/spring-framework-reference/web.html#websocket-stomp-message-flow" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/5.0.4.RELEASE/spring-framework-reference/web.html#websocket-stomp-message-flow</a></td></tr></tbody></table><ul><li>SimpAnnotationMethod : <code>@MessageMapping</code> 등 client의 <code>SEND</code>를 받아서 처리한다.</li><li>SimpleBroker : client의 정보를 메모리 상에 들고 있으며, client로 메시지를 내보낸다.</li><li>channel : 3종류의 channel이 등장한다<ul><li>clientInboundChannel : WebSocket Client로부터 들어오는 요청을 전달하며, <code>WebSocketMessageBrokerConfigurer</code>를 통해 interceptor, taskExecutor를 설정할 수 있다.</li><li>clientOutboundChannel : WebSocket Client로 Server의 메시지를 내보내며, <code>WebSocketMessageBrokerConfigurer</code>를 통해 interceptor, taskExecutor를 설정할 수 있다.</li><li>brokerChannel : Server 내부에서 사용하는 channel이며, 이를 통해 <code>SimpAnnotationMetho</code>는 <code>SimpleBroker</code>의 존재를 직접 알지 못해도 메시지를 전달할 수 있다(결합도를 낮춤)</li></ul></li></ul><h1 id="2대-이상의-서버를-사용한다면"><a href="#2대-이상의-서버를-사용한다면" class="headerlink" title="2대 이상의 서버를 사용한다면?"></a>2대 이상의 서버를 사용한다면?</h1><p>WebSocket을 사용해서 채팅 서버를 구현하고, 여러 서버를 사용한다면 당연히 아래와 같은 구조가 나올 것이다.</p><img  src=http://www.plantuml.com/plantuml/svg/AqXCpavCJrLGAaujAaijCbHIgEPIK8ZsJIqk1Wfx9EQbv015Oq5YJaNvsM1sBLS1gYuZhBgCa7GPWNIXQpF6giqOIPinM5jqSavcQbw9Owo2hguTfjiKh1GCzHI2NVrSk33bG1fW3WSgDD9JWF3UJ9-Wy7hbb3VTSzuiRr1uiw3bTVSQBeHAP8i2IrDBKq6QZVKKa8KmZ7ZJjX3PYD82a25mjuFruxCIMRqJJlMeZj95-Cy8fCL4Jm7Yjhap55utRNapQoL8uzkU7Yw4Abs4DSuWFQQudOMgsWMdQfoECYRAKSOerhWIS1IgQZSSgW40><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>WebSocket에 대해서 알아보고, Spring에서 WebSocket을 어떻게 지원하는지 알아보았다. WebSocket 기술은 Web에서 Socket 통신을 하는 것처럼 동작하며, Spring에서는 이를 STOMP를 사용하여 고수준의 프로그래밍을 가능하게 했다. 간단한 소개가 목적이었기 때문에 Security, Load Balancing, Firewall 등의 주제는 다루지 않았다. 이러한 기술이 있음을 기억하고, 필요할 때 더 깊이 있게 파고들면 좋을 것 같다.</p><p>WebSocket을 사용하고자 하는 서비스가 Web과 iOS, Android 환경을 모두 지원해야 하는 경우가 있을 수 있다. 이럴 때에는 Web 환경에서는 SockJS를 사용하여 <code>/ws-sockjs</code>로 endpoint를 열어두고, mobile 환경에는 <code>/ws</code>로 endpoint를 열어서 endpoint를 분리해서 운용할 수 있을 것이다. Android나 iOS 둘 다 STOMP를 지원하는 Library가 있는 것은 확인했다. 다만 필자가 해당 분야의 개발자가 아니기에 얼마나 사용성이 있는지는 확인하지 않았다. 가능하다면 STOMP로 동일한 sub-protocol을 운용할 수 있다면 운영하는 데에 큰 도움이 될 것 같다.</p><p>WebSocket의 사용 여부를 결정하는 것은 사실상 하나로 귀결되는 것 같다. Connection을 유지할 필요가 있는지를 따져보는 것이다.</p><ul><li>장점 : Handshake(TCP 상의 통신 준비)를 할 필요가 없으며, 덕분에 지연이 낮다.<ul><li>적은 지연, 높은 빈도, 대량의 정보 통신에 유리</li></ul></li><li>단점 : Connection이 유지되는 동안 항상 통신을 하는 것은 아니다(Connection 낭비)</li></ul><p>Server에서 Client로 메시지를 보낼 수 있다는 것은 하나의 기능에 불과하다. 가장 중요하게 염두에 둬야 할 사항은 Connection 유지의 필요성이라 생각한다.</p><p>2011년에 작성된 <a href="http://d2.naver.com/helloworld/1336" target="_blank" rel="noopener">네이버 Hello Wold의 글</a>에서는 WebSocket이 한창 발전하고 있다고 시사하였다. 이제는 미래 기술로서 발전 가능성이 아니라, 요구 사항이 충족된다면 실 서비스에서 도입할만한 기술이라고 생각한다.</p><p>소스 코드 : <a href="https://github.com/supawer0728/simple-websocket" target="_blank" rel="noopener">https://github.com/supawer0728/simple-websocket</a></p>]]></content>
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> websocket </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Event + Async + AOP 적용해보기</title>
      <link href="/2018/03/24/spring-event/"/>
      <content type="html"><![CDATA[<h1 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h1><p>원래 글을 쓰기 위해 준비하던 내용은 Event를 강조하는 것이었는데, 준비를 하다 보니 Async와 AOP를 다 쓰게 되어버렸다.</p><p>이번 글에서는 하나의 transaction 안에서 많은 일을 처리하는 소스 코드를 두고, 아래와 같이 점진적으로 리팩토링해나가는 과정에 대해 이야기하려고 한다. </p><ol><li>하나의 transaction으로 처리하기</li><li>transaction 내에 처리하지 않아도 될 부분은, transaction이 끝난 후에 처리하기</li><li>Event 사용하기</li><li>Event도 비동기로 처리하기</li><li>AOP를 사용해서 Advisor에서 Event 발급하기</li><li>순서가 필요 있나? Best Effort!</li></ol><a id="more"></a><p>본문에서는 <code>mybatis</code>를 사용하며, <code>@Service</code>에서 대부분의 로직을 처리하는 방식에 대해 다루고 있다. 도메인 주도 설계(Domain-Driven Design)으로 개발을 하는 경우에는 <code>Domain Event</code> 개념을 사용할 수 있다. 기회가 된다면 <code>DDD Start!(최범균 저)</code>라는 책을 읽어볼 것을 강력히 추천한다. 필자가 알고 있는 DDD의 지식이 대부분 저 책을 기반으로 하다 보니, 현재 알고 있는 내용으로 공개 블로그를 작성하기가 어렵다.<br><code>Spring Framework 5.0.4.RELEASE</code>가 나온 현재까지, 간편하게 <code>Domain Event</code>를 사용할 수 있는 방법은 없어 보인다. <code>ThreadLocal</code>이나 <code>Configurable</code>의 힘을 빌려 자체적으로 구현해야한다. <code>DDD Start!</code>를 보고 Spring에서 <code>Domain Event</code>를 사용할 것이라면, 작가님이 운영하는 <a href="http://javacan.tistory.com/entry/Handle-DomainEvent-with-Spring-ApplicationEventPublisher-EventListener-TransactionalEventListener" target="_blank" rel="noopener">블로그</a>도 참조하자.</p><p>여기서 <code>Domain Event</code>에 대해서 다루지는 않겠지만 힌트 정도는 얻어 갈 수 있다고 생각한다.</p><h1 id="요구-사항"><a href="#요구-사항" class="headerlink" title="요구 사항"></a>요구 사항</h1><ul><li>회원이 가입하면 이메일과 SMS로 가입 축하 메시지를 보낸다.</li><li>이메일과 SMS는 반드시 성공하지 않아도 괜찮다.</li></ul><h1 id="구현-1-하나의-transaction으로-처리하기"><a href="#구현-1-하나의-transaction으로-처리하기" class="headerlink" title="구현 1. 하나의 transaction으로 처리하기"></a>구현 1. 하나의 transaction으로 처리하기</h1><h2 id="의존성"><a href="#의존성" class="headerlink" title="의존성"></a>의존성</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span>(<span class="string">'org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2'</span>)</span><br><span class="line">    <span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-aop'</span>)</span><br><span class="line">    <span class="keyword">compile</span>(<span class="string">'org.projectlombok:lombok'</span>)</span><br><span class="line">    <span class="keyword">runtime</span>(<span class="string">'com.h2database:h2'</span>)</span><br><span class="line">    testCompile(<span class="string">'org.springframework.boot:spring-boot-starter-test'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="회원-관련"><a href="#회원-관련" class="headerlink" title="회원 관련"></a>회원 관련</h2><h3 id="모델"><a href="#모델" class="headerlink" title="모델"></a>모델</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String phoneNo;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Member <span class="title">create</span><span class="params">(@NonNull String name, @NonNull String email, @NonNull String phoneNo)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Member member = <span class="keyword">new</span> Member();</span><br><span class="line">        member.setName(name);</span><br><span class="line">        member.setEmail(email);</span><br><span class="line">        member.setPhoneNo(phoneNo);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> member;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MemberJoinService</span> </span>&#123;</span><br><span class="line">    <span class="function">Member <span class="title">join</span><span class="params">(Member member)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>설명</strong></p><p><code>MemberJoinService</code>의 구현체를 여럿 생성하여, Spring의 Profile 별로 구현체를 바꿔서 사용할 것이다.</p><h2 id="MainClass"><a href="#MainClass" class="headerlink" title="MainClass"></a>MainClass</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleEventApplication</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MemberJoinService memberJoinService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MemberMapper memberMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SimpleEventApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"&#123;&#125; is injected"</span>, memberJoinService.getClass().getCanonicalName());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Member member = Member.create(<span class="string">"test"</span>, <span class="string">"test@test.com"</span>, <span class="string">"012-3456-7890"</span>);</span><br><span class="line">            memberJoinService.join(member);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"&#123;&#125; was thrown"</span>, e.getClass().getCanonicalName());</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"member count : &#123;&#125;"</span>, memberMapper.count());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="핵심-로직"><a href="#핵심-로직" class="headerlink" title="핵심 로직"></a>핵심 로직</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Profile</span>(<span class="string">"simple"</span>)</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleMemberJoinService</span> <span class="keyword">implements</span> <span class="title">MemberJoinService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MemberMapper memberMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmailService emailService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SmsService smsService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Member <span class="title">join</span><span class="params">(Member member)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        memberMapper.insert(member);</span><br><span class="line">        emailService.sendEmail(member.getEmail(), EmailTemplateType.JOIN); <span class="comment">// log만 남김</span></span><br><span class="line">        smsService.sendSms(member.getPhoneNo(), SmsTemplateType.JOIN); <span class="comment">// log만 남김, `fail` profile에서는 RuntimeException을 던짐</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> member;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="성공-실패"><a href="#성공-실패" class="headerlink" title="성공, 실패"></a>성공, 실패</h3><p><strong>성공</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INFO  [main] c.p.s.s.service.email.EmailService       : send JOIN email to test@test.com</span><br><span class="line">INFO  [main] c.p.s.s.service.sms.SuccessSmsService    : send JOIN sms to 012-3456-7890</span><br><span class="line">INFO  [main] c.p.s.s.SimpleEventApplication           : member count : 1</span><br></pre></td></tr></table></figure><p><strong>실패</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INFO  [main] c.p.s.s.service.email.EmailService       : send JOIN email to test@test.com</span><br><span class="line">INFO  [main] c.p.s.s.service.sms.FailSmsService       : send JOIN sms to 012-3456-7890</span><br><span class="line">ERROR [main] c.p.s.s.SimpleEventApplication           : java.lang.RuntimeException was thrown</span><br><span class="line">INFO  [main] c.p.s.s.SimpleEventApplication           : member count : 0</span><br></pre></td></tr></table></figure><h3 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h3><p>Application을 실행시킬 때 <code>spring.profiles.active=simple</code>로 해야 정상 동작한다. 요구 사항을 단순하게 하나의 transaction에서 구현했다. 무척이나 간단하지만 <code>emailService</code>가 실패하거나, <code>smsService</code>가 실패하면 <code>memberMapper.insert()</code>도 <code>rollback</code>된다. 축하 메일을 못 받았으니 회원 가입이 취소된다? 있을 수 없는 일이다.</p><h1 id="구현-2-transaction-내에-처리하지-않아도-될-부분은-transaction이-끝난-후에-처리하기"><a href="#구현-2-transaction-내에-처리하지-않아도-될-부분은-transaction이-끝난-후에-처리하기" class="headerlink" title="구현 2. transaction 내에 처리하지 않아도 될 부분은, transaction이 끝난 후에 처리하기"></a>구현 2. transaction 내에 처리하지 않아도 될 부분은, transaction이 끝난 후에 처리하기</h1><p>두 가지 방법이 있을 것 같다. 하나는 <code>@Transactional</code>를 이용하는 것, 하나는 <code>TransactionSynchronizationAdapter</code>를 사용하는 것이다. </p><h2 id="Propagation-사용하기"><a href="#Propagation-사용하기" class="headerlink" title="Propagation 사용하기"></a>Propagation 사용하기</h2><p><code>Member</code>를 <code>insert</code>할 <code>Service</code>를 하나 더 두는 방식이다. 이 경우 <code>MemberJoinService</code>에서 <code>@Transactional</code> 선언을 지우거나, <code>MemberService.insert()</code>에서는 <code>REQUIRES_NEW</code>를 해서 <code>insert()</code>가 <code>rollback</code>되는 것을 막을 수 있다.</p><img  src=http://www.plantuml.com/plantuml/svg/Y_PDpKrABVBApymBJYqgoqnEZLNGrRLJY8Q8GyNqClEAKujAD3HZ5QmK3BcYSMbopKtCp87fAKxDIu7eCCAj8pYt65EzCG00><h2 id="TransactionSynchronizationAdapter-사용하기"><a href="#TransactionSynchronizationAdapter-사용하기" class="headerlink" title="TransactionSynchronizationAdapter 사용하기"></a>TransactionSynchronizationAdapter 사용하기</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Profile</span>(<span class="string">"advanced"</span>)</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdvancedMemberJoinService</span> <span class="keyword">implements</span> <span class="title">MemberJoinService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MemberMapper memberMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmailService emailService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SmsService smsService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Member <span class="title">join</span><span class="params">(Member member)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        memberMapper.insert(member);</span><br><span class="line">        TransactionSynchronizationManager.registerSynchronization(<span class="keyword">new</span> TransactionSynchronizationAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCommit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                emailService.sendEmail(member.getEmail(), EmailTemplateType.JOIN);</span><br><span class="line">                smsService.sendSms(member.getPhoneNo(), SmsTemplateType.JOIN);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> member;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="성공-실패-1"><a href="#성공-실패-1" class="headerlink" title="성공, 실패"></a>성공, 실패</h3><p><strong>성공</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INFO  [main] c.p.s.s.service.email.EmailService       : send JOIN email to test@test.com</span><br><span class="line">INFO  [main] c.p.s.s.service.sms.SuccessSmsService    : send JOIN sms to 012-3456-7890</span><br><span class="line">INFO  [main] c.p.s.s.SimpleEventApplication           : member count : 1</span><br></pre></td></tr></table></figure><p><strong>실패</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INFO  [main] c.p.s.s.service.email.EmailService       : send JOIN email to test@test.com</span><br><span class="line">INFO  [main] c.p.s.s.service.sms.FailSmsService       : send JOIN sms to 012-3456-7890</span><br><span class="line">ERROR [main] c.p.s.s.SimpleEventApplication           : java.lang.RuntimeException was thrown</span><br><span class="line">INFO  [main] c.p.s.s.SimpleEventApplication           : member count : 1</span><br></pre></td></tr></table></figure><p><code>TransactionSynchronizationAdaptor</code>를 사용하면 위와 같이, <code>beforeCommit()</code>, <code>afterCommit()</code> 등을 구현해서 특정 로직의 실행 시점을 조절할 수 있다. <code>TransactionSynchronizationAdaptor</code>는 이름 그대로 <code>TransactionSynchronization</code>를 어댑터 패턴으로 구현해 둔 추상 클래스이다. <code>TransactionSynchronization</code>에는 각 로직이 실행될 시점이 추상화되어 있으며, 자세한 설명은 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/support/TransactionSynchronization.html" target="_blank" rel="noopener">JavaDoc</a>을 확인하자.</p><p><code>Spring Framework 4.2.x</code>부터는 더 좋은 게 있으므로 길게 설명하지 않겠다.</p><h1 id="구현-3-Event-사용하기"><a href="#구현-3-Event-사용하기" class="headerlink" title="구현 3. Event 사용하기"></a>구현 3. Event 사용하기</h1><p>이 구현부터 본격적으로 본문의 주제에 가까워진다. 우선 소스 코드로 어떻게 Spring Event를 이용할 수 있는지 확인해보자.</p><h2 id="Spring-Application-Event-사용하기"><a href="#Spring-Application-Event-사용하기" class="headerlink" title="Spring Application Event 사용하기"></a>Spring Application Event 사용하기</h2><h3 id="Publisher"><a href="#Publisher" class="headerlink" title="Publisher"></a>Publisher</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Profile</span>(<span class="string">"event"</span>)</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventMemberJoinService</span> <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span>, <span class="title">MemberJoinService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MemberMapper memberMapper;</span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher eventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Member <span class="title">join</span><span class="params">(Member member)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        memberMapper.insert(member);</span><br><span class="line">        eventPublisher.publishEvent(<span class="keyword">new</span> MemberJoinedEvent(member)); <span class="comment">// gray zone</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> member;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationEventPublisher</span><span class="params">(ApplicationEventPublisher applicationEventPublisher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.eventPublisher = applicationEventPublisher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberJoinedEvent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Getter</span></span><br><span class="line">        <span class="keyword">private</span> Member member;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">MemberJoinedEvent</span><span class="params">(@NonNull Member member)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.member = member;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="설명-1"><a href="#설명-1" class="headerlink" title="설명"></a>설명</h4><p><code>ApplicationEventPublisherAware</code> 인터페이스를 구현하면, Spring이 자동으로 <code>ApplicationEventPublisher</code>를 주입해준다. Event를 발급하는 방법은 너무나 간단하다. <code>ApplicationEventPublisher.publishEvent(Object event)</code>를 호출하면 끝이다.</p><p><code>MemberService</code>는 이제 회원이 가입되었으면, 가입되었다는 Event를 발급한다.(<code>MemberJoinedEvent</code>) 어디선가 이 Event를 받아서 처리만 해주면 될 것이다. 이 Event를 어떻게 받아서 처리하는지 확인해보자.</p><blockquote><p><code>// gray zone</code>이라고 붙인 곳은, 저 코드가 저 위치에 있는 것을 허용할 것이냐, 말 것이냐를 개발자들의 판단에 맡기고 싶어서 두었다. 본문에서는 refactoring의 대상이라 판단하고, 나중에 AOP로 제거할 것이다.</p></blockquote><h3 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberJoinedEventListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SmsService smsService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmailService emailService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TransactionalEventListener</span>(phase = TransactionPhase.AFTER_COMMIT, classes = EventMemberJoinService.MemberJoinedEvent<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">handle</span>(<span class="title">EventMemberJoinService</span>.<span class="title">MemberJoinedEvent</span> <span class="title">event</span>) </span>&#123;</span><br><span class="line">        Member member = event.getMember();</span><br><span class="line">        emailService.sendEmail(member.getEmail(), EmailTemplateType.JOIN);</span><br><span class="line">        smsService.sendSms(member.getPhoneNo(), SmsTemplateType.JOIN);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="설명-2"><a href="#설명-2" class="headerlink" title="설명"></a>설명</h4><p><code>@TransactionalEventListener</code>는 <code>4.2</code> 버전부터 사용할 수 있다. 간단하게 위에서 사용한 것과 같이, <code>phase</code>에는 실행 시점을, <code>classes</code>에는 Event의 타입을 넣어 발급된 Event를 처리할 수 있다.</p><p><strong>TransactionalEventListener</strong></p><p>| parameter <th colspan="3">description |<br>| - | - | - | - |<br>| phase <td colspan="3"> transaction과 연관지어, 어느 시점에서 로직을 실행할지 정할 수 있다.<br>- BEFORE_COMMIT<br>- AFTER_COMMIT(default)<br>- AFTER_ROLLBACK<br>- AFTER_COMPLETION |<br>| fallbackExecution <td colspan="3"> 진행 중인 transaction이 없을 때에도 실행할지 여부. 기본값은 <code>false</code> |<br>| value, classes <td colspan="3"> Listener가 처리할 Event의 타입을 배열로 받는다.<br>한 종류의 타입만 지정되었을 때에는 메서드의 파라미터로 받을 수 있지만,<br>여러 타입이 선언된 경우에는 메서드의 파라미터는 비워둬야 한다. |<br>| condition <td colspan="3"> SpEL을 선언하여 true인 경우에 실행된다. |</p><h4 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h4><p><strong>성공</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INFO  [main] c.p.s.s.service.email.EmailService       : send JOIN email to test@test.com</span><br><span class="line">INFO  [main] c.p.s.s.service.sms.SuccessSmsService    : send JOIN sms to 012-3456-7890</span><br><span class="line">INFO  [main] c.p.s.s.SimpleEventApplication           : member count : 1</span><br></pre></td></tr></table></figure><p><strong>실패</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INFO  [main] c.p.s.s.service.email.EmailService       : send JOIN email to test@test.com</span><br><span class="line">INFO  [main] c.p.s.s.service.sms.FailSmsService       : send JOIN sms to 012-3456-7890</span><br><span class="line">ERROR [main] o.s.t.s.TransactionSynchronizationUtils  : TransactionSynchronization.afterCompletion threw exception</span><br><span class="line">...</span><br><span class="line">INFO  [main] c.p.s.s.SimpleEventApplication           : member count : 1</span><br></pre></td></tr></table></figure><h2 id="ApplicationEvnetPublisher에-대해서"><a href="#ApplicationEvnetPublisher에-대해서" class="headerlink" title="ApplicationEvnetPublisher에 대해서"></a>ApplicationEvnetPublisher에 대해서</h2><p>Spring에서 지원하는 <code>ApplicationEvnetPublisher</code>를 이용한 Event 처리 방식은 <code>ApplicationContext</code>를 통해서 이루어진다. <code>ApplicationContext</code>가 <code>ApplicationEventPublisher</code>를 상속하고 있다. 즉 <code>Publisher</code>와 <code>Listener</code>는 Spring에 Bean으로 등록되어야 한다. Spring이 초기화될 때 <code>@EventListener</code>, <code>@TransactionalEventListener</code>를 <code>ApplicationContext</code>에 등록을 해두고 <code>publishEvent()</code>가 실행되면 등록된 Listener에 Event를 뿌려준다.</p><h2 id="Event에-대해서"><a href="#Event에-대해서" class="headerlink" title="Event에 대해서"></a>Event에 대해서</h2><p>앞서 작성했던 <code>EventMemberJoinService</code>를 다시 한 번 살펴보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Profile</span>(<span class="string">"event"</span>)</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventMemberJoinService</span> <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span>, <span class="title">MemberJoinService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Member <span class="title">join</span><span class="params">(Member member)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        memberMapper.insert(member);</span><br><span class="line">        eventPublisher.publishEvent(<span class="keyword">new</span> MemberJoinedEvent(member)); <span class="comment">// gray zone</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> member;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이전까지의 소스와의 차이가 있다. 바로 <code>EmailService</code>와 <code>SmsService</code>가 없어진 것이다! 느슨한 결합으로 인한 OOP의 장점을 그대로 누릴 수 있다.</p><h3 id="결합도"><a href="#결합도" class="headerlink" title="결합도"></a>결합도</h3><p>현재는 하나의 Application에서만 Event를 사용하고 있어서 크게 와닿지 않을 수도 있을 것 같다. 좀 더 설명하기 쉽고, 거창해 보일 수 있도록 크기를 키워보자. 만약에 MSA와 같은 구조의 시스템에서 Event를 사용한다면 어떻게 될까?</p><h4 id="시스템-간-강결합-HTTP-Rest-API-호출"><a href="#시스템-간-강결합-HTTP-Rest-API-호출" class="headerlink" title="시스템 간 강결합 : HTTP Rest API 호출"></a>시스템 간 강결합 : HTTP Rest API 호출</h4><img  src=http://www.plantuml.com/plantuml/svg/Y_PDpKrABGfEBIfBBOfLqDMrKuZsJSpCWGbOARoUlF7rmhaA2G7-mI4A-YML1QdwNlwUVleb-VebgSKb3Y12Bpa_Du4h6ejPmRd5H1bbO6YaQsnYQgPhRc5fa000><p>강결합 상태의 시스템의 문제를 여기서 확인할 수 있다.<br><code>MemberServer</code>는 각 Server를 알고 있다. 호출해야 할 URI를 스스로 가지고 있다. 만약 <code>MailServer</code>에서 메일을 보내기 위한 URI가 변경이 된다면, <code>MemberServer</code>도 수정을 해야 한다. 메일 서버가 변경이 되었는데, 회원 가입 로직이 변경되어야 한다.</p><h4 id="느슨한-결합으로-Event-방식"><a href="#느슨한-결합으로-Event-방식" class="headerlink" title="느슨한 결합으로 : Event 방식"></a>느슨한 결합으로 : Event 방식</h4><img  src=http://www.plantuml.com/plantuml/svg/Y_PDpKrABGfEBIfBBOfLqDMrKuXsBKlDAmaiJIrDZLMmKe0eyChFp4jD0SjmeIW0w_1DpCo16M6by7f3mvjfMzuitlDguuRNJJDGrTlewcAgd_rcQikh3GtOr8FD3yuj9iLuDEKefWC0><p>앞선 구조와 비교해보자. <code>MemberServer</code>는 회원이 가입했을 때 <code>MemberJoinedEvent</code>를 생성해서 <code>EventQueue</code>에 넣기만 하면 끝이다. 뒤에 무슨 일이 일어나든 <code>관심사</code> 밖의 일이다. <code>MailServer</code>가 <code>EventQueue</code>에서 Event를 받아 가서 처리하든, <code>EventQueue</code>가 <code>MailServer</code>에 Event를 밀어주는 방식으로 처리하든 관심 없는 거다.</p><ul><li>MailServer, SmsServer의 로직 변화가 MemberServer에 영향을 주지 않는다.</li><li>MemberServer는 자신의 업무(도메인) 영역만 잘 처리하면 된다.</li></ul><h1 id="구현-4-Event도-비동기로-처리하기"><a href="#구현-4-Event도-비동기로-처리하기" class="headerlink" title="구현 4. Event도 비동기로 처리하기"></a>구현 4. Event도 비동기로 처리하기</h1><h2 id="Spring-Application-설정"><a href="#Spring-Application-설정" class="headerlink" title="Spring Application 설정"></a>Spring Application 설정</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//..</span></span><br><span class="line"><span class="meta">@EnableAsync</span>(proxyTargetClass = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleEventApplication</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MemberJoinEvnetListener"><a href="#MemberJoinEvnetListener" class="headerlink" title="MemberJoinEvnetListener"></a>MemberJoinEvnetListener</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberJoinedEventListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SmsService smsService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmailService emailService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@TransactionalEventListener</span>(phase = TransactionPhase.AFTER_COMMIT, classes = EventMemberJoinService.MemberJoinedEvent<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">handle</span>(<span class="title">EventMemberJoinService</span>.<span class="title">MemberJoinedEvent</span> <span class="title">event</span>) </span>&#123;</span><br><span class="line">        Member member = event.getMember();</span><br><span class="line">        emailService.sendEmail(member.getEmail(), EmailTemplateType.JOIN);</span><br><span class="line">        smsService.sendSms(member.getPhoneNo(), SmsTemplateType.JOIN);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Async</code>를 사용하여 비동기로 구현할 수 있다.</p><h2 id="결과-1"><a href="#결과-1" class="headerlink" title="결과"></a>결과</h2><p><strong>성공</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INFO  [cTaskExecutor-1] c.p.s.s.service.email.EmailService       : send JOIN email to test@test.com</span><br><span class="line">INFO  [cTaskExecutor-1] c.p.s.s.service.sms.SuccessSmsService    : send JOIN sms to 012-3456-7890</span><br><span class="line">INFO  [           main] c.p.s.s.SimpleEventApplication           : member count : 1</span><br></pre></td></tr></table></figure><p><strong>실패</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INFO  [cTaskExecutor-1] c.p.s.s.service.email.EmailService       : send JOIN email to test@test.com</span><br><span class="line">INFO  [cTaskExecutor-1] c.p.s.s.service.sms.FailSmsService       : send JOIN sms to 012-3456-7890</span><br><span class="line">INFO  [           main] c.p.s.s.SimpleEventApplication           : member count : 1</span><br><span class="line">ERROR [cTaskExecutor-1] .a.i.SimpleAsyncUncaughtExceptionHandler : Unexpected error occurred invoking async method &#39;public void com.parfait.study.simpleevent.service.event.AsyncMemberJoinedEventListener.handle(com.parfait.study.simpleevent.service.member.AsyncEventMemberJoinService$AsyncMemberJoinedEvent)&#39;.</span><br></pre></td></tr></table></figure><h2 id="설명-3"><a href="#설명-3" class="headerlink" title="설명"></a>설명</h2><p>간단하게 spring에서 지원해주는 비동기를 사용할 수 있다. spring에서 어떻게 비동기를 지원해주는지는 본 문서에서는 설명하지 않겠다. 때문에 <code>TaskExecutor</code>도 따로 지정하지 않고 사용했다. spring에서 비동기를 사용하는 방법이 궁금하면 <a href="https://docs.spring.io/spring/docs/5.0.4.RELEASE/spring-framework-reference/integration.html#scheduling" target="_blank" rel="noopener">레퍼런스</a>를 읽어보자.</p><h1 id="구현-5-AOP를-사용해서-Advisor에서-Event-발급하기"><a href="#구현-5-AOP를-사용해서-Advisor에서-Event-발급하기" class="headerlink" title="구현 5. AOP를 사용해서 Advisor에서 Event 발급하기"></a>구현 5. AOP를 사용해서 Advisor에서 Event 발급하기</h1><p>앞서 Event를 발급하였을 때 <code>// gray zone</code>의 주석을 달았다. 왜 <code>gray zone</code>이라고 했을까? <code>MemberJoinedEvent</code>를 <code>MemberJoinedService</code>에서 발급하는 것이 맞을까? 개발자 취향에 따라 나뉠 수 있을 것 같다. 만약 <code>DDD</code>를 기반으로 작성한 코드였다면 100% <code>NO!</code>라고 할 수 있다. 하지만 지금의 예제는 <code>Service</code>에서 대부분의 로직을 처리한다. 때문에 누군가는 <code>Service</code>에서 Event를 발급해도 된다고 할 것이고, 누군가는 Service는 핵심 로직에만 집중했으면 좋겠다고 할 것이다.<br>여기서는 후자를 지지해서 AOP로 <code>gray zone</code>의 코드를 제거해보려고 한다. Event를 발급하는 행위를 하나의 공통된 방식에 따라 처리할 수 있는 관심사로 취급하겠다.</p><blockquote><p>서비스에서 Event를 발급하겠다는 전자의 선택도 존중한다. AOP는 공통 관심사를 분리해서 더 나은 POJO를 만들 수 있게 해준다. 하지만 익숙하지 않은 개발자에게는, 전체 애플리케이션 동작을 파악하는 데에 애를 먹을 수 있다. 혼자 개발하는 개발자가 아니라면, 내가 속한 팀에서 어떠한 방법의 프로그래밍이 가장 큰 효율을 낼 수 있는지 파악해봐야 할 것이다.</p></blockquote><h2 id="의존성-설정"><a href="#의존성-설정" class="headerlink" title="의존성 설정"></a>의존성 설정</h2><p>spring의 AOP를 사용할 것이니 관련된 의존성을 추가하자</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">  <span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-aop'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-Application-설정-1"><a href="#Spring-Application-설정-1" class="headerlink" title="Spring Application 설정"></a>Spring Application 설정</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//..</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span>(proxyTargetClass = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleEventApplication</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MemberJoinService"><a href="#MemberJoinService" class="headerlink" title="MemberJoinService"></a>MemberJoinService</h2><p>최종적으로 아래 코드가 동작하도록 만들 것이다. 기존에 <code>eventPublisher.publishEvent(new MemberJoinedEvent(member));</code>가 없어졌다. 즉 <code>MemberJoinService</code>는 더 이상 <code>ApplicationEventPublisher</code>에 의존하지 않으며, 그 존재를 모르게 되었다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Profile</span>(<span class="string">"aop-async-event"</span>)</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopAsyncEventMemberJoinService</span> <span class="keyword">implements</span> <span class="title">MemberJoinService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MemberMapper memberMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PublishEvent</span>(eventType = AopAsyncMemberJoinedEvent<span class="class">.<span class="keyword">class</span>, <span class="title">params</span> </span>= <span class="string">"#&#123;T(com.parfait.study.simpleevent.model.SendableParameter).create(email, phoneNo)&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Member <span class="title">join</span><span class="params">(Member member)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        memberMapper.insert(member);</span><br><span class="line">        <span class="keyword">return</span> member;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AOP는 <code>@PublishEvent</code>를 대상으로 실행된다. <code>eventType</code>을 보고 어떤 타입의 Event를 발급할 것이며, <code>params</code>를 해석해서 알맞은 생성자 파라미터를 던져준다.</p><h2 id="발행할-Event-정의"><a href="#발행할-Event-정의" class="headerlink" title="발행할 Event 정의"></a>발행할 Event 정의</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 해당 소스의 구현체는 목적에 따라 기본 생성자 혹은 하나의 값을 받는 생성자를 가질 것.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EventHoldingValue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">getValue</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AopAsyncMemberJoinedEvent</span> <span class="keyword">implements</span> <span class="title">EventHoldingValue</span>&lt;<span class="title">SendableParameter</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> SendableParameter value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AopAsyncMemberJoinedEvent</span><span class="params">(@NonNull SendableParameter sendableParameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = sendableParameter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendableParameter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String phoneNo;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SendableParameter <span class="title">create</span><span class="params">(String email, String phoneNo)</span> </span>&#123;</span><br><span class="line">        SendableParameter parameter = <span class="keyword">new</span> SendableParameter();</span><br><span class="line">        parameter.setEmail(email);</span><br><span class="line">        parameter.setPhoneNo(phoneNo);</span><br><span class="line">        <span class="keyword">return</span> parameter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>value</code>를 가지는 Event를 뜻하는 <code>EventHoldingValue&lt;T&gt;</code>를 정의하고 이를 구현한 <code>AopAsyncMemberJoinedEvent</code>를 위와 같이 정의했다. <code>SendableParameter</code>는 앞서 봤던 <code>@PublishEvent(params)</code>에서 정의된 SpEL이 실행되어 생성된다.</p><h2 id="AOP관련-코드"><a href="#AOP관련-코드" class="headerlink" title="AOP관련 코드"></a>AOP관련 코드</h2><h3 id="PublishEvent"><a href="#PublishEvent" class="headerlink" title="@PublishEvent"></a>@PublishEvent</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PublishEvent &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * return이 비어있는 경우 new eventType()</span></span><br><span class="line"><span class="comment">    * params가 비어있는 경우 new eventType(returnValue)</span></span><br><span class="line"><span class="comment">    * params가 문자열인 경우 new event</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Class&lt;? extends EventHoldingValue&gt; eventType();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 빈값, 문자열, SpEL('#&#123;표현식&#125;')을 사용할 수 있음</span></span><br><span class="line">    <span class="function">String <span class="title">params</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Pointcut을 제공할 애노테이션을 정의한다.</p><h3 id="Advisor"><a href="#Advisor" class="headerlink" title="Advisor"></a>Advisor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PublishEventAspect</span> <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(publishEvent)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointcut</span><span class="params">(PublishEvent publishEvent)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * return값 없으면 new eventType()</span></span><br><span class="line"><span class="comment">    * params값 없으면 new eventType(retVal)</span></span><br><span class="line"><span class="comment">    * params값이 문자열이면 new eventType(params)</span></span><br><span class="line"><span class="comment">    * params값이 SpEL이면 parse 후에 evnetType(params)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@AfterReturning</span>(pointcut = <span class="string">"pointcut(publishEvent)"</span>, returning = <span class="string">"retVal"</span>, argNames = <span class="string">"publishEvent,retVal"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(PublishEvent publishEvent, Object retVal)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Object event;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (retVal == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// method 반환 값이 void일 때에는 new eventType(this);</span></span><br><span class="line">            event = publishEvent.eventType()</span><br><span class="line">                                .getDeclaredConstructor()</span><br><span class="line">                                .newInstance();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (StringUtils.isEmpty(publishEvent.params())) &#123;</span><br><span class="line">            <span class="comment">// params가 비어 있는 경우 new eventType(retVal);</span></span><br><span class="line">            event = publishEvent.eventType()</span><br><span class="line">                                .getConstructor(retVal.getClass())</span><br><span class="line">                                .newInstance(retVal);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isSpel(publishEvent.params())) &#123;</span><br><span class="line">            <span class="comment">// params가 spel인 경우 new eventType(parsed(publishEvent.params()))</span></span><br><span class="line">            String spel = publishEvent.params().replaceAll(spelRegex, <span class="string">"$1"</span>);</span><br><span class="line">            Object constructArg = expressionParser.parseExpression(spel).getValue(retVal);</span><br><span class="line">            event = publishEvent.eventType()</span><br><span class="line">                                .getDeclaredConstructor(constructArg.getClass())</span><br><span class="line">                                .newInstance(constructArg);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// params가 그냥 string인 경우 new eventType(publishEvent.params());</span></span><br><span class="line">            event = publishEvent.eventType().getConstructor(String<span class="class">.<span class="keyword">class</span>).<span class="title">newInstance</span>(<span class="title">publishEvent</span>.<span class="title">params</span>())</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        eventPublisher.publishEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSpel</span><span class="params">(String params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> spelPattern.matcher(params).matches();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationEventPublisher</span><span class="params">(ApplicationEventPublisher applicationEventPublisher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.eventPublisher = applicationEventPublisher;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="실행-결과"><a href="#실행-결과" class="headerlink" title="실행 결과"></a>실행 결과</h2><p><strong>성공</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INFO  [cTaskExecutor-1] c.p.s.s.service.email.EmailService       : send JOIN email to test@test.com</span><br><span class="line">INFO  [cTaskExecutor-1] c.p.s.s.service.sms.SuccessSmsService    : send JOIN sms to 012-3456-7890</span><br><span class="line">INFO  [           main] c.p.s.s.SimpleEventApplication           : member count : 1</span><br></pre></td></tr></table></figure><p><strong>실패</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INFO  [cTaskExecutor-1] c.p.s.s.service.email.EmailService       : send JOIN email to test@test.com</span><br><span class="line">INFO  [cTaskExecutor-1] c.p.s.s.service.sms.FailSmsService       : send JOIN sms to 012-3456-7890</span><br><span class="line">INFO  [           main] c.p.s.s.SimpleEventApplication           : member count : 1</span><br><span class="line">ERROR [cTaskExecutor-1] .a.i.SimpleAsyncUncaughtExceptionHandler : Unexpected error occurred invoking async method &#39;public void com.parfait.study.simpleevent.service.event.AopAsyncMemberJoinedEventListener.handle(com.parfait.study.simpleevent.service.member.AopAsyncEventMemberJoinService$AopAsyncMemberJoinedEvent)&#39;.</span><br></pre></td></tr></table></figure><h2 id="설명-4"><a href="#설명-4" class="headerlink" title="설명"></a>설명</h2><p>Event를 발급하는 공통된 행위를 애노테이션과 AOP를 사용해서 구현해보았다. 이로써 <code>Service</code> 계층의 로직에서는 특별한 일이 아니면 Event를 발급할 소스가 등장하지 않을 것이고, <code>ApplicationEventPublisher</code>와의 의존 관계도 끊을 수 있다. </p><p>여기서 한 번 더 리팩토링하려고 한다. 아직도 문제점이 있다. 바로 이벤트 처리에 <code>순서</code>가 존재한다는 점이다.</p><h1 id="구현-6-순서가-필요있나-Best-Effort"><a href="#구현-6-순서가-필요있나-Best-Effort" class="headerlink" title="구현 6. 순서가 필요있나? Best Effort!"></a>구현 6. 순서가 필요있나? Best Effort!</h1><p>비동기를 처리하는 데 굳이 순서가 필요할까? 여태까지의 코드를 보면 <code>Email</code>이 성공해야 <code>Sms</code>가 성공한다. 실제로 우리의 로직은 이러한 순서를 필요로 하지 않는다. <code>MemberJoinedEvent</code>를 발급했을 때, 이를 처리할 핸들러를 여럿 등록하고 각각의 thread를 격리해보자.</p><h3 id="설명-5"><a href="#설명-5" class="headerlink" title="설명"></a>설명</h3><p><code>MemberJoinService</code>의 구현체에서 달라진 부분은 없다</p><h2 id="EventListeners"><a href="#EventListeners" class="headerlink" title="EventListeners"></a>EventListeners</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailEventListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmailService emailService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@TransactionalEventListener</span>(phase = TransactionPhase.AFTER_COMMIT, classes = DistributedAopAsyncMemberJoinedEvent<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">handleMemberJoinedEvent</span>(<span class="title">DistributedAopAsyncMemberJoinedEvent</span> <span class="title">event</span>) </span>&#123;</span><br><span class="line">        SendableParameter parameter = event.getValue();</span><br><span class="line">        emailService.sendEmail(parameter.getEmail(), parameter.getEmailTemplateType());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsEventListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SmsService smsEventService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@TransactionalEventListener</span>(phase = TransactionPhase.AFTER_COMMIT, classes = DistributedAopAsyncMemberJoinedEvent<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">sendEmail</span>(<span class="title">DistributedAopAsyncMemberJoinedEvent</span> <span class="title">event</span>) </span>&#123;</span><br><span class="line">        SendableParameter request = event.getValue();</span><br><span class="line">        smsEventService.sendSms(request.getPhoneNo(), request.getSmsTemplateType());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="결과-2"><a href="#결과-2" class="headerlink" title="결과"></a>결과</h2><p><strong>성공</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INFO  [cTaskExecutor-2] c.p.s.s.service.sms.SuccessSmsService    : send JOIN sms to 012-3456-7890</span><br><span class="line">INFO  [cTaskExecutor-1] c.p.s.s.service.email.EmailService       : send JOIN email to test@test.com</span><br><span class="line">INFO  [           main] c.p.s.s.SimpleEventApplication           : member count : 1</span><br></pre></td></tr></table></figure><p><strong>실패</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INFO  [cTaskExecutor-1] c.p.s.s.service.email.EmailService       : send JOIN email to test@test.com</span><br><span class="line">INFO  [cTaskExecutor-2] c.p.s.s.service.sms.FailSmsService       : send JOIN sms to 012-3456-7890</span><br><span class="line">INFO  [           main] c.p.s.s.SimpleEventApplication           : member count : 1</span><br><span class="line">ERROR [cTaskExecutor-2] .a.i.SimpleAsyncUncaughtExceptionHandler : Unexpected error occurred invoking async method &#39;public void com.parfait.study.simpleevent.service.sms.SmsEventService.sendEmail(com.parfait.study.simpleevent.service.member.DistributedAopAsyncEventMemberJoinService$DistributedAopAsyncMemberJoinedEvent)&#39;.</span><br></pre></td></tr></table></figure><h2 id="설명-6"><a href="#설명-6" class="headerlink" title="설명"></a>설명</h2><p>Email과 Sms를 다른 thread에서 보내고 있는 것을 확인할 수 있다.<br>말만 어렵게 했지 내용은 간단하다. Event에 대한 <code>Listener(subscriber, 혹은 handler)</code>는 필요하면 언제든지 추가하면 된다. 또한 <code>@Async</code> 지원도 가능하다.</p><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>Spring에서 지원하는 Event 처리 방법과 실제로 어떻게 사용할 수 있을지 살펴보았다. 가장 중요한 것은 Event를 사용하는 이유를 깨닫는 것이다. 가장 큰 이유는 Event 방식은 <code>시스템 간의 결합도를 낮춰주는 것</code>이다. 결합도를 낮춰서 서비스 로직에 집중하고, 장애 전파에 강한 애플리케이션을 작성할 수 있다. 비동기로 실행하는 것도 Spring의 지원을 받아 간단하게 처리할 수 있다. </p><p>물론 이러한 Event 방식도 문제는 있다. Global Transaction을 어떻게 쥐고 갈 것인지 하는 것이다. 본문에서는 하나의 Application 내에서 Event를 발생시키고 처리했는데, Event-Driven Architecture의 MSA 환경을 구성하는 경우, 어떻게 Transaction과 Latency 사이에서 타협점을 찾을 것인가는, 현재 이 업계의 큰 이슈 중 하나가 아닐까? 아직까지는 Event를 사용하면서 완벽한 Transaction을 지원하는 것은 어려워 보인다. 서비스 간의 결합도를 떨어뜨리기 위해, Event를 위한 별도의 모듈(RabbitMQ, Kafka)을 사용하는 중에 데이터 손실 등 넘어야 할 난관도 많이 있다. 하지만 Event를 사용하는 구조 자체는 매우 매력적이며, 개발자에게 더 많은 선택지를 가져다준다.</p><p>Spring은 개발자로 하여금 POJO를 작성하여 OOP를 할 수 있도록 유도한다. Spring Event 또한 개발자가 OOP를 더 잘할 수 있도록 도와주는 장치다. 더 유연한 구조로 나아가는 방법 중의 하나로 충분히 써먹을 수 있을 것이라 믿어 의심치 않는다.</p><p>소스 코드 : <a href="https://github.com/supawer0728/simple-event" target="_blank" rel="noopener">https://github.com/supawer0728/simple-event</a></p>]]></content>
      
      <categories>
          
          <category> spring </category>
          
          <category> practice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> event </tag>
            
            <tag> practice </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>(Spring)다중 DataSource 처리</title>
      <link href="/2018/03/22/spring-multi-transaction/"/>
      <content type="html"><![CDATA[<h1 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h1><p>Spring Application을 만들면서 여러 <code>DataSource</code>와 <code>transaction</code>이 존재하고 하나의 transaction 내에 commit과 rollback이 잘 동작하도록 하려면 어떻게 설정해야 할까? 실제로 구현을 해본 적은 없지만 세 가지 방법이 머릿속에 떠올랐다.</p><ul><li><code>@Transactional</code>의 propagation을 이용</li><li><code>spring-data-commons</code>의 <code>ChainedTransactionManager</code> 이용</li><li><code>JtaTransactionManager</code> 이용</li></ul><p>이 방법들이 실제로 써먹을 수 있을지 확인해보려고 한다.</p><a id="more"></a><h1 id="구현-1-Transactional의-propagation-이용"><a href="#구현-1-Transactional의-propagation-이용" class="headerlink" title="구현 1 - @Transactional의 propagation 이용"></a>구현 1 - @Transactional의 propagation 이용</h1><h2 id="Transactional-propagation에-대한-간단한-설명"><a href="#Transactional-propagation에-대한-간단한-설명" class="headerlink" title="Transactional.propagation에 대한 간단한 설명"></a>Transactional.propagation에 대한 간단한 설명</h2><p>Spring의 <code>@Transactional</code>의 <code>propagation</code> 속성으로 다음과 같은 설정을 할 수 있다. 자세한 설명을 해둔 <a href="http://springsource.tistory.com/136" target="_blank" rel="noopener">블로그(Rednics Blog)</a>가 있어 링크를 남긴다. <a href="https://docs.spring.io/spring/docs/4.2.x/spring-framework-reference/html/transaction.html#tx-propagation" target="_blank" rel="noopener">spring reference</a>도 참조하자</p><ul><li>REQUIRED : 기본 설정, 진행중인 transaction이 있으면 참여, 없으면 새로 생성</li><li>SUPPORTS : 진행중인 transaction이 있으면 참여, 없으면 transaction 없이 실행</li><li>MANDATORY : 진행중인 transaction이 있으면 참여, 없으면 예외.</li><li>REQUIRES_NEW : 새로운 transaction 시작. 진행중인 transaction은 보류.</li><li>NOT_SUPPORTED : 진행중인 transaction이 있으면 보류, transaction 없이 실행.</li><li>NEVER : transaction없이 실행. 진행중인 transaction이 있으면 예외.</li><li>NESTED : 중첩 transaction 실행. 자식 tx은 부모 tx에게 영향을 주지 않지만, 부모는 자식에게 영향을 줌.</li></ul><h2 id="요구-사항"><a href="#요구-사항" class="headerlink" title="요구 사항"></a>요구 사항</h2><img  src=http://www.plantuml.com/plantuml/svg/Yov9BIvnpiyhAShFoKajYbNGrRLJYBR9JSrDIYqAgR2BoSl9JyzC3aujAijCJerLi5B8JIt9o4zHUDEzvEsqJYuyIZ5CWZ2HZ3BKKyZCAqujAl45on0sB2a_iIW5B0jc8Hbb13FA2IIXyMP6nvkPErvlcFEcUQwY9W00><p>하고자 하는 일을 다이어그램으로 나타내면 위와 같다.<br>주로 사용하는 DataSource와 transaction이 존재하고, 거기에 부가 transaction이 참여하는 모양새다. 2번에서 예외가 발생했을 때, 2번도 rollback이 되고 1번도 같이 rollback이 되었으면 좋겠다. </p><p>memberTx와 boardTx가 <code>REQUIRED</code>, <code>REQUIRES_NEW</code>, <code>NESTED</code>의 propagation을 가질 수 있을 때, 총 9가지 경우의 수가 나온다. 어떤 조합에서 <code>commit</code>과 <code>rollback</code>이 어떻게 실행될지 직접 구현해보겠다.</p><p>다음 단락부터 이를 구현한 예제가 나올텐데, 좀 지루한 내용이라 결과만 알고 싶다면 바로 결론으로 가자.</p><h2 id="의존성"><a href="#의존성" class="headerlink" title="의존성"></a>의존성</h2><p>본문에서는 <code>spring-boot</code>, <code>mysql(docker 사용)</code>, <code>mybatis</code>를 사용한다.<br><code>spring-boot</code>의 버전은 <code>2.0.0.RELEASE</code>다.</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-web'</span>)</span><br><span class="line">    <span class="keyword">compile</span>(<span class="string">'org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2'</span>)</span><br><span class="line">    compileOnly(<span class="string">'org.projectlombok:lombok'</span>)</span><br><span class="line">    <span class="keyword">runtime</span>(<span class="string">'mysql:mysql-connector-java'</span>)</span><br><span class="line">    testCompile(<span class="string">'org.springframework.boot:spring-boot-starter-test'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringApplication-설정"><a href="#SpringApplication-설정" class="headerlink" title="SpringApplication 설정"></a>SpringApplication 설정</h2><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">hikari1:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">multitxtest</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">multitxtest</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:11306/multi_tx_test</span></span><br><span class="line">    <span class="attr">hikari2:</span></span><br><span class="line">      <span class="attr">url:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">multitxtest</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">multitxtest</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:11307/multi_tx_test</span></span><br></pre></td></tr></table></figure><h3 id="두-개의-SqlSession-생성"><a href="#두-개의-SqlSession-생성" class="headerlink" title="두 개의 SqlSession 생성"></a>두 개의 SqlSession 생성</h3><h4 id="Board용-SqlSession"><a href="#Board용-SqlSession" class="headerlink" title="Board용 SqlSession"></a>Board용 SqlSession</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// board</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(Hikari2Properties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">BoardSqlSessionConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">boardDataSource</span><span class="params">(Hikari2Properties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceCreator.createHikariDataSource(properties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">boardTxManager</span><span class="params">(DataSource boardDataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(boardDataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">boardSqlSessionFactory</span><span class="params">(DataSource boardDataSource)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean factoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        factoryBean.setDataSource(boardDataSource);</span><br><span class="line">        <span class="keyword">return</span> factoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(destroyMethod = <span class="string">"clearCache"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSession <span class="title">boardSqlSession</span><span class="params">(SqlSessionFactory boardSqlSessionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(boardSqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MapperFactoryBean&lt;BoardMapper&gt; <span class="title">boardMapper</span><span class="params">(SqlSessionFactory boardSqlSessionFactory)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        MapperFactoryBean&lt;BoardMapper&gt; factoryBean = <span class="keyword">new</span> MapperFactoryBean&lt;&gt;(BoardMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        factoryBean.setSqlSessionFactory(boardSqlSessionFactory);</span><br><span class="line">        <span class="keyword">return</span> factoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Member용-SqlSession"><a href="#Member용-SqlSession" class="headerlink" title="Member용 SqlSession"></a>Member용 SqlSession</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// member</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(Hikari1Properties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MemberSqlSessionConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">memberDataSource</span><span class="params">(Hikari1Properties properties)</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">memberTxManager</span><span class="params">(DataSource memberDataSource)</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">memberSqlSessionFactory</span><span class="params">(DataSource memberDataSource)</span> <span class="keyword">throws</span> Exception </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(destroyMethod = <span class="string">"clearCache"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSession <span class="title">memberSqlSession</span><span class="params">(SqlSessionFactory memberSqlSessionFactory)</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MapperFactoryBean&lt;MemberMapper&gt; <span class="title">memberMapper</span><span class="params">(SqlSessionFactory memberSqlSessionFactory)</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DataSourceCreator"><a href="#DataSourceCreator" class="headerlink" title="DataSourceCreator"></a>DataSourceCreator</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@UtilityClass</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceCreator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createHikariDataSource</span><span class="params">(DataSourceProperties properties)</span> </span>&#123;</span><br><span class="line">        HikariDataSource dataSource = <span class="keyword">new</span> HikariDataSource();</span><br><span class="line">        dataSource.setJdbcUrl(properties.getUrl());</span><br><span class="line">        dataSource.setUsername(properties.getUsername());</span><br><span class="line">        dataSource.setPassword(properties.getPassword());</span><br><span class="line">        dataSource.setDriverClassName(properties.getDriverClassName());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h2><h3 id="BoardMapper"><a href="#BoardMapper" class="headerlink" title="BoardMapper"></a>BoardMapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BoardMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"INSERT INTO board(title, content) VALUES(#&#123;title&#125;, #&#123;content&#125;)"</span>)</span><br><span class="line">    <span class="meta">@SelectKey</span>(statement = <span class="string">"SELECT LAST_INSERT_ID()"</span>, keyColumn = <span class="string">"id"</span>, keyProperty = <span class="string">"id"</span>, before = <span class="keyword">false</span>, resultType = Long<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">int</span> <span class="title">insert</span>(<span class="title">Board</span> <span class="title">board</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"TRUNCATE TABLE board"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">truncate</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MemberMapper"><a href="#MemberMapper" class="headerlink" title="MemberMapper"></a>MemberMapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MemberMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"INSERT INTO member(name, age) VALUES(#&#123;name&#125;, #&#123;age&#125;)"</span>)</span><br><span class="line">    <span class="meta">@SelectKey</span>(statement = <span class="string">"SELECT LAST_INSERT_ID()"</span>, keyColumn = <span class="string">"id"</span>, keyProperty = <span class="string">"id"</span>, before = <span class="keyword">false</span>, resultType = Long<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">int</span> <span class="title">insert</span>(<span class="title">Member</span> <span class="title">member</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"TRUNCATE TABLE member"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">truncate</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><h3 id="MemberService"><a href="#MemberService" class="headerlink" title="MemberService"></a>MemberService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span>(transactionManager = <span class="string">"memberTxManager"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MemberMapper memberMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveWithRequired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        memberMapper.insert(Member.createForTest(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(transactionManager = <span class="string">"memberTxManager"</span>, propagation = Propagation.REQUIRES_NEW)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveWithRequiresNew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        memberMapper.insert(Member.createForTest(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(transactionManager = <span class="string">"memberTxManager"</span>, propagation = Propagation.NESTED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveWithNested</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        memberMapper.insert(Member.createForTest(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BoardService"><a href="#BoardService" class="headerlink" title="BoardService"></a>BoardService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span>(<span class="string">"boardTxManager"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoardService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BoardMapper boardMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">saveWithRequired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        boardMapper.insert(Board.createForTest(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"this method throw exception"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(transactionManager = <span class="string">"boardTxManager"</span>, propagation = Propagation.REQUIRES_NEW)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">saveWithRequiresNew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        boardMapper.insert(Board.createForTest(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"this method throw exception"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(transactionManager = <span class="string">"boardTxManager"</span>, propagation = Propagation.NESTED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">saveWithNested</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        boardMapper.insert(Board.createForTest(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"this method throw exception"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LogicService"><a href="#LogicService" class="headerlink" title="LogicService"></a>LogicService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogicService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MemberService memberService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BoardService boardService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">required_required</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        memberService.saveWithRequired();</span><br><span class="line">        boardService.saveWithRequired();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">required_requiresNew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        memberService.saveWithRequired();</span><br><span class="line">        boardService.saveWithRequiresNew();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">required_nested</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        memberService.saveWithRequired();</span><br><span class="line">        boardService.saveWithNested();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requiresNew_required</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        memberService.saveWithRequiresNew();</span><br><span class="line">        boardService.saveWithRequired();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requiresNew_requiresNew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        memberService.saveWithRequiresNew();</span><br><span class="line">        boardService.saveWithRequiresNew();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requiresNew_nested</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        memberService.saveWithRequiresNew();</span><br><span class="line">        boardService.saveWithNested();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nested_required</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        memberService.saveWithNested();</span><br><span class="line">        boardService.saveWithRequired();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nested_requiresNew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        memberService.saveWithNested();</span><br><span class="line">        boardService.saveWithRequiresNew();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nested_nested</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        memberService.saveWithNested();</span><br><span class="line">        boardService.saveWithNested();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><h3 id="LogicService에-Transactional이-없는-경우"><a href="#LogicService에-Transactional이-없는-경우" class="headerlink" title="LogicService에 @Transactional이 없는 경우"></a>LogicService에 @Transactional이 없는 경우</h3><table><thead><tr><th>member propagation</th><th>board propagation</th><th>member insert</th><th>board insert</th></tr></thead><tbody><tr><td>required</td><td>required</td><td>commit</td><td>rollback</td></tr><tr><td>required</td><td>requires-new</td><td>commit</td><td>rollback</td></tr><tr><td>required</td><td>nested</td><td>commit</td><td>rollback</td></tr><tr><td>requires-new</td><td>required</td><td>commit</td><td>rollback</td></tr><tr><td>requires-new</td><td>requires-new</td><td>commit</td><td>rollback</td></tr><tr><td>requires-new</td><td>nested</td><td>commit</td><td>rollback</td></tr><tr><td>nested</td><td>required</td><td>commit</td><td>rollback</td></tr><tr><td>nested</td><td>requires-new</td><td>commit</td><td>rollback</td></tr><tr><td>nested</td><td>nested</td><td>commit</td><td>rollback</td></tr></tbody></table><h4 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h4><p>logicalService에서는 transaction이 시작되지 않는다. 따라서 memberService와 boardService는 각각 별개의 transaction에서 독립적으로 실행된다. 예외가 발생한 boardService의 내용만 rollback된다.</p><h3 id="LogicService에-Transactional이-있는-경우-memberTxManager"><a href="#LogicService에-Transactional이-있는-경우-memberTxManager" class="headerlink" title="LogicService에 @Transactional이 있는 경우(memberTxManager)"></a>LogicService에 @Transactional이 있는 경우(memberTxManager)</h3><table><thead><tr><th>member propagation</th><th>board propagation</th><th>member insert</th><th>board insert</th></tr></thead><tbody><tr><td>required</td><td>required</td><td>rollback</td><td>rollback</td></tr><tr><td>required</td><td>requires-new</td><td>rollback</td><td>rollback</td></tr><tr><td>required</td><td>nested</td><td>rollback</td><td>rollback</td></tr><tr><td>requires-new</td><td>required</td><td>commit</td><td>rollback</td></tr><tr><td>requires-new</td><td>requires-new</td><td>commit</td><td>rollback</td></tr><tr><td>requires-new</td><td>nested</td><td>commit</td><td>rollback</td></tr><tr><td>nested</td><td>required</td><td>rollback</td><td>rollback</td></tr><tr><td>nested</td><td>requires-new</td><td>rollback</td><td>rollback</td></tr><tr><td>nested</td><td>nested</td><td>rollback</td><td>rollback</td></tr></tbody></table><h4 id="설명-1"><a href="#설명-1" class="headerlink" title="설명"></a>설명</h4><ul><li><code>memberService</code>가 <code>REQUIRED</code>인 경우에는, <code>logicService</code>의 transaction의 영향을 받아서 rollback된다. </li><li><code>REQUIRES_NEW</code>인 경우에는 새로운 transaction을 생성하기 때문에 자신의 method execution이 종료됨과 함께 commit을 해버린다.</li><li><code>NESTED</code>의 경우, 부모 transaction의 영향을 받기 때문에 memberService의 내용은 rollback된다.</li></ul><p><strong>주의</strong></p><p>여기까지 테스트를 해보면, 정상적으로 동작하는 것처럼 보인다. 속지말자.</p><h3 id="LogicService에-Transactional이-있는-경우-boardTxManager"><a href="#LogicService에-Transactional이-있는-경우-boardTxManager" class="headerlink" title="LogicService에 @Transactional이 있는 경우(boardTxManager)"></a>LogicService에 @Transactional이 있는 경우(boardTxManager)</h3><table><thead><tr><th>member propagation</th><th>board propagation</th><th>member insert</th><th>board insert</th></tr></thead><tbody><tr><td>required</td><td>required</td><td>commit</td><td>rollback</td></tr><tr><td>required</td><td>requires-new</td><td>commit</td><td>rollback</td></tr><tr><td>required</td><td>nested</td><td>commit</td><td>rollback</td></tr><tr><td>requires-new</td><td>required</td><td>commit</td><td>rollback</td></tr><tr><td>requires-new</td><td>requires-new</td><td>commit</td><td>rollback</td></tr><tr><td>requires-new</td><td>nested</td><td>commit</td><td>rollback</td></tr><tr><td>nested</td><td>required</td><td>commit</td><td>rollback</td></tr><tr><td>nested</td><td>requires-new</td><td>commit</td><td>rollback</td></tr><tr><td>nested</td><td>nested</td><td>commit</td><td>rollback</td></tr></tbody></table><h4 id="설명-2"><a href="#설명-2" class="headerlink" title="설명"></a>설명</h4><p>확인하고 싶었던 부분 1이다. 서로 다른 transactionManager에서 관리하는 transaction context에 참여할 수 있을까? 결과를 확인해보니 불가능했다.</p><h3 id="전체-Transactional에서-boardTxManager를-쓰는-경우"><a href="#전체-Transactional에서-boardTxManager를-쓰는-경우" class="headerlink" title="전체 @Transactional에서 boardTxManager를 쓰는 경우"></a>전체 @Transactional에서 boardTxManager를 쓰는 경우</h3><table><thead><tr><th>member propagation</th><th>board propagation</th><th>member insert</th><th>board insert</th></tr></thead><tbody><tr><td>required</td><td>required</td><td>commit</td><td>rollback</td></tr><tr><td>required</td><td>requires-new</td><td>commit</td><td>rollback</td></tr><tr><td>required</td><td>nested</td><td>commit</td><td>rollback</td></tr><tr><td>requires-new</td><td>required</td><td>commit</td><td>rollback</td></tr><tr><td>requires-new</td><td>requires-new</td><td>commit</td><td>rollback</td></tr><tr><td>requires-new</td><td>nested</td><td>commit</td><td>rollback</td></tr><tr><td>nested</td><td>required</td><td>commit</td><td>rollback</td></tr><tr><td>nested</td><td>requires-new</td><td>commit</td><td>rollback</td></tr><tr><td>nested</td><td>nested</td><td>commit</td><td>rollback</td></tr></tbody></table><h4 id="설명-3"><a href="#설명-3" class="headerlink" title="설명"></a>설명</h4><p>확인하고 싶었던 부분 2다. <code>boardTxManager</code>가 <code>memberDataSource</code>에 대한 작업을 rollback할 수 있을까? 불가능하다.</p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>별다른 장치 없이 <code>DataSource</code> 두 개, <code>TransactionManager</code> 두 개를 사용하면 100% 위험하다. 원하는 동작을 장담할 수 없다. 이 방법은 얼른 벗어나야 한다. 이러한 설정을 사용하면서 어디에서 버그가 나고 있는지 찾지 않길 바란다.</p><h1 id="구현-2-ChainedTransactionManager-사용"><a href="#구현-2-ChainedTransactionManager-사용" class="headerlink" title="구현 2 - ChainedTransactionManager 사용"></a>구현 2 - ChainedTransactionManager 사용</h1><p>구현 2에서는 <code>spring-data-commons</code>에서 제공해주는 <code>ChainedTransactionManager</code>를 사용하려고 한다. javadoc을 읽어보면 다음과 같이 설명하고 있다.</p><blockquote><p>PlatformTransactionManager 구현체로 transaction 생성, commit, rollback을 위임자 패턴으로 구성한다. 이 구현체를 사용하는 것의 전제되는 가정은, transaction의 rollback을 야기하는 오류는 대부분 transaction이 완료되기 전, 혹은 가장 안쪽의 PlatformTransactionManager에서 발생한다는 것이다.</p><p>이 구현체의 인스턴스는 지정된 순서대로 transaction을 시작하고, 역순으로 commit/rollback한다. 즉, transaction을 중단시킬 가능성이 가장 큰 PlatformTransactionManager가 마지막에 설정되어야 한다. commit 중에 예외를 던지는 PlatformTransactionManager는 자동으로 다른 transaction manager의 rollback을 일으킨다.</p><footer><strong>ChainedTransactionManager</strong><cite><a href="https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/transaction/ChainedTransactionManager.html" target="_blank" rel="noopener">javadoc</a></cite></footer></blockquote><br>javadoc의 설명대로라면 원하는 구현을 할 수 있다. 하지만 한가지 유의할 점이 있다. 소스를 까보면 `for`문을 돌면서 `.getTransaction()`을 호출하는 데, 이는 성능 문제를 야기할 수 있다. 알 사람은 다 아는 `LazyConnectionDataSourceProxy`를 사용할 차례다. spring은 기본적으로 `transaction`을 미리 가져오는데, 저 `DataSource`의 구현체는 필요한 때에 `transaction`을 가져오도록 connection 호출 시점을 뒤로 미룰 수 있다. 따로 `LazyConnectionDataSourceProxy`를 상세히 설명하기 보다는, 이 구현체를 알게된 [블로그](http://kwon37xi.egloos.com/m/5364167)를 소개하겠다. <h2 id="의존성-추가"><a href="#의존성-추가" class="headerlink" title="의존성 추가"></a>의존성 추가</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span>(<span class="string">'org.springframework.data:spring-data-commons'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-Application-설정"><a href="#Spring-Application-설정" class="headerlink" title="Spring Application 설정"></a>Spring Application 설정</h2><h3 id="DataSouceCreator"><a href="#DataSouceCreator" class="headerlink" title="DataSouceCreator"></a>DataSouceCreator</h3><p><code>LazyConnectionDataSourceProxy</code>를 반환하도록 변경한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@UtilityClass</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceCreator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createHikariDataSource</span><span class="params">(DataSourceProperties properties)</span> </span>&#123;</span><br><span class="line">        HikariDataSource dataSource = <span class="keyword">new</span> HikariDataSource();</span><br><span class="line">        dataSource.setJdbcUrl(properties.getUrl());</span><br><span class="line">        dataSource.setUsername(properties.getUsername());</span><br><span class="line">        dataSource.setPassword(properties.getPassword());</span><br><span class="line">        dataSource.setDriverClassName(properties.getDriverClassName());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LazyConnectionDataSourceProxy(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ChainedTxConfig"><a href="#ChainedTxConfig" class="headerlink" title="ChainedTxConfig"></a>ChainedTxConfig</h3><p><code>ChainedTransactionManager</code>를 primary로 등록하자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainedTxConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManager</span><span class="params">(PlatformTransactionManager memberTxManager, PlatformTransactionManager boardTxManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ChainedTransactionManager(memberTxManager, boardTxManager);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LogicService-MemberService-BoardService-수정"><a href="#LogicService-MemberService-BoardService-수정" class="headerlink" title="LogicService, MemberService, BoardService 수정"></a>LogicService, MemberService, BoardService 수정</h2><p><code>ChainedTransactionManager</code> bean을 primary로 등록했으니, <code>@Transactional</code>에서 지정했던 transactionManager 설정을 지우자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogicService</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberService</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoardService</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><h2 id="결과-1"><a href="#결과-1" class="headerlink" title="결과"></a>결과</h2><table><thead><tr><th>member propagation</th><th>board propagation</th><th>member insert</th><th>board insert</th></tr></thead><tbody><tr><td>required</td><td>required</td><td>rollback</td><td>rollback</td></tr><tr><td>required</td><td>requires-new</td><td>rollback</td><td>rollback</td></tr><tr><td>required</td><td>nested</td><td>rollback</td><td>rollback</td></tr><tr><td>requires-new</td><td>required</td><td>commit</td><td>rollback</td></tr><tr><td>requires-new</td><td>requires-new</td><td>commit</td><td>rollback</td></tr><tr><td>requires-new</td><td>nested</td><td>commit</td><td>rollback</td></tr><tr><td>nested</td><td>required</td><td>rollback</td><td>rollback</td></tr><tr><td>nested</td><td>requires-new</td><td>rollback</td><td>rollback</td></tr><tr><td>nested</td><td>nested</td><td>rollback</td><td>rollback</td></tr><tr><td>not-supported</td><td>required</td><td>commit</td><td>rollback</td></tr><tr><td>not-supported</td><td>requires-new</td><td>commit</td><td>rollback</td></tr><tr><td>not-supported</td><td>nested</td><td>commit</td><td>rollback</td></tr><tr><td>not-supported</td><td>not-supported</td><td>commit</td><td>commit</td></tr></tbody></table><h4 id="설명-4"><a href="#설명-4" class="headerlink" title="설명"></a>설명</h4><p>일부러 <code>NOT_SUPPORTED</code>를 추가해봤다. 부모의 영향을 받는 부분(<code>REQUIRED</code>, <code>NESTED</code>)는 모두 rollback이 동작하고, 나머지는 모두 commit되었다. <code>ChainedTransactionManager</code>가 아주 잘 동작하고 있다.</p><h1 id="구현-3-JtaTransactionManager"><a href="#구현-3-JtaTransactionManager" class="headerlink" title="구현 3 - JtaTransactionManager"></a>구현 3 - JtaTransactionManager</h1><p>JTA(Java Transaction Api)는 자바 표준으로써, 분산 transaction을 가능하게 해준다. 매우 간단하게 설명하자면, JTA를 지원하는 자원을 가리키는 XA Resource 인터페이스의 구현체들을 등록하면, 해당 구현체들에 대해서 전역 transaction을 지원해준다. 때문에 어떤 자원이든 transaction을 지원할 수 있도록 정의한 셈인데, DataSource, JMS 외에는 쓰고 있는 곳이 없는 것 같다.<br>Java EE Application Server에서는 전역 tranction을 지원하기 위해서, JTA를 사용하기도 한다. Spring에서는 JNDI에서 Java EE Container가 사용 중인 DataSource를 가져와, JtaTransactionManager에 설정할 수도 있다.</p><p>JTA에 대해서 설명하는 것은 여기까지 하고, 직접 사용하면서 여러 DataSource를 대상으로 하는 transaction이 잘 동작하는지 확인해보자.</p><h2 id="의존성-추가-1"><a href="#의존성-추가-1" class="headerlink" title="의존성 추가"></a>의존성 추가</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-jta-atomikos'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-Application-설정-1"><a href="#Spring-Application-설정-1" class="headerlink" title="Spring Application 설정"></a>Spring Application 설정</h2><h3 id="application-yml-1"><a href="#application-yml-1" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jta:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">atomikos:</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">member:</span></span><br><span class="line">          <span class="attr">unique-resource-name:</span> <span class="string">memberDataSource</span></span><br><span class="line">          <span class="attr">xa-data-source-class-name:</span> <span class="string">com.mysql.jdbc.jdbc2.optional.MysqlXADataSource</span></span><br><span class="line">          <span class="attr">xa-properties:</span></span><br><span class="line">            <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">            <span class="attr">password:</span> <span class="string">multitxtest</span></span><br><span class="line">            <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:11306/multi_tx_test?useSSL=false</span></span><br><span class="line">        <span class="attr">board:</span></span><br><span class="line">          <span class="attr">unique-resource-name:</span> <span class="string">boardDataSource</span></span><br><span class="line">          <span class="attr">xa-data-source-class-name:</span> <span class="string">com.mysql.jdbc.jdbc2.optional.MysqlXADataSource</span></span><br><span class="line">          <span class="attr">xa-properties:</span></span><br><span class="line">            <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">            <span class="attr">password:</span> <span class="string">multitxtest</span></span><br><span class="line">            <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:11307/multi_tx_test?useSSL=false</span></span><br></pre></td></tr></table></figure><h3 id="BoardSqlSessionConfig"><a href="#BoardSqlSessionConfig" class="headerlink" title="BoardSqlSessionConfig"></a>BoardSqlSessionConfig</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoardSqlSessionConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.jta.atomikos.datasource.board"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">boardDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AtomikosDataSourceBean();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MemberSqlSessionConfig"><a href="#MemberSqlSessionConfig" class="headerlink" title="MemberSqlSessionConfig"></a>MemberSqlSessionConfig</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberSqlSessionConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.jta.atomikos.datasource.member"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">memberDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AtomikosDataSourceBean();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="결과-2"><a href="#결과-2" class="headerlink" title="결과"></a>결과</h2><table><thead><tr><th>member propagation</th><th>board propagation</th><th>member insert</th><th>board insert</th></tr></thead><tbody><tr><td>required</td><td>required</td><td>rollback</td><td>rollback</td></tr><tr><td>required</td><td>requires-new</td><td>rollback</td><td>rollback</td></tr><tr><td>required</td><td>nested</td><td>rollback</td><td>rollback</td></tr><tr><td>requires-new</td><td>required</td><td>commit</td><td>rollback</td></tr><tr><td>requires-new</td><td>requires-new</td><td>commit</td><td>rollback</td></tr><tr><td>requires-new</td><td>nested</td><td>commit</td><td>rollback</td></tr><tr><td>nested</td><td>required</td><td>rollback</td><td>rollback</td></tr><tr><td>nested</td><td>requires-new</td><td>rollback</td><td>rollback</td></tr><tr><td>nested</td><td>nested</td><td>rollback</td><td>rollback</td></tr><tr><td>not-supported</td><td>required</td><td>commit</td><td>rollback</td></tr><tr><td>not-supported</td><td>requires-new</td><td>commit</td><td>rollback</td></tr><tr><td>not-supported</td><td>nested</td><td>commit</td><td>rollback</td></tr><tr><td>not-supported</td><td>not-supported</td><td>commit</td><td>commit</td></tr></tbody></table><h3 id="설명-5"><a href="#설명-5" class="headerlink" title="설명"></a>설명</h3><p>잘 동작한다. 부모의 영향을 받는 전파 수준과 받지 않는 전파 수준에서 기대하는 동작이 잘 수행되고 있다.</p><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>여러 <code>DataSource</code>가 존재하는 상황에서 transaction 설정을 어떻게 가져가야 하는지에 대해 3가지 방법을 사용해서 살펴보았다. <code>ChainedTransactionManager</code>나 <code>JtaTransactionManager</code>를 사용해서, 전역 transaction을 지원하도록 설정하지 않는 한, 개발자가 원하는 동작을 하지 않음을 알 수 있었다.<br><code>ChainedTransactionManager</code>는 기본 개념이 쉽다. 내부 동작이 어떻게 돌고 있는지 간단하게 파악된다. 별다른 학습 비용 없이 쉽게 사용할 수 있다. 하지만 <code>JtaTransactionManager</code>의 경우에는 그에 비해 공부할 내용들이 꽤 있다. 결국은 둘 다 <code>PlatformTransactionManager</code>를 구현하고 있다. 개발자가 spring을 사용하는 한, 둘 다 유연하게 적용할 수 있다.<br>명심하자, DataSource를 두 개 이상 사용할 때에는 반드시 <code>ChainedTransactionManager</code>나 <code>JtaTransactionManager</code>로 전역 transaction 설정을 해야한다.</p><p>소스 코드 : <a href="https://github.com/supawer0728/simple-multi-tx" target="_blank" rel="noopener">https://github.com/supawer0728/simple-multi-tx</a></p>]]></content>
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring-data-rest 소개</title>
      <link href="/2018/03/20/spring-data-rest/"/>
      <content type="html"><![CDATA[<h1 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h1><p>Spring Data REST는 도메인 모델과 repository를 분석해서, <code>RESTful API</code>를 제공해준다.<br>본 문서에서는 Spring Data REST에 대한 간단한 예제와 함께 사용법에 관한 소개를 하고자 한다.</p><a id="more"></a><h1 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h1><p>뜬금없지만 <code>RESTful</code>에 관해 좀 더 이야기를 해두고자 한다.<br>아래 그림은 마틴 파울러 아저씨의 <a href="https://martinfowler.com/articles/richardsonMaturityModel.html" target="_blank" rel="noopener">Richardson Maturity Model</a>에 나오는 <code>REST의 영광</code>을 누리기 위한 단계를 표현하고 있다.</p><table><thead><tr><th align="center"><img src="/images/spring-data-rest/hateoas.png" alt="image1"></th></tr></thead><tbody><tr><td align="center"><em>출처: <a href="https://martinfowler.com/articles/images/richardsonMaturityModel/overview.png" target="_blank" rel="noopener">https://martinfowler.com/articles/images/richardsonMaturityModel/overview.png</a></em></td></tr></tbody></table><blockquote><p>한국어 풀이로 해둔 블로그가 있다(<a href="http://jinson.tistory.com/190" target="_blank" rel="noopener">http://jinson.tistory.com/190</a>)</p></blockquote><p>결국 <code>api가 RESTful하다</code>는 말을 듣기 위해서는 <code>level 3</code>를 충족시켜야 한다.<br><code>level 3</code>를 충족시키기 위해서 <code>HATEOAS(Hypertext As The Engine Of Application State)</code>개념을 도입해야 한다.<br><code>HATEOAS</code>가 어떤 것인지 상세히 설명하는 것은 본 문서에서 초점을 맞추는 부분이 아니기에, 여기서는 하지 않겠다.<br>정말 간단히 요약하자면 아래와 같다.</p><ul><li>Resource로 <code>무엇</code>을 할 수 있는지 알 수 있다.</li><li><code>무엇</code>을 <code>어떻게</code> 해야 하는 지 알려준다.</li></ul><p><code>HATEOAS</code>에 대해서 궁금하다면 상기한 블로그를 읽어보자</p><h1 id="간단한-예제"><a href="#간단한-예제" class="headerlink" title="간단한 예제"></a>간단한 예제</h1><p>백문이 불여일견이다.<br>우선 예제를 보며 어떻게 동작하는 것인지 알아보자.<br>여기서는 <code>spring-data-jpa</code>와 연동하여 사용한다.</p><h2 id="의존성"><a href="#의존성" class="headerlink" title="의존성"></a>의존성</h2><p><code>spring-boot</code> 버전은 <code>2.0.0.RELEASE</code>다.</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">  <span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-data-jpa'</span>)</span><br><span class="line">  <span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-data-rest'</span>)</span><br><span class="line">  compileOnly(<span class="string">'org.projectlombok:lombok'</span>)</span><br><span class="line">  runtimeOnly(<span class="string">'com.h2database:h2'</span>)</span><br><span class="line">  testCompile(<span class="string">'org.springframework.boot:spring-boot-starter-test'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Domain"><a href="#Domain" class="headerlink" title="Domain"></a>Domain</h2><p><strong>Member</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"member"</span>)</span><br><span class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PRIVATE)</span><br><span class="line"><span class="meta">@Getter</span>(AccessLevel.PUBLIC)</span><br><span class="line"><span class="meta">@Setter</span>(AccessLevel.PRIVATE)</span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Enumerated</span>(EnumType.STRING)</span><br><span class="line">    <span class="keyword">private</span> Grade grade;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Member</span><span class="params">(String name, Integer age, Grade grade)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Member <span class="title">join</span><span class="params">(@NonNull String name, @NonNull Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Member(name, age, Grade.BRONZE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Repository</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RepositoryRestResource</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MemberRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Member</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="application-설정"><a href="#application-설정" class="headerlink" title="application 설정"></a>application 설정</h2><p><strong>application.yml</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.data.rest.base-path:</span> <span class="string">/api</span></span><br></pre></td></tr></table></figure><p><strong>SimpleDataRestApplication.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleDataRestApplication</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MemberRepository memberRepository;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SimpleDataRestApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        memberRepository.save(Member.join(<span class="string">"member1"</span>, <span class="number">20</span>));</span><br><span class="line">        memberRepository.save(Member.join(<span class="string">"member2"</span>, <span class="number">21</span>));</span><br><span class="line">        memberRepository.save(Member.join(<span class="string">"member3"</span>, <span class="number">22</span>));</span><br><span class="line">        memberRepository.save(Member.join(<span class="string">"member4"</span>, <span class="number">23</span>));</span><br><span class="line">        memberRepository.save(Member.join(<span class="string">"member5"</span>, <span class="number">24</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="실행"><a href="#실행" class="headerlink" title="실행"></a>실행</h2><p>미리 데이터를 넣거나 했지만,<br>사실 <strong>Domain</strong>영역에서 <code>entity</code>과 <code>repository</code>만 정의했다.<br>바로 실행해서 테스트해 볼 수 있다.</p><p><strong><code>GET /api</code></strong></p><p><code>application.yml</code>에서 <code>spring-rest-data</code>의 root를 <code>/api</code>로 잡았다.<br>root uri의 자원을 호출하면 어떻 것이 나오는 지 확인하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">   &quot;_links&quot;:&#123;  </span><br><span class="line">      &quot;members&quot;:&#123;  </span><br><span class="line">         &quot;href&quot;:&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;api&#x2F;members&#123;?page,size,sort&#125;&quot;,</span><br><span class="line">         &quot;templated&quot;:true</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;profile&quot;:&#123;  </span><br><span class="line">         &quot;href&quot;:&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;api&#x2F;profile&quot;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>root 경로의 하위로 어떠한 자원들을 가지고 있는지 알려준다.<ul><li>members를 가지고 있다</li><li>members에 접근하려면 <code>/api/members</code>를 호출해야 한다고 알려준다(<code>HATEOAS</code>)</li></ul></li></ul><p><strong><code>GET /api/members</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_embedded&quot; : &#123;</span><br><span class="line">    &quot;members&quot; : [ &#123;</span><br><span class="line">      &quot;name&quot; : &quot;member1&quot;,</span><br><span class="line">      &quot;age&quot; : 20,</span><br><span class="line">      &quot;grade&quot; : &quot;BRONZE&quot;,</span><br><span class="line">      &quot;_links&quot; : &#123;</span><br><span class="line">        &quot;self&quot; : &#123;</span><br><span class="line">          &quot;href&quot; : &quot;http:&#x2F;&#x2F;localhost:8080&#x2F;api&#x2F;members&#x2F;1&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;member&quot; : &#123;</span><br><span class="line">          &quot;href&quot; : &quot;http:&#x2F;&#x2F;localhost:8080&#x2F;api&#x2F;members&#x2F;1&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_links&quot; : &#123;</span><br><span class="line">    &quot;self&quot; : &#123;</span><br><span class="line">      &quot;href&quot; : &quot;http:&#x2F;&#x2F;localhost:8080&#x2F;api&#x2F;members&#123;?page,size,sort&#125;&quot;,</span><br><span class="line">      &quot;templated&quot; : true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;profile&quot; : &#123;</span><br><span class="line">      &quot;href&quot; : &quot;http:&#x2F;&#x2F;localhost:8080&#x2F;api&#x2F;profile&#x2F;members&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;page&quot; : &#123;</span><br><span class="line">    &quot;size&quot; : 20,</span><br><span class="line">    &quot;totalElements&quot; : 5,</span><br><span class="line">    &quot;totalPages&quot; : 1,</span><br><span class="line">    &quot;number&quot; : 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>목록 호출을 해보면</p><ul><li>페이징 처리를 해주고 있다.<ul><li><code>MemberRepository</code>가 <code>PagingAndSortingRepository</code>를 구현하고 있기 때문이다.</li><li>현재 총 5개의 요소가 있는데, 만약 <code>page=1&amp;size=2</code>라는 query를 추가했다면 <code>_links</code>에 다음 주소가 추가된다<ul><li>first : <a href="http://localhost:8080/api/members?page=0&amp;size=2" target="_blank" rel="noopener">http://localhost:8080/api/members?page=0&amp;size=2</a></li><li>previous : <a href="http://localhost:8080/api/members?page=0&amp;size=2" target="_blank" rel="noopener">http://localhost:8080/api/members?page=0&amp;size=2</a></li><li>next : <a href="http://localhost:8080/api/members?page=2&amp;size=2" target="_blank" rel="noopener">http://localhost:8080/api/members?page=2&amp;size=2</a></li><li>last : <a href="http://localhost:8080/api/members?page=2&amp;size=2" target="_blank" rel="noopener">http://localhost:8080/api/members?page=2&amp;size=2</a></li></ul></li></ul></li><li>목록들을 보면 ID가 없다<ul><li><code>HATEOAS</code>를 써서 <code>자기 서술적(self-descriptive)</code>으로 동작한다.</li><li>때문에 상세를 조회하기 위해 client는 <code>location.href = &#39;/api/members/&#39; + members[0].id</code>가 아니라,<br><code>location.href = members[0]._link.self.href</code>를 넣어주면 된다.</li></ul></li></ul><p><strong><code>GET /api/members/1</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;member1&quot;,</span><br><span class="line">  &quot;age&quot; : 20,</span><br><span class="line">  &quot;grade&quot; : &quot;BRONZE&quot;,</span><br><span class="line">  &quot;_links&quot; : &#123;</span><br><span class="line">    &quot;self&quot; : &#123;</span><br><span class="line">      &quot;href&quot; : &quot;http:&#x2F;&#x2F;localhost:8080&#x2F;api&#x2F;members&#x2F;1&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;member&quot; : &#123;</span><br><span class="line">      &quot;href&quot; : &quot;http:&#x2F;&#x2F;localhost:8080&#x2F;api&#x2F;members&#x2F;1&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>POST /api/members</code></strong></p><p>생성 요청을 해보자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;Test Created&quot;,</span><br><span class="line">  &quot;age&quot; : 22,</span><br><span class="line">  &quot;grade&quot; : &quot;BRONZE&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>아래와 같이 <code>201 CREATED</code> 응답이 온다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;Test Created&quot;,</span><br><span class="line">  &quot;age&quot; : 22,</span><br><span class="line">  &quot;grade&quot; : &quot;BRONZE&quot;,</span><br><span class="line">  &quot;_links&quot; : &#123;</span><br><span class="line">    &quot;self&quot; : &#123;</span><br><span class="line">      &quot;href&quot; : &quot;http:&#x2F;&#x2F;localhost:8080&#x2F;api&#x2F;members&#x2F;6&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;member&quot; : &#123;</span><br><span class="line">      &quot;href&quot; : &quot;http:&#x2F;&#x2F;localhost:8080&#x2F;api&#x2F;members&#x2F;6&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>PATCH /api/members/6</code></strong></p><p>수정 요청을 해보자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;age&quot; : 30</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>아래와 같이 응답이 온다(200 OK)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;Test Created&quot;,</span><br><span class="line">  &quot;age&quot; : 30,</span><br><span class="line">  &quot;grade&quot; : &quot;BRONZE&quot;,</span><br><span class="line">  &quot;_links&quot; : &#123;</span><br><span class="line">    &quot;self&quot; : &#123;</span><br><span class="line">      &quot;href&quot; : &quot;http:&#x2F;&#x2F;localhost:8080&#x2F;api&#x2F;members&#x2F;6&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;member&quot; : &#123;</span><br><span class="line">      &quot;href&quot; : &quot;http:&#x2F;&#x2F;localhost:8080&#x2F;api&#x2F;members&#x2F;6&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PUT</code>이나 <code>DELETE</code>도 당연히 동작을 하기 때문에 굳이 설명하지 않겠다.</p><h1 id="기본-설정"><a href="#기본-설정" class="headerlink" title="기본 설정"></a>기본 설정</h1><p>앞서 예제를 통해 기본적인 동작을 살펴보았다.<br>이번에는 <code>spring-data-rest</code>가 어떠한 기본 설정으로 동작하는 지를 설명하겠다.<br><a href="https://docs.spring.io/spring-data/rest/docs/3.0.5.RELEASE/reference/html/#getting-started.basic-settings" target="_blank" rel="noopener">Spring Data REST Reference</a>에서 Java 설정의 예제가 있다.<br>여기서는 <code>spring-boot</code>에서 지원해주는 properties를 사용하여 설정하는 것을 예로 들겠다.</p><p><strong>Prefix는 <code>spring.data.rest.</code></strong></p><table><thead><tr><th>property</th><th>default</th><th>description</th></tr></thead><tbody><tr><td>base-path</td><td></td><td>repository resource를 노출할 기본 경로</td></tr><tr><td>default-media-type</td><td><code>application/hal+json;charset=UTF-8</code></td><td>개별 설정이 없을 때 사용할 <code>Content-Type</code></td></tr><tr><td>default-page-size</td><td></td><td>기본 페이지 사이즈</td></tr><tr><td>detection-strategy</td><td>default</td><td>api로 만들 repository를 찾는 전략<br>- <code>default</code> : 모든 public repository. <code>@RestResource</code>의 <code>exported</code>가 <code>false</code>인 경우 제외<br>- <code>all</code> : 가시성, annotation과 상관 없이 모든 repository 노출<br>- <code>annoation</code> : <code>exported</code>가 <code>true</code>이며 <code>@RepositoryRestResource</code>, <code>@RestResource</code>가 달린 자원들을 노출<br>- <code>visibility</code> : public interface만 노출</td></tr><tr><td>limit-param-name</td><td>size</td><td>한 번에 반환되는 결과 갯수를 받을 query string 이름<br><code>/api/members?size=10</code></td></tr><tr><td>max-page-size</td><td>20</td><td>페이지당 항목 수</td></tr><tr><td>page-param-name</td><td>page</td><td>페이지 번호를 받을 query string 이름<br><code>/api/members?page=2</code></td></tr><tr><td>return-body-on-create</td><td>true</td><td>요청에 의해 생성된 엔티티를 응답으로 내려줄 지 여부</td></tr><tr><td>return-body-on-update</td><td>true</td><td>요청에 의해 수정된 엔티티를 응답으로 내려줄 지 여부</td></tr><tr><td>sort-param-name</td><td>sort</td><td>정렬 요청을 받을 query string 이름<br><code>/api/members?sort=name,desc</code></td></tr></tbody></table><h1 id="지원하는-저장소"><a href="#지원하는-저장소" class="headerlink" title="지원하는 저장소"></a>지원하는 저장소</h1><ul><li>Spring Data JPA</li><li>Spring Data MongoDB</li><li>Spring Data Neo4j</li><li>Spring Data GemFire</li><li>Spring Data Cassandra</li></ul><h1 id="Search-API"><a href="#Search-API" class="headerlink" title="Search API"></a>Search API</h1><p>repository에 <a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.query-methods" target="_blank" rel="noopener">query method</a>를 추가해보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RepositoryRestResource</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MemberRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Member</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Member <span class="title">findByName</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>GET /api/members</code>*</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_embedded&quot; : &#123; ... &#125;,</span><br><span class="line">  &quot;_links&quot; : &#123;</span><br><span class="line">    &quot;self&quot; : &#123; ... &#125;,</span><br><span class="line">    &quot;profile&quot; : &#123; ... &#125;,</span><br><span class="line">    &quot;search&quot; : &#123;</span><br><span class="line">      &quot;href&quot; : &quot;http:&#x2F;&#x2F;localhost:8080&#x2F;api&#x2F;members&#x2F;search&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;page&quot; : &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>links에 search가 추가되었다.<br>search를 확인해보자.</p><p><strong><code>GET /api/members/search</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_links&quot; : &#123;</span><br><span class="line">    &quot;findByName&quot; : &#123;</span><br><span class="line">      &quot;href&quot; : &quot;http:&#x2F;&#x2F;localhost:8080&#x2F;api&#x2F;members&#x2F;search&#x2F;findByName&#123;?name&#125;&quot;,</span><br><span class="line">      &quot;templated&quot; : true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;self&quot; : &#123;</span><br><span class="line">      &quot;href&quot; : &quot;http:&#x2F;&#x2F;localhost:8080&#x2F;api&#x2F;members&#x2F;search&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>사용법에 대한 설명이 나온다</p><p>**<code>GET /api/members/search/findByName?name=member1</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;member1&quot;,</span><br><span class="line">  &quot;age&quot; : 20,</span><br><span class="line">  &quot;grade&quot; : &quot;BRONZE&quot;,</span><br><span class="line">  &quot;_links&quot; : &#123;</span><br><span class="line">    &quot;self&quot; : &#123;</span><br><span class="line">      &quot;href&quot; : &quot;http:&#x2F;&#x2F;localhost:8080&#x2F;api&#x2F;members&#x2F;1&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;member&quot; : &#123;</span><br><span class="line">      &quot;href&quot; : &quot;http:&#x2F;&#x2F;localhost:8080&#x2F;api&#x2F;members&#x2F;1&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Paging-처리"><a href="#Paging-처리" class="headerlink" title="Paging 처리"></a>Paging 처리</h2><p><code>query method</code>에 <code>Pageable</code>를 파라미터로 줘서, Paging처리를 시킬 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RepositoryRestResource</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MemberRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Member</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Page&lt;Member&gt; <span class="title">findByName</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name, Pageable pageable)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Projection"><a href="#Projection" class="headerlink" title="Projection"></a>Projection</h1><p>interface와 annotation의 조합으로 projection 할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RepositoryRestResource</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MemberRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Member</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Member <span class="title">findByName</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Projection</span>(name = <span class="string">"only-name"</span>, types = &#123;Member<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">interface</span> <span class="title">OnlyName</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>GET /api/members/1?projection=only-name</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;member1&quot;,</span><br><span class="line">  &quot;_links&quot; : &#123;</span><br><span class="line">    &quot;self&quot; : &#123;</span><br><span class="line">      &quot;href&quot; : &quot;http:&#x2F;&#x2F;localhost:8080&#x2F;api&#x2F;members&#x2F;1&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;member&quot; : &#123;</span><br><span class="line">      &quot;href&quot; : &quot;http:&#x2F;&#x2F;localhost:8080&#x2F;api&#x2F;members&#x2F;1&#123;?projection&#125;&quot;,</span><br><span class="line">      &quot;templated&quot; : true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>projection의 목록은 <code>/api/profile/members</code>에서 조회할 수 있다.</p><p><img src="/images/spring-data-rest/profile1.png" alt="profile1"></p><h2 id="JsonIgnore-값-보내기"><a href="#JsonIgnore-값-보내기" class="headerlink" title="JsonIgnore 값 보내기"></a>JsonIgnore 값 보내기</h2><p>회원의 연령 정보에 <code>@JsonIgnore</code>가 걸린 상황이라도,</p><p><strong>Member.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="meta">@JsonIgnore</span></span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br></pre></td></tr></table></figure><p><code>@Projection</code>을 사용하면 노출시킬 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Projection</span>(name = <span class="string">"how-old"</span>, types = &#123; Member<span class="class">.<span class="keyword">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">interface</span> <span class="title">HowOldProjection</span> </span>&#123;</span><br><span class="line">  <span class="function">Integer <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpEL"><a href="#SpEL" class="headerlink" title="SpEL"></a>SpEL</h2><p><code>@Projection</code> 내의 메서드에 <a href="https://docs.spring.io/spring/docs/5.0.4.RELEASE/spring-framework-reference/core.html#expressions" target="_blank" rel="noopener">SpEL</a>을 적용할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Projection</span>(name = <span class="string">"brief"</span>, types = &#123; Member<span class="class">.<span class="keyword">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">BriefProjection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"#&#123;target.name&#125; : #&#123;target.age&#125;"</span>) </span><br><span class="line">  <span class="function">String <span class="title">getBrief</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="엔티티-조합에서-Projection"><a href="#엔티티-조합에서-Projection" class="headerlink" title="엔티티 조합에서 Projection"></a>엔티티 조합에서 Projection</h2><p><code>Board</code> 엔티티가 <code>Member</code> 엔티티를 <code>writer</code>로서 가지고 있다고 가정하자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"board"</span>)</span><br><span class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED)</span><br><span class="line"><span class="meta">@Getter</span>(AccessLevel.PUBLIC)</span><br><span class="line"><span class="meta">@Setter</span>(AccessLevel.PRIVATE)</span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Board</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"writer_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Member writer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 경우 writer는 어떻게 참조될까?</p><p><strong><code>GET /api/boards/1</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;title&quot; : &quot;title1&quot;,</span><br><span class="line">  &quot;content&quot; : &quot;content1&quot;,</span><br><span class="line">  &quot;_links&quot; : &#123;</span><br><span class="line">    ... ,</span><br><span class="line">    &quot;writer&quot; : &#123;</span><br><span class="line">      &quot;href&quot; : &quot;http:&#x2F;&#x2F;localhost:8080&#x2F;api&#x2F;boards&#x2F;6&#x2F;writer&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>보다시피 <code>writer</code> 정보를 얻기 위해서 <code>/api/boards/6/writer</code>를 호출해야 한다.<br><code>writer</code>정보를 한 번에 얻을 수 있도록 <code>@Projection</code> 설정을 할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Projection</span>(name = <span class="string">"with-writer"</span>, types = &#123;Board<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">interface</span> <span class="title">WithWriterProjection</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getTitle</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getContent</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Member <span class="title">getWriter</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>GET /api/boards/6?projection=with-writer</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;content&quot; : &quot;content1&quot;,</span><br><span class="line">  &quot;title&quot; : &quot;title1&quot;,</span><br><span class="line">  &quot;writer&quot; : &#123;</span><br><span class="line">    &quot;name&quot; : &quot;member1&quot;,</span><br><span class="line">    &quot;age&quot; : 20,</span><br><span class="line">    &quot;grade&quot; : &quot;BRONZE&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_links&quot; : &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="엔티티-조합-Projection-상시-설정"><a href="#엔티티-조합-Projection-상시-설정" class="headerlink" title="엔티티 조합 Projection 상시 설정"></a>엔티티 조합 Projection 상시 설정</h3><p><code>@RepositoryRestResource</code>의 <code>excerptProjection</code>으로 상시 설정할 <code>Projection</code>을 걸어 둘 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RepositoryRestResource</span>(excerptProjection = WithWriterProjection<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">BoardRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Board</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Header와의-연계"><a href="#Header와의-연계" class="headerlink" title="Header와의 연계"></a>Header와의 연계</h1><h2 id="ETag-If-Match-If-None-Match"><a href="#ETag-If-Match-If-None-Match" class="headerlink" title="ETag, If-Match, If-None-Match"></a>ETag, If-Match, If-None-Match</h2><p><code>spring-data-commons</code>에는 <code>@Version</code>이라는 애노테이션이 있다.</p><blockquote><p>JPA에서는 이 Version으로 낙관적 락을 구현하기도 한다.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Version</span> Long version</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring Data REST에서는 위와 같이 <code>@Version</code> 주석이 달린 객체를 응답할 때, <code>ETag</code> 헤더를 추가한다.</p><p><strong><code>GET /api/members/1</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ETag: &quot;0&quot;</span><br><span class="line">Content-Type: application&#x2F;hal+json;charset&#x3D;UTF-8</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Date: Tue, 20 Mar 2018 05:50:15 GMT</span><br></pre></td></tr></table></figure><p><code>ETag</code> 헤더를 획득하였으니 이제 <code>If-Match</code>, <code>If-Non-Match</code> 등의 헤더를 추가해서 사용할 수 있다.</p><p><strong>If-Match</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v -X PATCH -H &#39;If-Match: &lt;value of previous ETag&gt;&#39; ...</span><br></pre></td></tr></table></figure><p><strong>If-None-Match</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v -H &#39;If-None-Match: &lt;value of previous etag&gt;&#39; ...</span><br></pre></td></tr></table></figure><h2 id="If-Modified-Since"><a href="#If-Modified-Since" class="headerlink" title="If-Modified-Since"></a>If-Modified-Since</h2><p><code>@LastModifiedDate</code> 애노테이션을 사용하여 <code>Last-Modified</code> 응답 헤더를 줄 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">  <span class="meta">@LastModified</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이를 이용해 <code>If-Modified-Since</code> 헤더를 추가해서 요청할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H &quot;If-Modified-Since: Wed, 24 Jun 2015 20:28:15 GMT&quot; ...</span><br></pre></td></tr></table></figure><p><strong><code>GET /api/members/1</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Last-Modified: Tue, 20 Mar 2018 05:57:01 GMT-4s</span><br><span class="line">Date: Tue, 20 Mar 2018 05:57:05 GMT</span><br><span class="line">ETag: &quot;0&quot;</span><br><span class="line">Content-Type: application&#x2F;hal+json;charset&#x3D;UTF-8</span><br></pre></td></tr></table></figure><h1 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h1><p>엔티티를 처리하는 중에 아래의 이벤트들이 발생하며, 이를 처리할 수 있다.</p><ul><li>BeforeCreateEvent</li><li>AfterCreateEvent</li><li>BeforeSaveEvent</li><li>AfterSaveEvent</li><li>BeforeLinkSaveEvent</li><li>AfterLinkSaveEvent</li><li>BeforeDeleteEvent</li><li>AfterDeleteEvent</li></ul><h2 id="AbstractRepositoryEventListener를-상속"><a href="#AbstractRepositoryEventListener를-상속" class="headerlink" title="AbstractRepositoryEventListener를 상속"></a>AbstractRepositoryEventListener를 상속</h2><p><code>AbstractRepositoryEventListener</code>에는 각 이벤트별로 처리하기 위한 메서드들이 <code>protected</code>로 정의되어 있다.<br>필요한 메서드를 재정의하여 사용한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberEventListener</span> <span class="keyword">extends</span> <span class="title">AbstractRepositoryEventListener</span>&lt;<span class="title">Member</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBeforeSave</span><span class="params">(Member member)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAfterDelete</span><span class="params">(Member member)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Annotated-Handler"><a href="#Annotated-Handler" class="headerlink" title="Annotated Handler"></a>Annotated Handler</h2><p><code>@RepositoryEventHandler</code> 등의 애노테이션으로 이벤트 핸들러를 등록할 수 있다.<br>이 때 핸들러는 spring에 bean으로 등록되어야 한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RepositoryEventHandler</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberEventHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@HandleBeforeSave</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMemberSave</span><span class="params">(Member p)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@HandleBeforeSave</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleAddressSave</span><span class="params">(Address p)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h1><p><code>spring-security</code>와 연동하여 권한에 따른 연산을 수행할도록 설정할 수 있다.</p><h2 id="PreAuthorize"><a href="#PreAuthorize" class="headerlink" title="@PreAuthorize"></a>@PreAuthorize</h2><p><code>MemberRepository</code>의 <code>findByName</code>은 <code>ADMIN</code> 권한의 사용자만 사용할 수 있고,<br>나머지는 <code>USER</code> 권한의 사용자도 사용할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize</span>(<span class="string">"hasRole('USER')"</span>)</span><br><span class="line"><span class="meta">@RepositoryRestResource</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MemberRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Member</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreAuthorize</span>(<span class="string">"hasRole('ADMIN')"</span>)</span><br><span class="line">    <span class="function">Member <span class="title">findByName</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>Spring Data REST에 대해서 알아보았다.<br>Repository와 Entity의 내용을 기반으로 간편히 RESTful API를 제공해주기는 하지만,<br>DDD에 적용할 정도의 정교함을 보여주지는 않는 것 같다.<br><code>board</code> 엔티티에 <code>public void like()</code> 메서드를 <code>/api/boards/1/like</code>를 통해 실행할 수 있다면 좋을 것 같다.<br>생각해보면 <code>spring-data</code>의 하위 라이브러리들은 <code>repository</code>에 필요한 기능들을 추상화하는 것들이니, 일부러 굳이 서비스 로직까지 건들지는 않는 것 같다.<br>위에서 말한 것도, 결국 커스텀 설정으로 가능하게 만들 수 있다.</p><p>client에서 <code>HATEOAS</code>를 적용하여 개발을 한다면 충분히 사용할 만한 기술이라고 생각한다.</p>]]></content>
      
      <categories>
          
          <category> spring </category>
          
          <category> reference </category>
          
          <category> data </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring-boot에 관해서</title>
      <link href="/2018/03/15/brief-of-spring-boot/"/>
      <content type="html"><![CDATA[<h1 id="spring-boot에-관해서"><a href="#spring-boot에-관해서" class="headerlink" title="spring-boot에 관해서"></a>spring-boot에 관해서</h1><p>필자의 친구가 N게임사에 면접을 보러가서 <code>spring-boot</code>는 설정을 편리하게 해주는 것 외에는 없나요라는 질문을 받았다고 한다.</p><p><code>spring-boot</code>는 설정을 편리하게 해주기 위한게 다라고 생각한다.<br>그 목적으로 나왔고, 그 목적을 달성함으로 파생되는 이익이 많다.</p><p>그 이익를 꼽자면</p><a id="more"></a><ul><li>관례를 통한 설정<ul><li>프로젝트를 새로 생성할 때 항상 하는 설정들…<ul><li>component-scan, InternalViewResolver, TransactionManager, DataSource, DBCP…</li></ul></li><li>일일이 타이핑할 필요없다. 무슨 설정이 있는지 알고만 있으면 된다. 변경할 부분만 고치자. 손가락 아플 일이 없다.</li></ul></li><li>앞서 소개한 <code>spring-boot-starter</code>를 이용한 팀 단위의 관례 정의 : 필요하다면 얼마든지 커스터마이징할 수 있다.</li><li>개발환경, 웹, 보안, 배치, JDBC, NoSql, Messaging, Application Monitoring, 빌드툴 통합, 배포, 클라우드 추상화까지 개발자가 뭘 좋아할지 몰라서 다 준비해놓았다.</li><li>빠른 프로토타입 프로젝트 생성 : 필요한 기술만 빠르게 테스트</li><li>의존성 버전 관리 : 사용할 기술들에 대한 버전을 <code>spring-boot-dependencies-${version}.pom</code>에 다 정리했다.</li><li>레퍼런스 한 번 훑어보자: 써봄직한 기술은 거의 다 있다(지원한다)</li></ul><h2 id="그럼에도-불구하고"><a href="#그럼에도-불구하고" class="headerlink" title="그럼에도 불구하고"></a>그럼에도 불구하고</h2><p>사실 <code>spring-boot</code>를 쓰면서 편하다고 느끼는 것은, <code>spring-boot</code>를 쓰지 않으면서 많은 커스텀 설정들을 직접 해봤었기 때문이 아니었을까 하는 생각도 든다.<br>SQL을 잘 다룰 줄 알아야, JPA를 더욱 효율적으로 사용할 수 있는 것처럼, spring으로 어떠한 일들을 할 수 있는지 한 번쯤 경험해봐야, boot도 잘 다룰 수 있지 않을까?<br>application 환경 설정이라는 부분은 개인간의 기술 격차가 생기기 쉬운 부분 중 하나라고 생각한다.<br>한 번, 여러 케이스들에 대해서 잘 템플릿화 해두면 큰 변경없이 오래도록 잘 써먹을 수 있기 때문인 것 같다.<br>실제로 필자도, 처음 개발 1년차 동안은 maven의 <code>parent pom</code>의 개념같은 것도 몰랐었으니 말 다했다.</p>]]></content>
      
      <categories>
          
          <category> chat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring-boot-starter 작성하기</title>
      <link href="/2018/03/15/create-spring-boot-starter/"/>
      <content type="html"><![CDATA[<h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><p><code>spring-boot</code>에서 <code>starter</code>란 의존성과 설정을 자동화해주는 모듈을 뜻한다.</p><p>예를 들어, <code>spring-boot-starter-jpa</code>를 의존성 추가했을 때 아래의 일을 해준다.</p><ul><li><code>spring-aop</code>, <code>spring-jdbc</code> 등의 의존성을 걸어준다.</li><li><code>classpath</code>를 뒤져서 어떤 Database를 사용하는지 파악하고, 자동으로 entityManager를 구성해준다.</li><li>해당 모듈들 설정에 필요한 properties 설정을 제공한다(<code>Configuration Processor</code>를 사용하면 효과 UP)</li></ul><p>프로젝트를 진행하면서, 공통적으로 사용되는 spring 설정을 모듈로 묶어놓고 사용할 수 있다.<br>또한 필요한 경우, 상위 프로젝트에서 얼마든지 설정을 덮어쓸 수 있다.</p><p>이번에는 직접 <code>spring-boot-starter</code>를 작성하고 동작하는 방법을 공유해보려 한다.<br><code>spring-boot</code> 버전은 <code>2.0.0.RELEASE</code>를 사용한다.</p><a id="more"></a><h1 id="구현할-내용"><a href="#구현할-내용" class="headerlink" title="구현할 내용"></a>구현할 내용</h1><p>아래 요구 사항을 충족하는 경우, reaquest parameter를 logging하는 <code>spring-boot-starter</code>를 작성한다.</p><ul><li><code>application.yml</code>에서 <code>spring.mvc.custom-uri-logging-filter.enabled: true</code>일 것</li><li><code>application.yml</code>에서 <code>spring.mvc.custom-uri-logging-filter.level: info</code> 등으로 지정한 레벨로 찍을 것</li></ul><h1 id="구현"><a href="#구현" class="headerlink" title="구현"></a>구현</h1><h2 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h2><p><code>sample-boot-starter</code> 내부에 3개의 모듈을 생성한다.</p><ul><li><code>sample-spring-boot-autoconfigure</code> : <code>@Configuration</code>으로 특정 조건에 맞춰서 설정을 실행</li><li><code>sample-spring-boot-starter-request-parameter-logging-filter</code> : <code>autoconfigure</code>와 필요한 의존성을 가짐</li><li><code>sample-spring-boot-starter-web</code> : <code>starter</code>를 주입받음</li></ul><p><code>autoconfigure</code>와 <code>starter</code>를 굳이 나누지 않고,<br><code>starter</code>내에 <code>autoconfigure</code>를 정의해서 배포하는 경우도 있다.</p><h2 id="Module-Naming"><a href="#Module-Naming" class="headerlink" title="Module Naming"></a>Module Naming</h2><p><code>starter</code>를 만들 때는 설정을 담당하는 <code>autoconfigure</code>와 의존성을 담당하는 <code>starter</code> 모듈을 작성해야 한다.<br>spring reference에서는 다음과 같이 모듈들의 명명 규칙을 정의하고 있다.</p><ul><li><code>spring-boot</code>로 시작하지 않을 것</li><li><code>acme</code>에 대한 starter를 만드는 경우<ul><li><code>autoconfigure</code> : <code>acme-spring-boot-autoconfigure</code></li><li><code>starter</code> : <code>acme-spring-boot-starter</code></li></ul></li></ul><p>spring의 경우를 보면 <a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure" target="_blank" rel="noopener">spring-boot-autoconfigure</a>에서 모든 <code>spring-boot-starter-XXX</code>의 자동 설정 사항을 들고 있다.<br>이를 기반으로 <code>spring-boot-starter-XXX</code>(예: <a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-starters/spring-boot-starter-data-jpa/pom.xml" target="_blank" rel="noopener">spring-boot-starter-jpa</a>) 모듈에서는 의존성만 관리하고 있다.</p><p>저러한 규칙을 응용해서 <code>{project}-spring-boot-configure</code>, <code>{project}-spring-boot-starter-{module}</code>로 명명을 해도 괜찮다고 생각한다.</p><h2 id="application-property-key"><a href="#application-property-key" class="headerlink" title="application property key"></a>application property key</h2><p>reference에서는 가능한 고유한 key를 사용할 것을 권고하고 있다.<br><code>server</code>, <code>management</code>, <code>spring</code> 등, spring이 이미 정의한 property key를 사용하는 경우,<br>향후 spring의 수정 내용이 어떠한 영향을 미칠지 알 수 없기 때문이다.</p><h2 id="autoconfigure-모듈"><a href="#autoconfigure-모듈" class="headerlink" title="autoconfigure 모듈"></a>autoconfigure 모듈</h2><p><code>autoconfigure</code> 모듈은 자동 설정에 필요한 모든 요소(<code>@ConfigurationProperties</code> 등)와 <code>library</code>를 갖고 있다.<br><code>autoconfigure</code>에서 참조한 의존성에는 <code>optional</code>을 걸어두는 것이 좋다. 이 경우, <code>autoconfigure</code>를 참조하는 모듈에서 필요한 의존성이 없을 때, Spring Boot는 자동 설정을 하지 않는다.</p><h3 id="구현-1"><a href="#구현-1" class="headerlink" title="구현"></a>구현</h3><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.parfait.study<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sample-spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>sample-spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> <span class="comment">&lt;!-- The parent should provide all that --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>slf4j-api</code> : log를 사용하기 위해 의존</li><li><code>javax.servlet-api</code> : Filter를 사용하기 위해 의존</li><li><code>spring-boot-configuration-processor</code> : IDE가 <code>application.yml</code>의 내용을 가이드할 수 있도록 한다. 추후 상세 설명함.</li></ul><h4 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h4><p>default 설정을 정의할 수 있다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.mvc.request-parameter-logging-filter:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">level:</span> <span class="string">DEBUG</span></span><br><span class="line"><span class="attr">logging.level.com.parfait.study.autoconfigure.logging.filter.RequestParameterLoggingFilter:</span> <span class="string">$&#123;spring.mvc.request-parameter-logging-filter.level&#125;</span></span><br></pre></td></tr></table></figure><h4 id="src-main-resoucres-META-INF-additional-spring-configuration-metadata-json"><a href="#src-main-resoucres-META-INF-additional-spring-configuration-metadata-json" class="headerlink" title="src/main/resoucres/META-INF/additional-spring-configuration-metadata.json"></a>src/main/resoucres/META-INF/additional-spring-configuration-metadata.json</h4><p><code>application.yml</code>에서 설정한 key에 대한 정보를 정의할 수 있다.<br>이를 Configuration Metadata라 부르며, 이 파일을 정의한 경우 IDE에서 해당 키에 대한 가이드를 보여줄 수 있다.<br>가이드를 확인할 수 있는 화면은 추후 첨부하겠다.<br><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/configuration-metadata.html" target="_blank" rel="noopener">Configuration Metadata에 대해</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"properties"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"spring.mvc.request-parameter-logging-filter.enabled"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"org.slf4j.event.Level"</span>,</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"true 또는 false"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"spring.mvc.request-parameter-logging-filter.level"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"java.lang.String"</span>,</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"로깅 레벨 설정"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RequestParameterLoggingFilterProperties"><a href="#RequestParameterLoggingFilterProperties" class="headerlink" title="RequestParameterLoggingFilterProperties"></a>RequestParameterLoggingFilterProperties</h4><p><code>application.yml</code>에서 작성한 키에 대응하는 Java class를 정의할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.mvc.request-parameter-logging-filter"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestParameterLoggingFilterProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> enabled;</span><br><span class="line">    <span class="keyword">private</span> Level level;</span><br><span class="line">    <span class="comment">// getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RequestParameterLoggingFilter"><a href="#RequestParameterLoggingFilter" class="headerlink" title="RequestParameterLoggingFilter"></a>RequestParameterLoggingFilter</h4><p>실제 로직을 담당하는 필터를 정의한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestParameterLoggingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        String params = request.getParameterMap()</span><br><span class="line">                            .entrySet()</span><br><span class="line">                            .stream()</span><br><span class="line">                            .map(entry -&gt; entry.getKey() + <span class="string">"="</span> + String.join(<span class="string">","</span>, entry.getValue()))</span><br><span class="line">                            .flatMap(Stream::of)</span><br><span class="line">                            .collect(Collectors.joining(<span class="string">"&amp;"</span>));</span><br><span class="line">        log(params);</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// private void log(String params) &#123; ... &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SampleAutoConfiguration"><a href="#SampleAutoConfiguration" class="headerlink" title="SampleAutoConfiguration"></a>SampleAutoConfiguration</h4><p>재료(<code>property</code>, <code>logic</code>)이 다 모였으니, 이를 자동 설정이 되도록 해보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>(WebMvcAutoConfiguration<span class="class">.<span class="keyword">class</span>) // 1</span></span><br><span class="line"><span class="class">@<span class="title">EnableConfigurationProperties</span>(<span class="title">RequestParameterLoggingFilterProperties</span>.<span class="title">class</span>) // 2</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SampleAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RequestParameterLoggingFilterProperties requestParameterLoggingFilterProperties; </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnProperty</span>(name = <span class="string">"spring.mvc.request-parameter-logging-filter.enabled"</span>, havingValue = <span class="string">"true"</span>) <span class="comment">// 3</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Filter <span class="title">customUriLoggingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RequestParameterLoggingFilter(requestParameterLoggingFilterProperties.getLevel());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>Filter 설정(webmvc-specific)을 하는 것이기 때문에, webmvc 설정이 완료된 후에 해당 설정이 동작하게 만든다. </li><li>RequestParameterLoggingFilterProperties를 bean으로 생성해 <code>@Autowired</code> 가능하도록 만든다.</li><li><code>@ConditionalOnXXX</code>를 사용하여 <code>@Bean</code> 생성의 조건, <code>@Configuration</code> 작동의 조건을 만들 수 있다.<br><code>@Conditional(Condition condition)</code>으로 <code>Condition</code> 인터페이스를 구현하여 더욱 상세하게 조건을 지정할 수도 있다.</li></ol><h4 id="src-main-resource-META-INF-spring-factories"><a href="#src-main-resource-META-INF-spring-factories" class="headerlink" title="src/main/resource/META-INF/spring.factories"></a>src/main/resource/META-INF/spring.factories</h4><p><code>.jar</code>파일에 포함되어, 해당 boot 모듈이 설정해야 할 정보를 가지고 있다.<br><code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code> 키에 작성한 <code>@Configuration</code> class들을 콤마(<code>,</code>) 구분자로 넣어준다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;com.parfait.study.autoconfigure.SampleAutoConfiguration</span><br></pre></td></tr></table></figure><p><a href="https://github.com/spring-projects/spring-boot/blob/v2.0.0.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories" target="_blank" rel="noopener">spring-boot-autoconfigure에서 사용되는 spring.factories</a></p><h2 id="starter-모듈"><a href="#starter-모듈" class="headerlink" title="starter 모듈"></a>starter 모듈</h2><p>필요한 설정 정보는 <code>autoconfigure</code>에서 모두 마쳤다.<br><code>starter</code>에서는 의존성만 걸어주면 된다.<br><code>autoconfigure</code>에서 <code>optional</code>을 제거하기만 하면 된다.</p><h4 id="pom-xml-1"><a href="#pom-xml-1" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.parfait.study<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sample-spring-boot-starter-request-parameter-logging-filter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>sample-spring-boot-starter-request-parameter-logging-filter<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.parfait.study<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sample-spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> <span class="comment">&lt;!-- The parent should provide all that --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="web-모듈"><a href="#web-모듈" class="headerlink" title="web 모듈"></a>web 모듈</h2><p>이제 설정한 <code>starter</code>를 써먹어보자.<br><code>sample-spring-boot-starter-web</code>이라는 이름이지만 그냥 웹 API Application이다.</p><h4 id="pom-xml-2"><a href="#pom-xml-2" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.parfait.study<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sample-spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>sample-spring-boot-starter-web<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- starter 의존성 설정 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.parfait.study<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sample-spring-boot-starter-request-parameter-logging-filter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="UserController"><a href="#UserController" class="headerlink" title="UserController"></a>UserController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate().getForObject(<span class="string">"https://jsonplaceholder.typicode.com/users/&#123;id&#125;"</span>, String<span class="class">.<span class="keyword">class</span>, <span class="title">id</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="application-yml-1"><a href="#application-yml-1" class="headerlink" title="application.yml"></a>application.yml</h4><p>드디어 보여줄 수 있게 되었다.<br><code>src/main/resoucres/META-INF/additional-spring-configuration-metadata.json</code>에서 말했던 IDE의 가이드란 이런 것이다.</p><p><img src="/images/create-spring-boot-starter/ide-guide.png" alt="ide-guide"><br><img src="/images/create-spring-boot-starter/ide-guide2.png" alt="ide-guide2"></p><p>값 타입을 해석해서 후보까지 보여주는 위엄!</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.mvc.request-parameter-logging-filter.enabled=true</span></span><br><span class="line"><span class="string">spring.mvc.request-parameter-logging-filter.level=info</span></span><br></pre></td></tr></table></figure><blockquote><p><code>autoconfigure</code>에서 작성한 <code>appliaction.yml</code>값이 default이다.<br><code>autoconfigure</code>에서도 기본값을 지정하지 않고, Configuration Meta만 넘길 수도 있다.</p></blockquote><h4 id="실행-결과"><a href="#실행-결과" class="headerlink" title="실행 결과"></a>실행 결과</h4><p>이제 서버를 띄우고 API를 실행해보자.<br>사용하는 소스에서는 <code>application.yml</code> 외에는 아무런 설정을 하지 않았는데 Filter가 잘 동작하는 것을 확인할 수 있다.</p><p><strong><code>GET /users/1?name=hello</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-03-15 21:24:20.656  INFO 16048 --- [nio-8080-exec-1] .p.s.a.l.f.RequestParameterLoggingFilter : uri : name&#x3D;hello</span><br></pre></td></tr></table></figure><h1 id="이-외에-할-수-있는-일들에-대해"><a href="#이-외에-할-수-있는-일들에-대해" class="headerlink" title="이 외에 할 수 있는 일들에 대해"></a>이 외에 할 수 있는 일들에 대해</h1><p><code>spring-boot-starter</code>는 협업에 있어서 강력한 자동 설정을 지원해 줄 수 있다는 점에서 매우 권장한다. boot를 사용하는 팀 간의 지원을 아주 간편하게 해줄 수 있다.</p><p>예를 들어, 빅데이터 분석을 위해 정보를 수집해야 하는 서비스에서는 <code>bigdata-spring-boot-starter-log</code>를 제공하여 아래와 같은 설정만으로 로그 수집 로직이 동작하게 하거나</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">bigdata.log:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">server:</span> <span class="string">http://bigdata.server.com</span></span><br><span class="line">  <span class="attr">service.name:</span> <span class="string">ABC</span> <span class="string">Portal</span></span><br></pre></td></tr></table></figure><p>혹은 회원 암호화 토큰을 cookie나 header로 받은 후,<br>회원 서버와 통신하고 그 결과를 request의 attribute에 주입해주는 경우,<br>아래와 같은 설정만으로 할 수도 있다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">member-server:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">request:</span></span><br><span class="line">    <span class="attr">token:</span></span><br><span class="line">      <span class="comment"># or HEADER</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">COOKIE</span> </span><br><span class="line">      <span class="attr">name:</span> <span class="string">MEMBER_TOKEN</span></span><br><span class="line">    <span class="attr">read-timeout:</span> <span class="number">2000</span></span><br><span class="line">    <span class="attr">connect-timeout:</span> <span class="number">1000</span></span><br><span class="line">  <span class="attr">result.attribute-name:</span> <span class="string">RESOLVER_MEMBER_INFO</span></span><br></pre></td></tr></table></figure><p>필터 말고 다른 예를 들어보자.<br>spring의 <code>Cache Abstraction</code>을 이용해서 <code>@Cacheable</code>을 <a href="https://docs.oracle.com/cd/E24290_01/coh.371/e22840/nearcache.htm" target="_blank" rel="noopener">Near Cache</a>로 구성할 수도 있다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">chained-cache-namager:</span></span><br><span class="line">  <span class="attr">bean-name:</span> <span class="string">cacheManager</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">EHCACHE</span></span><br><span class="line">    <span class="attr">config:</span> <span class="string">classpath:/ehcache.xml</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">REDIS</span></span><br><span class="line">    <span class="attr">cluster.hosts:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="number">10.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:6379</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10.0</span><span class="number">.0</span><span class="number">.2</span><span class="string">:6379</span></span><br></pre></td></tr></table></figure><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p><code>spring-boot</code>로 인해 설정이 간편화되면서, 개발자는 좀 더 핵심 logic에 신경 쓸 수 있게 되었다.<br>예전에는 상위 <code>pom.xml</code>에서 의존성 관리하랴, 개발 프로젝트에서는 일일이 설정하랴,<br>한 번 프로젝트를 생성할 때마다 다시 한 번 반복하는 일들이 많았지만,<br>이제는 정해진 규모의 팀에서 정해진 관례로 아주 간편하게 설정을 간소화할 수 있다.</p><p>협업하는 부서에서 <code>boot</code>를 쓴다면, 살며시 <code>starter</code>를 건네보자.</p>]]></content>
      
      <categories>
          
          <category> spring </category>
          
          <category> practice </category>
          
          <category> practice </category>
          
          <category> boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> spring-boot </tag>
            
            <tag> starter </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring5에서 HTTP Streaming</title>
      <link href="/2018/03/15/spring-http-stereamings/"/>
      <content type="html"><![CDATA[<h1 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h1><p>Spring의 Stream이라고 하면, 가장 먼저 떠오르는 것은 websocket일 것 같다.<br>websocket은 full-duplex communication(전 이중 통신)을 표방하고 있으며, 별도의 프로토콜을 공부해야하는 등, web상의 양방향 통신을 복잡하다고 느낄 수 있을 것 같다.</p><p>때문에 다음의 조건들을 충족시킬 Http Streaming 기법에 대해, <code>spring-webmvc</code>와 <code>spring-webflux</code> 별로 하나씩 공유하려한다.</p><ul><li>Spring5에서 지원</li><li>구현 난이도가 낮음</li><li>기존의 Http 통신을 기반</li></ul><a id="more"></a><h1 id="spring-webmvc-SSE"><a href="#spring-webmvc-SSE" class="headerlink" title="spring-webmvc : SSE"></a>spring-webmvc : SSE</h1><p><code>spring-webmvc</code>에서 HTTP Streaming을 하는 가장 간단한 방법은 <a href="https://www.w3.org/TR/eventsource/" target="_blank" rel="noopener">SSE(Server-Sent Event)</a>를 사용하는 것이다.(<a href="https://www.w3schools.com/html/tryit.asp?filename=tryhtml5_sse" target="_blank" rel="noopener">예제</a>)</p><h2 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h2><ul><li>spring에서 서버측 구현이 간편하다</li><li>표준 기술이므로 javascript에서 구현이 간편하다</li><li>Android, iOS에서도 관련 라이브러리가 있다</li><li>자동으로 재접속을 시도한다</li></ul><h2 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h2><ul><li>Native Javascript로는 Header를 추가하는 등의 세밀한 조정을 할 수 없다<ul><li>Polyfill로 대체 가능</li></ul></li><li>표준 기술이지만 IE(edge 포함)에서 지원하지 않는다<ul><li>Polyfill로 대체 가능</li></ul></li><li>client 측에서 연결을 끊은 경우를 감지하지 못한다</li></ul><h2 id="구현"><a href="#구현" class="headerlink" title="구현"></a>구현</h2><p><strong>spring reference에 나와있는 간단한 소스</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(path=<span class="string">"/events"</span>, produces=MediaType.TEXT_EVENT_STREAM_VALUE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> SseEmitter <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SseEmitter emitter = <span class="keyword">new</span> SseEmitter();</span><br><span class="line">    <span class="comment">// Save the emitter somewhere..</span></span><br><span class="line">    <span class="keyword">return</span> emitter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// In some other thread</span></span><br><span class="line">emitter.send(<span class="string">"Hello once"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// and again later on</span></span><br><span class="line">emitter.send(<span class="string">"Hello again"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// and done at some point</span></span><br><span class="line">emitter.complete();</span><br></pre></td></tr></table></figure><p><code>SseEmitter</code>를 반환하고, 별도의 thread에서 <code>emmiter.send()</code>를 호출하면 된다.</p><h3 id="구현할-예제"><a href="#구현할-예제" class="headerlink" title="구현할 예제"></a>구현할 예제</h3><p><code>GET /users</code>로 요청시, 1초 간격으로<br><code>https://jsonplaceholder.typicode.com/users/{id}</code>의 1,2,3을 차례로 호출해서 응답</p><h3 id="의존성"><a href="#의존성" class="headerlink" title="의존성"></a>의존성</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-web'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserEmitService service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(produces = MediaType.TEXT_EVENT_STREAM_VALUE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseBodyEmitter <span class="title">users</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SseEmitter emitter = <span class="keyword">new</span> SseEmitter();</span><br><span class="line">        service.add(emitter);</span><br><span class="line">        <span class="keyword">return</span> emitter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserEmitService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REPEAT = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;ResponseBodyEmitter, AtomicInteger&gt; emitterCountMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ResponseBodyEmitter emitter)</span> </span>&#123;</span><br><span class="line">        emitterCountMap.put(emitter, <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">1000L</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">emit</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;ResponseBodyEmitter&gt; toBeRemoved = <span class="keyword">new</span> ArrayList&lt;&gt;(emitterCountMap.size());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;ResponseBodyEmitter, AtomicInteger&gt; entry : emitterCountMap.entrySet()) &#123;</span><br><span class="line"></span><br><span class="line">            Integer count = entry.getValue().incrementAndGet();</span><br><span class="line">            User user = <span class="keyword">new</span> RestTemplate().getForObject(<span class="string">"https://jsonplaceholder.typicode.com/users/&#123;id&#125;"</span>, User<span class="class">.<span class="keyword">class</span>, <span class="title">count</span>)</span>;</span><br><span class="line"></span><br><span class="line">            ResponseBodyEmitter emitter = entry.getKey();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                emitter.send(user);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                log.error(e.getMessage(), e);</span><br><span class="line">                toBeRemoved.add(emitter);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (count &gt;= REPEAT) &#123;</span><br><span class="line">                toBeRemoved.add(emitter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (ResponseBodyEmitter emitter : toBeRemoved) &#123;</span><br><span class="line">            emitterCountMap.remove(emitter);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="실행-결과"><a href="#실행-결과" class="headerlink" title="실행 결과"></a>실행 결과</h3><p>브라우저에서 <code>GET /users</code>를 호출 해보면, 아래 결과가 한 줄마다 1초 간격으로 표시된다.<br><code>data</code>라고 하는 key에 json value가 붙어있는 형태다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data:&#123;"id":1,"name":"Leanne Graham","email":"Sincere@april.biz","phone":"1-770-736-8031 x56442","website":"hildegard.org"&#125;</span><br><span class="line"></span><br><span class="line">data:&#123;"id":2,"name":"Ervin Howell","email":"Shanna@melissa.tv","phone":"010-692-6593 x09125","website":"anastasia.net"&#125;</span><br><span class="line"></span><br><span class="line">data:&#123;"id":3,"name":"Clementine Bauch","email":"Nathan@yesenia.net","phone":"1-463-123-4447","website":"ramiro.info"&#125;</span><br></pre></td></tr></table></figure><h2 id="동작-방식"><a href="#동작-방식" class="headerlink" title="동작 방식"></a>동작 방식</h2><p>Spring에서 지원하는 Async 응답 방식인 <code>DeferredResult</code>, <code>Callable</code>과 같다</p><p><strong>Spring Async 응답 방식 개요</strong></p><ul><li>반환형이 Async 응답을 필요로하는 경우, Spring MVC는 <code>request.startAsync()</code>를 호출하여 <code>AsyncContext</code>를 획득하여 저장해둔다.<ul><li><code>AsyncContext</code>는 비동기 처리를 제어할 수 있도록 해준다.</li><li>ex) Sevrlet container thread에서 요청 처리를 재개시키며, 기존의 <code>forward</code>와 같은 동작을 하는 <code>dispatch</code> 메서드를 제공한다.</li><li>이로 인해 응답을 별도의 thread에서 비동기로 처리할 수 있다.</li></ul></li><li>요청 thread를 종료시키되, response는 열어둔다</li><li>다른 thread에서 <code>AsyncContext</code>를 사용해서 response를 완성시킨다.<ul><li>Spring MVC는 Servlet container로 다시 요청을 보내고(dispatch), client로 응답한다.</li></ul></li></ul><h2 id="주의-사항"><a href="#주의-사항" class="headerlink" title="주의 사항"></a>주의 사항</h2><p>boot를 사용하는 경우, <code>spring.mvc.async.request-timeout: 1000</code>로 timeout 설정을 할 수 있다.<br><code>new SseEmitter(int timeout)</code>으로 개별로 사용할 수 있으며, 우선 설정된다.</p><h1 id="spring-webflux-Flux-lt-T-gt"><a href="#spring-webflux-Flux-lt-T-gt" class="headerlink" title="spring-webflux : Flux&lt;T&gt;"></a>spring-webflux : <code>Flux&lt;T&gt;</code></h1><p><code>reactor</code>에서 <code>Flux&lt;T&gt;</code>는 <code>T</code>의 stream을 의미한다.<br><code>Controller</code>에서 <code>Flux&lt;T&gt;</code>를 반환하는 경우, <code>application/stream+json</code>으로 객체를 json 형식으로 받을 수 있다.</p><blockquote><p><code>Flux&lt;ServerSentEvent&gt;</code> 방식으로 SSE를 사용할 수도 있다.</p></blockquote><h2 id="장점-1"><a href="#장점-1" class="headerlink" title="장점"></a>장점</h2><ul><li>reactive의 장점을 살릴 수 있다.</li><li>reactor를 알고 있으면 구현하기 쉽다.</li></ul><h2 id="단점-1"><a href="#단점-1" class="headerlink" title="단점"></a>단점</h2><ul><li>client 측에서 지원해주는 라이브러리는 적은 듯하다.</li></ul><h2 id="구현-예제"><a href="#구현-예제" class="headerlink" title="구현 예제"></a>구현 예제</h2><p>요구 사항은 위 예제와 동일하다.<br>1초마다 User를 불러온다.</p><h3 id="의존성-1"><a href="#의존성-1" class="headerlink" title="의존성"></a>의존성</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-webflux'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Controller-1"><a href="#Controller-1" class="headerlink" title="Controller"></a>Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserClient userClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserController</span><span class="params">(@NonNull UserClient userClient)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userClient = userClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1초마다 User 발생</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(produces = <span class="string">"application/stream+json"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flux&lt;User&gt; <span class="title">users</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Flux.interval(Duration.ofSeconds(<span class="number">1L</span>))</span><br><span class="line">                   .take(<span class="number">3</span>)</span><br><span class="line">                   .flatMap(number -&gt; userClient.get(number + <span class="number">1L</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UserClient"><a href="#UserClient" class="headerlink" title="UserClient"></a>UserClient</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flux&lt;User&gt; <span class="title">get</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> WebClient.create(<span class="string">"https://jsonplaceholder.typicode.com"</span>)</span><br><span class="line">                        .get()</span><br><span class="line">                        .uri(<span class="string">"/users/&#123;id&#125;"</span>, id)</span><br><span class="line">                        .retrieve()</span><br><span class="line">                        .bodyToFlux(User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="실행-결과-1"><a href="#실행-결과-1" class="headerlink" title="실행 결과"></a>실행 결과</h3><p>브라우저에서 실행해보면 1초마다 한 줄씩 표시된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;Leanne Graham&quot;,&quot;email&quot;:&quot;Sincere@april.biz&quot;,&quot;phone&quot;:&quot;1-770-736-8031 x56442&quot;,&quot;website&quot;:&quot;hildegard.org&quot;&#125;</span><br><span class="line">&#123;&quot;id&quot;:2,&quot;name&quot;:&quot;Ervin Howell&quot;,&quot;email&quot;:&quot;Shanna@melissa.tv&quot;,&quot;phone&quot;:&quot;010-692-6593 x09125&quot;,&quot;website&quot;:&quot;anastasia.net&quot;&#125;</span><br><span class="line">&#123;&quot;id&quot;:3,&quot;name&quot;:&quot;Clementine Bauch&quot;,&quot;email&quot;:&quot;Nathan@yesenia.net&quot;,&quot;phone&quot;:&quot;1-463-123-4447&quot;,&quot;website&quot;:&quot;ramiro.info&quot;&#125;</span><br></pre></td></tr></table></figure><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>Spring5에서 지원해주는 Http Streaming에 대해서 <code>webmvc</code>, <code>webflux</code> 라이브러리 별로 하나씩 알아보았다.</p><p>아무래도 <code>websocket</code>과 비교를 할 수 밖에 없는데,</p><p><code>websocket</code>과 비교했을 때의 장점은 <code>구현하기 쉽다</code>는 것이다.<br>이것도 좀 애매한데 <code>구현하기 쉽다</code>는 상대적인 것이어서 이미 <code>websocket</code>을 경험해본 사람들은,<br>오히려 더 많은 기능을 지원해주는 <code>websocket</code>을 선호할 것 같다.<br><code>websocket</code>의 경우에는 <code>Sse</code>보다 오히려 client에서 많은 지원을 해주며(<code>SockJs</code> 등), reference도 다양하다.<br><code>Flux&lt;T&gt;</code>는 spring5로 넘어오면서 <code>websocket</code>에서도 반환할 수 있다.</p><p>다른 장점은 전통적인 Http 방식이므로 infra를 건들 일이 없다는 것이다.<br><code>websocket</code>은 몇몇 구식 load balancer나 proxy에서는 지원을 하지 않거나, 미미한 경우가 있다.</p><p>어떠한 서비스를 구현해야 하느냐에 따라서 다르겠지만, 대부분의 경우에는 <code>websocket</code>을 상위호환으로 볼 수 있을 것 같다.</p><p>소스코드 : <a href="https://github.com/supawer0728/simple-streaming" target="_blank" rel="noopener">https://github.com/supawer0728/simple-streaming</a></p>]]></content>
      
      <categories>
          
          <category> spring </category>
          
          <category> practice </category>
          
          <category> practice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> streaming </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>가끔 복기할 만한 TCP Socket Programming 기초</title>
      <link href="/2018/03/15/Java-Server-Socket-Programming-Base/"/>
      <content type="html"><![CDATA[<h1 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h1><p>Spring에서 지원하는 Streaming이나, WebSocket에 관련해서 공부하다가, 기본 지식을 다시 복습해야할 필요성을 느꼈다.<br>대학 강의 내용을 토대로 가끔씩 다시 떠올릴만한 내용들을 정리해두고자 한다.</p><h1 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h1><p>Kernel 상에서 File Descriptor로 취급된다.<br>Local과 Remote의 Ip Address, Port 정보를 가지고 있다.<br>Data를 이 Socket을 대상으로 Read, Write한다.</p><a id="more"></a><h1 id="Linux-Socket-Programming"><a href="#Linux-Socket-Programming" class="headerlink" title="Linux Socket Programming"></a>Linux Socket Programming</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> server_socket;</span><br><span class="line">  <span class="keyword">int</span> client_socket;</span><br><span class="line">  <span class="keyword">int</span> port = <span class="number">8080</span>;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_address</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_address</span>;</span></span><br><span class="line">  <span class="keyword">int</span> client_address_len = <span class="keyword">sizeof</span>(client_address);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">char</span>[] greeting = <span class="string">"Hello World!"</span>;</span><br><span class="line">  </span><br><span class="line">  server_socket = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;server_address, <span class="number">0</span>, <span class="keyword">sizeof</span>(server_address))</span><br><span class="line">  serv_addr.sin_family = AF_INET;</span><br><span class="line">  serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">  serv_addr.sin_port = htons(<span class="number">5000</span>); </span><br><span class="line">  </span><br><span class="line">  bind(server_socket, (struct sockaddr*) &amp;server_address, <span class="keyword">sizeof</span>(server_address)); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">listen</span>(server_socket, <span class="number">1</span>); <span class="comment">// 3</span></span><br><span class="line">  </span><br><span class="line">  client_socket = accept(server_socket, (struct sockaddr*)&amp;client_address, (<span class="keyword">socklen_t</span>*) &amp;client_address_len); <span class="comment">// 4</span></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">write</span>(client_socket, greeting, <span class="keyword">sizeof</span>(greeting)); <span class="comment">// 5</span></span><br><span class="line">  <span class="built_in">close</span>(client_socket);</span><br><span class="line">  <span class="built_in">close</span>(server_socket);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java는 위 작업들을 <code>new ServerSocket()</code>만으로도 자동으로 해주기 때문에.<br>Server가 Socket 통신할 때, 저수준에서 어떠한 작업들을 하는지 파악하기 위해 C로 작성해보았다.</p><ol><li>socket(file descriptor)를 생성한다<ul><li>프로토콜 체계, TCP인지, UDP인지 결정한다</li></ul></li><li>socket에 address 정보를 바인딩한다</li><li>해당 socket이 요청을 받을 수 있도록한다</li><li>server socket으로 연결(connection) 요청이 들어오면, accept()는 client의 socket을 반환한다. 연결이 있을 때까지 blocking된다</li><li>client socket에 메시지를 쓴다</li></ol><h2 id="좀-더-살펴보기"><a href="#좀-더-살펴보기" class="headerlink" title="좀 더 살펴보기"></a>좀 더 살펴보기</h2><h3 id="listen-int-socket-int-backlog"><a href="#listen-int-socket-int-backlog" class="headerlink" title="listen(int socket, int backlog)"></a>listen(int socket, int backlog)</h3><p><code>socket</code>에 connection queue를 붙이고 connection 대기 상태로 바꾼다.<br><code>backlog</code>는 queue의 크기를 나타낸다</p><h3 id="client-socket-accept-server-socket-…"><a href="#client-socket-accept-server-socket-…" class="headerlink" title="client_socket = accept(server_socket, …)"></a>client_socket = accept(server_socket, …)</h3><p>connection queue의 요청으로 connection을 맺은 후 새로운 socket을 생성해서 반환한다.<br><code>server_socket</code>은 계속해서 connection 요청을 처리해야하기 때문에, connection 요청이 처리된 경우에는 새로운 socket을 생성하게 된다.<br>새로 생성된 socket으로 client와 통신할 수 있다.</p><h1 id="Socket-Stream"><a href="#Socket-Stream" class="headerlink" title="Socket Stream"></a>Socket Stream</h1><p>socket을 생성하고 connection이 수립되면, 해당 소켓으로 읽기와 쓰기가 가능하다.<br>읽기와 쓰기는 각각의 Stream 개념으로 유지되며, 버퍼를 가진다.<br><code>write()</code>를 호출하면 입력 버퍼로 데이터가 쌓이며, 원격에서 <code>read()</code>를 호출하면 데이터를 읽을 수 있다.</p><p>오해하기 쉬운 것은 데이터를 보내는 시점이다.<br><code>write()</code>를 호출한다고 전송을 하는 것이 아니며, <code>read()</code>를 호출한다고 원격의 버퍼를 읽어오는 것이 아니다.</p><p><code>write()</code>를 호출하면 socket의 쓰기 버퍼에 정보가 쌓인 상태로 있고, 원격에서 읽기 버퍼에 데이터를 쌓을 수 있는 상황인지 파악 후 통신을 시작한다.<br><a href="http://www.omnisecu.com/tcpip/tcp-sliding-window.php" target="_blank" rel="noopener">TCP Sliding Window</a>가 이를 가능하게 해준다.</p><p>특정 socket에 read stream만 닫는다거나, write stream만 닫는 등의 방법으로 다양한 동작 방식으로 socket programming을 할 수 있다.(read thread와 write thread의 분할 등)</p><h1 id="Hand-Shake-Send-Receive-Close"><a href="#Hand-Shake-Send-Receive-Close" class="headerlink" title="Hand Shake, Send/Receive, Close"></a>Hand Shake, Send/Receive, Close</h1><h2 id="Hand-Shake-3-Way-HandShaking"><a href="#Hand-Shake-3-Way-HandShaking" class="headerlink" title="Hand Shake : 3-Way HandShaking"></a>Hand Shake : 3-Way HandShaking</h2><p>TCP socket connection을 맺기 위한 일련의 과정이다.</p><ol><li>client : 들려?</li><li>server : 어, 들려!</li><li>client : Ok, 알았어!</li></ol><img  src=http://www.plantuml.com/plantuml/svg/Syx9JCqhKT2rKmXEBIfBBLAmKeWEZlIBLGXs3RHIC3Gmq55mTFQsKj3bWie3LJf3z41KQWEbeQgDuAeD3GovdB6OZ50BL05LQsHW2000><p><strong>SEQ, ACK의 의미</strong></p><p>각자 자기 입장에서</p><ul><li>SEQ : N까지 보냈다</li><li>ACK : XX부터 보내면 된다(자신이 받은 SEQ + 1)</li></ul><h2 id="Send-Receive"><a href="#Send-Receive" class="headerlink" title="Send/Receive"></a>Send/Receive</h2><p>HandShake가 완료된 이후,<br>client에서 300byte를 세 번 전송하는 다이어그램.</p><img  src=http://www.plantuml.com/plantuml/svg/2qujAaijKj2rKt3EoKpDAr5Gi588TWsqKZ0oCD1HC3Gmq4sgB4bLu8BA0jK5GtHOAJWwUrif61iOSWMZcm4r0YY7C0Ad2IO6HbosjWebcRcf-QKb2iKbYKKb2hQs25CZq8m5Qa0o5abhQbuAYaQy-d0vnzJ06000><p>SEQ, ACK를 주고 받으면서 송수신한다.<br>timeout 내에 ACK가 오지 않으면 재전송한다.</p><h2 id="Close-4-Way-Handshaking"><a href="#Close-4-Way-Handshaking" class="headerlink" title="Close : 4-Way Handshaking"></a>Close : 4-Way Handshaking</h2><ol><li>client : 이제 우리 그만 만나…</li><li>server : 그래, 맘 정리할 시간을 줘</li><li>server : 정리다했어, 그동안 미안했어</li><li>client : 그래 안녕</li></ol><img  src=http://www.plantuml.com/plantuml/svg/Syx9JCqhKT2rKmXEBIfBBLAmKeXsy_IBLGXs3RHIC3GmCD1HS7JsjbBGvShBBqbLo4bDAx42YIYycR7czTIULpjxtYnlK01gYGztz0o9D-I2cWCqqHbYDj14e7geYKO84u666o8R2ZG3Xw5646L5cUaPK7MlDszvtRG7eTJPnp_O5QmOg_q87m7jDyIm7semXgzy78D3ue6YNCvOGWdX9qE4cK3ZZH1-0YfxCtVFcmLJttJFURMXHI74qnVYo9YyLzjtABoTtG9nk0i0><h3 id="우아한-종료란"><a href="#우아한-종료란" class="headerlink" title="우아한 종료란?"></a>우아한 종료란?</h3><p>TCP가 비정상적으로 종료될 가능성이 몇가지 있다.</p><h4 id="case-1-개발자-실수-close-호출"><a href="#case-1-개발자-실수-close-호출" class="headerlink" title="case 1: 개발자 실수(close 호출)"></a>case 1: 개발자 실수(close 호출)</h4><p>socket을 통해서 read, write stream이 생성된다.<br><code>close(socket)</code>을 호출하면, 모든 stream을 닫아서 읽기가 불가능해진다.<br>즉, 한 쪽에서 <code>close(socket)</code>을 호출하면 아래와 같은 상황이 된다.</p><p>여기서 client란 먼저 FIN을 요청한 쪽으로 정의하겠다.</p><img  src=http://www.plantuml.com/plantuml/svg/ixLLICx9JCqhUJDzmfkMEK1EVd6gHd5-SdPgYQR2snaxtcoRes1ho-KCLgIWQwSGd5fKbbgaOAKGxURf5wiGx1fefM1eO62We-3ex6sbeCi5LG1K2jK4L0gKWYerGYW5wZB4gXfXC52r8R9gMrk5Lnic0972wpLRthJrlEcU2tGT0000><h5 id="Half-Close"><a href="#Half-Close" class="headerlink" title="Half-Close"></a>Half-Close</h5><p>이러한 경우는 client에서 write stream만 먼저 종료시키는 Half-close 개념을 사용해서 해결할 수 있다.<br>write stream이 종료되어도 <code>close()</code>가 호출될 때, server로 ACK가 전송된다.</p><h4 id="case-2-Client가-FIN을-보낸-후-Server로부터-ACK없이-FIN을-받는-경우"><a href="#case-2-Client가-FIN을-보낸-후-Server로부터-ACK없이-FIN을-받는-경우" class="headerlink" title="case 2: Client가 FIN을 보낸 후, Server로부터 ACK없이 FIN을 받는 경우"></a>case 2: Client가 FIN을 보낸 후, Server로부터 ACK없이 FIN을 받는 경우</h4><ul><li>가능성 1 : Server측 ACK가 네트워크상 유실됨</li><li>가능성 2 : Network Congestion 등의 문제로 FIN이 ACK보다 먼저 도착</li></ul><p><strong>도식으로 나타내면 다음과 같다</strong></p><img  src=http://www.plantuml.com/plantuml/svg/Syx9JCqhKT2rKmXEBIfBBLAmKeXsy_IBLGXs3RHIC3GmCD1HS7JsjbBGvO8gqBMBK726w0Ag1Sf1rHeXr0Ar6IAK8wb6c0nKROYisXcBEn1c6o9K0pKQSUNbbwGgvAIcWGnzCtVFcmLJttJFURMXHI74qzSrFjpHCoGcxzNs7GflPxSeEFlu1xkw0000><h5 id="TIME-WAIT"><a href="#TIME-WAIT" class="headerlink" title="TIME_WAIT"></a>TIME_WAIT</h5><p>4-Way Handshake로 종료하도록 TCP는 정의되어 있다.<br><code>FIN_WAIT_1</code> 상태에서 FIN을 먼저 받을 경우, 패킷 흐름의 무결성을 지키기 위해 <code>TIME_WAIT</code>동안 패킷를 기다린다.<br>패킷이 도착하거나, <code>TIME_WAIT</code> 시간이 경과하면 <code>CLOSED</code>로 바뀐다.<br><code>TIME_WAIT</code>는 먼저 <code>FIN</code>을 호출한 쪽에서 생겨야한다!!!</p><p><strong>TCP State Diagram</strong></p><p><img src="https://upload.wikimedia.org/wikipedia/en/5/57/Tcp_state_diagram.png" alt="Tcp state Diagram"></p><p><strong>Sokcet Reuse</strong></p><p>기본적으로 <code>SO_RESUSEADDR</code>은 <code>false</code>로 설정되어 있으며,<br><code>true</code>로 설정하면 <code>TIME_WAIT</code> 상태의 포트를 사용할 수 있게 된다.</p>]]></content>
      
      <categories>
          
          <category> etc. </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mustache 공유</title>
      <link href="/2018/03/14/Mustache/"/>
      <content type="html"><![CDATA[<h1 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h1><p>Java 서버를 개발하면서 View Template Engine에 대해서 매번 고민하게 된다.</p><p>spring boot를 써보면,</p><ul><li><a href="https://docs.spring.io/spring-boot/docs/2.0.0.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-template-engines" target="_blank" rel="noopener">더 이상 JSP를 쓰지 말아야 할 것처럼 말한다</a><ul><li>boot에서 jsp를 쓸 경우 war로 만들어야 하며, WAS에 따라서 지원하지 않을 수 있다 - Tomcat만 고집한다면야…</li></ul></li><li>Velocity는 boot에서 지원하지 않는다<ul><li>너무 오랫동안 업데이트가 없다면서 뺐는데, 2017-08-06에 Velocity Engine 2.0이 나왔다</li></ul></li><li>Thymeleaf3는 여전히 느린 모양이다.</li><li>Freemarker가 그나마 가장 무난하다.</li></ul><p>위와 같이 알고 있던 중에 최신 spring 문서를 뒤져보다가, <code>script views</code>라는 게 있다는 걸 알게 되었다.<br>Handlebars, Mustache, React, Kotlin Script templating 등등의 많은 라이브러리가 있었는데, 그중에서 Mustache를 살펴보려 한다.</p><a id="more"></a><h1 id="Mustache"><a href="#Mustache" class="headerlink" title="Mustache"></a>Mustache</h1><p>Mustache는 Simple하다.<br>얼마나 Simple하냐면, 설명도 <code>Logic-less templates.</code>가 끝이다.<br>별다른 로직이 존재하지 않아서 배우는 것도 간단하다.<br><code>spring-boot</code>에서 <code>starter</code>를 지원하기 때문에 설정도 간단하게 할 수 있다.</p><p>하지만 가장 중요한 것은 <code>Logic-less</code>라는 점이다.<br>MVC 패턴으로 개발을 하다 보면, view에 로직을 구현하려는 경우를 종종 보게 된다.<br>web view를 작성하다 보면 필연적으로 JavaScript를 사용하게 되고,<br>client에서 필요한 로직을 JavaScript로 구현하게 된다.<br>개인적으로 client의 역할과 view의 역할은 분리해야 한다고 생각하며,<br>view에 로직이 구현되어 있는 경우, OOP의 5원칙 중에 SRP를 어겼다고 생각한다.</p><p>때문에 Mustache의 <code>Logic-less</code>라고 하는 점은 매우 끌리는 장점 중 하나이다.</p><h1 id="Mustache-배워보기"><a href="#Mustache-배워보기" class="headerlink" title="Mustache 배워보기"></a>Mustache 배워보기</h1><p>기본적으로 Mustache의 <a href="https://mustache.github.io/mustache.5.html" target="_blank" rel="noopener">Manual</a>을 따르며 하나씩 spring-boot와 연계해보겠다.</p><h2 id="프로젝트-의존성-설정"><a href="#프로젝트-의존성-설정" class="headerlink" title="프로젝트 의존성 설정"></a>프로젝트 의존성 설정</h2><p>spring-boot 버전 : 2.0.0.RELEASE</p><p>간편하게 만들기 : <a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line"><span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-mustache'</span>)</span><br><span class="line"><span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-webflux'</span>)</span><br><span class="line"><span class="keyword">runtime</span>(<span class="string">'org.springframework.boot:spring-boot-devtools'</span>)</span><br><span class="line">compileOnly(<span class="string">'org.projectlombok:lombok'</span>)</span><br><span class="line">testCompile(<span class="string">'org.springframework.boot:spring-boot-starter-test'</span>)</span><br><span class="line">testCompile(<span class="string">'io.projectreactor:reactor-test'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h2><p>기본설정은 <code>spring.mustache.suffix=.mustache</code>다.<br>이를 <code>.html</code>로 바꿨다. (취향)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.mustache.suffix:</span> <span class="string">.html</span></span><br></pre></td></tr></table></figure><h2 id="model"><a href="#model" class="headerlink" title="model"></a>model</h2><p><a href="https://jsonplaceholder.typicode.com/users" target="_blank" rel="noopener">Online Fake Rest Api</a>를 사용했다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> User EMPTY = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String website;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h2><table><thead><tr><th>API</th><th>URI</th><th>viewName</th></tr></thead><tbody><tr><td>목록</td><td><code>/users</code></td><td><code>/users/list</code></td></tr><tr><td>상세</td><td><code>/users/{id}</code></td><td><code>/users/detail</code></td></tr></tbody></table><p><code>spring.mustache.prefix=classpath:/templates/</code>가 기본설정이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ParameterizedTypeReference&lt;List&lt;User&gt;&gt; postsListType = <span class="keyword">new</span> ParameterizedTypeReference&lt;List&lt;User&gt;&gt;() &#123;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getList</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        Mono&lt;List&lt;User&gt;&gt; posts = WebClient.create(<span class="string">"https://jsonplaceholder.typicode.com"</span>)</span><br><span class="line">                                          .get()</span><br><span class="line">                                          .uri(<span class="string">"/users"</span>)</span><br><span class="line">                                          .retrieve()</span><br><span class="line">                                          .bodyToMono(postsListType)</span><br><span class="line">                                          .onErrorReturn(Collections.emptyList());</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">"user"</span>, posts);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/users/list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">(@PathVariable Long id, Model model)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Mono&lt;User&gt; post = WebClient.create(<span class="string">"https://jsonplaceholder.typicode.com"</span>)</span><br><span class="line">                                   .get()</span><br><span class="line">                                   .uri(<span class="string">"/users/&#123;id&#125;"</span>, id)</span><br><span class="line">                                   .retrieve()</span><br><span class="line">                                   .bodyToMono(User<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                                   .<span class="title">onErrorReturn</span>(<span class="title">User</span>.<span class="title">EMPTY</span>)</span>;</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">"user"</span>, post);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/users/detail"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="view"><a href="#view" class="headerlink" title="view"></a>view</h2><p><code>src/main/resources/templates/users/detail.html</code></p><p>User 객체의 속성을 보여준다</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    &#123;&#123;#user&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        id : &#123;&#123;id&#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        name : &#123;&#123;name&#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        phone : &#123;&#123;phone&#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        website : &#123;&#123;website&#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;&#123;/user&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="변수"><a href="#변수" class="headerlink" title="변수"></a>변수</h3><p>콧수염 두 개(<code>{{id}}</code>)로 표현한다</p><h4 id="HTML-Escape"><a href="#HTML-Escape" class="headerlink" title="HTML Escape"></a>HTML Escape</h4><p>콧수염 안의 문자열은 기본으로 HTML Escape가 적용된다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.addAttribute(<span class="string">"company"</span>, <span class="string">"&lt;b&gt;GitHub&lt;/b&gt;"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- &#123;&#123;company&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- &lt;b&gt;GitHub&lt;&#x2F;b&amp;gt</span><br></pre></td></tr></table></figure><p>unescape를 하기 위해서는</p><ul><li>괄호를 3번 중첩 시키거나 : <code>{{{ compnay }}}</code></li><li><code>&amp;</code>를 사용한다 : <code>{{& company }}</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- &#123;&#123;&#123;company&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- &lt;b&gt;GitHub&lt;&#x2F;b&gt;</span><br></pre></td></tr></table></figure><h3 id="섹션"><a href="#섹션" class="headerlink" title="섹션"></a>섹션</h3><p>섹션은 콧수염과 샵으로 표현한다(<code>{{ #post }}</code>)</p><p>섹션에 들어가는 key 타입에 따라서 표현이 달라진다</p><h4 id="False-Empty-List"><a href="#False-Empty-List" class="headerlink" title="False, Empty List"></a>False, Empty List</h4><p>key의 값이 false이거나 empty list인 경우, 해당 섹션은 표시되지 않는다</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Shown.</span><br><span class="line">&#123;&#123;#post&#125;&#125;</span><br><span class="line">Never shown!</span><br><span class="line">&#123;&#123;/person&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="Non-Empty-Lists"><a href="#Non-Empty-Lists" class="headerlink" title="Non-Empty Lists"></a>Non-Empty Lists</h4><p>key가 비어있지 않은 list인 경우 섹션 내의 내용의 반복한다</p><h5 id="GET-users-요청"><a href="#GET-users-요청" class="headerlink" title="GET /users 요청"></a><code>GET /users</code> 요청</h5><p><strong>list.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>id<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>name<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>phone<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>website<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;&#123;#user&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;phone&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;website&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;&#123;/user&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>결과</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>id<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>name<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>phone<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>website<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>Leanne Graham<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>1-770-736-8031 x56442<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>hildegard.org<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>Ervin Howell<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>010-692-6593 x09125<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>anastasia.net<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h4><p>lambda식을 실행할 수 있다</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;#user&#125;&#125;</span><br><span class="line">  &#123;&#123;#doubled&#125;&#125;</span><br><span class="line">    &#123;&#123;name&#125;&#125;</span><br><span class="line">  &#123;&#123;/doubled&#125;&#125;</span><br><span class="line">&#123;&#123;/user&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LayoutAdvice</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ModelAttribute</span>(<span class="string">"doubled"</span>)</span><br><span class="line">    <span class="keyword">public</span> Mustache.<span class="function">Lambda <span class="title">doubled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (frag, out) -&gt; &#123;</span><br><span class="line">            String bodyString = frag.execute();</span><br><span class="line">            out.append(bodyString)</span><br><span class="line">               .append(bodyString);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>결과</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 이름이 Leanne Graham인 경우 --&gt;</span></span><br><span class="line">Leanne GrahamLeanne Graham</span><br></pre></td></tr></table></figure><p>lambda식은 아래 interface를 구현해서 만들 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lambda</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">execute</span> <span class="params">(Template.Fragment frag, Writer out)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>frag.execute()</code> : 내부의 표현식을 실행한 후 String으로 반환한다.</li><li><code>frag.context()</code> : 상위 오브젝트(여기서는 User)를 가져온다.</li><li><code>frag.context(int n)</code> : n번째 상위 오브젝트를 가져온다.</li></ul><blockquote><p>이러한 기능을 제공하나, 행여나 view에서 serivce logic을 작성하지는 말자.</p></blockquote><h4 id="False값이-아닌-경우"><a href="#False값이-아닌-경우" class="headerlink" title="False값이 아닌 경우"></a>False값이 아닌 경우</h4><p>list도 아니고, false도 아니라면 이를 block을 가진 context(즉 object)로 간주한다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.addAttribute(<span class="string">"user"</span>, <span class="keyword">new</span> User(<span class="string">"abc"</span>));</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;#user&#125;&#125;</span><br><span class="line">  Hello, &#123;&#123;name&#125;&#125;!</span><br><span class="line">&#123;&#123;/user&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>결과</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, abc!</span><br></pre></td></tr></table></figure><h4 id="Inverted-Section"><a href="#Inverted-Section" class="headerlink" title="Inverted Section"></a>Inverted Section</h4><p>섹션에 논리 부정 연산자(<code>!</code>)가 붙은 격이다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.addAttribute(<span class="string">"users"</span>, Collections.emptyList());</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;#users&#125;&#125;</span><br><span class="line">  &#123;&#123;name&#125;&#125;</span><br><span class="line">&#123;&#123;/users&#125;&#125;</span><br><span class="line">&#123;&#123;^users&#125;&#125;</span><br><span class="line">  No users...</span><br><span class="line">&#123;&#123;/users&#125;</span><br></pre></td></tr></table></figure><p><strong>결과</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No users...</span><br></pre></td></tr></table></figure><h4 id="주석"><a href="#주석" class="headerlink" title="주석"></a>주석</h4><p><code>{{! ignore me }}</code></p><h4 id="Partials"><a href="#Partials" class="headerlink" title="Partials"></a>Partials</h4><p><code>{{>users/list-item}}</code>과 같이, 외부 문서를 불러올 수 있다.</p><p><code>GET /users</code></p><p><strong>src/main/resources/templates/users/list.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>id<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>name<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>phone<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>website<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>doubled name<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;&#123;#user&#125;&#125;</span><br><span class="line">        &#123;&#123;&gt;users/list-item&#125;&#125;</span><br><span class="line">        &#123;&#123;/user&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>src/main/resources/templates/users/list-item.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;phone&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;website&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;#doubled&#125;&#125;&#123;&#123;name&#125;&#125;&#123;&#123;/doubled&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Delimter"><a href="#Delimter" class="headerlink" title="Delimter"></a>Delimter</h4><p>콧수염(<code>{{ }}</code>) 을 다른 기호로 바꿀 때 사용한다</p><p><strong>콧수염을 <code>&lt;% %&gt;</code>로</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; name &#125;&#125;</span><br><span class="line">&#123;&#123;=<span class="tag">&lt;<span class="name">%</span> %&gt;</span>=&#125;&#125; <span class="comment">&lt;!-- 변환 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">name</span> %&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring-Boot-Property"><a href="#Spring-Boot-Property" class="headerlink" title="Spring Boot Property"></a>Spring Boot Property</h2><p>기본으로 설정되어 있는 Property와 기본값은 다음과 같다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># HttpServletRequest의 attribute를 Controller에서 생성한 동일한 이름의 model attribute로 덮어 쓸 수 있는지 여부</span><br><span class="line">spring.mustache.allow-request-override&#x3D;false </span><br><span class="line"></span><br><span class="line"># HttpSession의 attribute를 Controller에서 생성한 동일한 이름의 model attribute로 덮어 쓸 수 있는지 여부</span><br><span class="line">spring.mustache.allow-session-override&#x3D;false </span><br><span class="line"></span><br><span class="line">spring.mustache.cache&#x3D;false </span><br><span class="line">spring.mustache.charset&#x3D;UTF-8</span><br><span class="line">spring.mustache.check-template-location&#x3D;true</span><br><span class="line">spring.mustache.content-type&#x3D;text&#x2F;html</span><br><span class="line">spring.mustache.enabled&#x3D;true</span><br><span class="line"></span><br><span class="line"># 모든 request attribute를 template에 병합하기 전 포함시켜야하는 지 여부</span><br><span class="line">spring.mustache.expose-request-attributes&#x3D;false</span><br><span class="line"># 모든 session attribute를 template에 병합하기 전 포함시켜야하는 지 여부</span><br><span class="line">spring.mustache.expose-session-attributes&#x3D;false</span><br><span class="line"># RequestContext를 노출할지 여부(&quot;springMacroRequsetContext&quot;라는 이름의 spring macro library에 의해 설정됨)</span><br><span class="line"># &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#123;&#123;springMacroRequestContext.request.contextPath&#125;&#125;&#x2F;assets&#x2F;app.css&quot;&gt;</span><br><span class="line">spring.mustache.expose-spring-macro-helpers&#x3D;true</span><br><span class="line"></span><br><span class="line">spring.mustache.prefix&#x3D;classpath:&#x2F;templates&#x2F; </span><br><span class="line"># 전체 view에서 사용할 RequestContext의 이름(키)</span><br><span class="line">spring.mustache.request-context-attribute&#x3D;</span><br><span class="line"># viewname의 접미사</span><br><span class="line">spring.mustache.suffix&#x3D;.mustache</span><br><span class="line"># 처리할 view name의 white list</span><br><span class="line">spring.mustache.view-names&#x3D;</span><br></pre></td></tr></table></figure><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>script 기반의 view template engine인 mustache에 대해서 알아보았다.</p><p>여타 다른 엔진에 비해서 제공하는 기능은 훨씬 적다.<br>하지만 간단하고 배우기 쉬우며, spring boot와 통합도 제공한다.</p><p><a href="https://github.com/jreijn/spring-comparing-template-engines" target="_blank" rel="noopener">2015년 기준</a>으로 Freemarker나 Velocity에 견줄 수 있을 정도의 속도가 나왔다고 한다.<br>물론 이런 종류의 테스트는 최적화를 위해서는 더 다양한 케이스를 테스트해 봐야겠지만, 생각보다 훨씬 빠르다는 것에 다시 놀랐다.</p><p>logic-less의 view를 구현하고, client의 logic을 node나 전담 front-server에서 구현할 수 있다면, 꽤 괜찮은 솔루션이라 생각된다.</p><p>소스 코드 : <a href="https://github.com/supawer0728/simple-mustache" target="_blank" rel="noopener">https://github.com/supawer0728/simple-mustache</a></p>]]></content>
      
      
        <tags>
            
            <tag> view template engine </tag>
            
            <tag> view </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring에서 요청에 따른 부가 응답 추가하기(3) - webflux 적용</title>
      <link href="/2018/03/11/Spring-request-model3/"/>
      <content type="html"><![CDATA[<h1 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h1><p>앞서 개발한 소스는 <code>spring-webmvc</code>로 작성했었다. 이번에는 Reactive Programming을 본격적으로 사용하며, non-blocking 동작을 지원하는 <code>spring-webflux</code>를 사용해서 이전까지의 소스를 포팅해보려고 한다.</p><a id="more"></a><h1 id="spring-webflux"><a href="#spring-webflux" class="headerlink" title="spring-webflux"></a>spring-webflux</h1><table><thead><tr><th><img src="https://docs.spring.io/spring/docs/5.0.0.BUILD-SNAPSHOT/spring-framework-reference/html/images/webflux-overview.png" alt="image1"></th></tr></thead><tbody><tr><td><em>출처 : <a href="https://docs.spring.io/spring/docs/5.0.0.BUILD-SNAPSHOT/spring-framework-reference/html/images/webflux-overview.png" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/5.0.0.BUILD-SNAPSHOT/spring-framework-reference/html/images/webflux-overview.png</a></em></td></tr></tbody></table><p><code>spring-webflux</code>를 두가지 개발 모델을 지원한다. 하나는 기존의 <code>spring-webmvc</code>에서 사용했던 것과 마찬가지로 <code>@Controller</code> 등의 어노테이션을 이용한 개발 모델이다. 또 하나는 Java8의 함수형 람다 방식으로 rounter와 handler를 사용하는 하는 방식이다. 새로운 모듈인 <code>spring-webflux</code>을 사용하는 만큼 기존의 방식보다는 <code>Functional Endpoints</code> 기반으로 작성을 해보려고 한다.</p><p><code>spring-webflux</code>에 대해서 간단히 알아보자.</p><p>왜 spring에서는 이 모듈을 만들었을까? Spring Reference의 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-new-framework" target="_blank" rel="noopener">Motivation</a>챕터를 읽어보자</p><blockquote><p>그 이유 중 하나는 더 적은 하드웨어 자원으로 스케일링하고, 더 적은 thread로 동시성을 처리할 수 있는 non-blocking web stack이 필요했기 때문이다. Servlet 3.1은 non-blocking I/O에 대한 API를 제공했다. 하지만 non-blocking API를 사용하므로써, Filter, Servlet 등의 동기화나 getParameter, getPart 등의 blocking을 API을 사용하지 못하게 되었다. 이는 곧 non-blocking이 기반이 되는 새로운 공통 API가 필요한 이유가 되었다.</p><p>또 다른 이유로 함수형 프로그래밍을 들 수 있다. 마치 Java5에서 애노테이션이 등장해서 많은 기회를 창출했던 것처럼 - 예컨대 REST controller나, unit test를 애노테이션을 선언해서 쓸 수 있게 된 것처럼 Java8에서 추가된 람다표현식은 Java에 함수형 API를 사용할 수 있는 기회를 가져왔다. 비동기 로직을 선언적으로 구성할 수 있도록 해주는 continuation style API(<code>CompletableFuture, ReactiveX</code>)와 non-blocking application을 사용함에 있어서 요긴하게 쓸 수 있다. 프로그래밍 모델의 관점에서 Java8은 Spring Webflux로 하여금 기존과 같은 <code>@Controller</code> 애노테이션을 통한 컨트롤러 등록과 함수형 웹 엔드포인트를 동시에 제공할 수 있게끔 해주었다.</p><p><strong>Spring Reference</strong> - <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-new-framework" target="_blank" rel="noopener">Web Reactive 1.1.1. Motivation</a></p></blockquote><p>위 글에서 <code>spring-webflux</code> 모듈이 나온 이유를 정리하자면 다음과 같다.</p><ul><li>non-blocking I/O를 지원하는 공통 API가 필요하기 때문</li><li>함수형 프로그래밍 스타일로 소스에서 reactive programming의 pipeline을 선언적으로 작성할 수 있게 됨</li></ul><p>Spring5부터 <code>spring-webflux</code> 모듈이 나와서, 앞으로는 Web Application을 개발할 때 기존의 <code>spring-webmvc</code>와 어느 것을 사용해야할 지 고민하게 될 것 같다. 이에 대해서 Spring Reference에서 이야기하는 내용을 잠깐 살펴보자.</p><blockquote><p>여러분이 사용하는 Spring MVC 어플리케이션이 잘 동작한다면 굳이 바꿀 필요가 없다. 명령형 프로그래밍은 코드를 작성, 이해, 디버깅하는 데에 있어서 가장 쉬운 방법이다. 대부분의 라이브러리는 명령형이며, 그 중에서 우리가 필요한 것을 고르면 된다.</p><p>framework를 고를 기준 중 하나는, 의존성을 확인하는 것이다. 만약 blocking 방식의 persistence API(JPA, JDBC)나 network API를 사용한다면 <code>spring-mvc</code>가 적합한 선택이 될 것이다. <code>Reactor</code>나 <code>RxJava</code>를 사용해서 분리된 thread에서 blocking api를 호출할 수는 있겠으나, non-blocking web stack을 최대한으로 활용하기는 어렵다.</p><p>Spring MVC application에 원격 서비스를 호출하는 일이 있다면, Reactive WebClient를 사용해볼 것을 권장한다. Spring MVC 컨트롤러 메서드에서 reative 타입(Reactor, RxJava, etc.)를 직접 반환할 수 있다. 호출 당 지연이 길수록, 호출 간 상호 의존이 클수록, 더 큰 이득을 볼 수 있다.</p><p>팀의 규모가 클 경우, non-blocking, 함수형, 선언적 프로그래밍의 학습 곡선이 가파르다는 것을 염두에 두어야 한다. 현실적으로 Reactive WebClient를 적용해보는 것부터 시작하는 것을 권장한다. 그 후에 작은 프로젝트에 적용해보고, 이점을 확인해 나가기 바란다. </p><p>어떠한 이점이 있는지 찾을 수 없을 때에는, non-blocking I/O가 어떻게 동작하며, 어떠한 효과를 볼 수 있는지 배우길 바란다.</p><p><strong>Spring Reference</strong> - <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-framework-choice" target="_blank" rel="noopener">Web Reactive 1.1.5. Applicability</a></p></blockquote><h1 id="기본-api-작성"><a href="#기본-api-작성" class="headerlink" title="기본 api 작성"></a>기본 api 작성</h1><h2 id="의존성"><a href="#의존성" class="headerlink" title="의존성"></a>의존성</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">  <span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-webflux'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BoardHandler-작성"><a href="#BoardHandler-작성" class="headerlink" title="BoardHandler 작성"></a>BoardHandler 작성</h2><p><code>spring-mvc</code>의 Controller와 대응되는 Handler를 작성해보자</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoardHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BoardRepository boardRepository;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BoardDtoConverter boardDtoConverter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BoardHandler</span><span class="params">(@NonNull BoardRepository boardRepository,</span></span></span><br><span class="line"><span class="function"><span class="params">                        @NonNull BoardDtoConverter boardDtoConverter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.boardRepository = boardRepository;</span><br><span class="line">        <span class="keyword">this</span>.boardDtoConverter = boardDtoConverter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">getBoard</span><span class="params">(ServerRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> boardId = Long.valueOf(request.pathVariable(<span class="string">"id"</span>));</span><br><span class="line">        Mono&lt;ServerResponse&gt; notFound = ServerResponse.notFound().build();</span><br><span class="line">        Mono&lt;Board&gt; boardMono = boardRepository.findOne(boardId);</span><br><span class="line">        Mono&lt;BoardDto&gt; boardDtoMono = boardMono.map(boardDtoConverter::convert);</span><br><span class="line">        <span class="keyword">return</span> boardDtoMono.flatMap(boardDto -&gt; ServerResponse.ok()</span><br><span class="line">                                                             .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">                                                             .body(fromObject(boardDto))</span><br><span class="line">                                                             .switchIfEmpty(notFound));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BoardRepository"><a href="#BoardRepository" class="headerlink" title="BoardRepository"></a>BoardRepository</h2><p>JPA, JDBC의 API는 blocking으로 동작한다. 우선은 임시로 아래와 같이 repository를 작성했다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoardRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> generatedId = <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Long, Board&gt; boardMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAll</span><span class="params">(List&lt;Board&gt; boards)</span> </span>&#123;</span><br><span class="line">        boards.forEach(board -&gt; &#123;</span><br><span class="line">            board.setId(++generatedId);</span><br><span class="line">            boardMap.put(board.getId(), board);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Board&gt; <span class="title">findOne</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.just(boardMap.get(id));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="WebConfig"><a href="#WebConfig" class="headerlink" title="WebConfig"></a>WebConfig</h2><p>요청을 handler로 routing해주는 routerFunction을 등록한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebFlux</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">DelegatingWebFluxConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BoardHandler boardHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RouterFunction&lt;?&gt; boardRouter() &#123;</span><br><span class="line">        <span class="keyword">return</span> route(GET(<span class="string">"/boards/&#123;id&#125;"</span>).and(accept(APPLICATION_JSON)), boardHandler::getBoard);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Interceptor-AOP"><a href="#Interceptor-AOP" class="headerlink" title="Interceptor, AOP"></a>Interceptor, AOP</h1><p>기존에는 Interceptor에서 request의 <code>attachment</code>를 해석하고, AOP에서 응답에 추가를 해줬었는데 지금은 그럴 수가 없다.</p><p><strong>Interceptor</strong></p><ul><li><code>spring-webflux</code>에는 <code>HandlerInterceptor</code>가 없다</li><li><code>RouterFunction</code>에 <code>HandlerFilterFunction</code>을 붙여서 처리하자</li></ul><p><strong>AOP</strong></p><p>Handler에서는 <code>Mono&lt;ServerResponse&gt;</code>를 반환하고 있다. 문제는 이 <code>ServerResponse</code>라는 객체 내부의 body를 바꿀 수가 없다. 때문에 Handler 내에서 <code>boardDto</code>에 모델을 추가하든지, 아니면 <code>BoardService</code>와 같이 Service 계층의 클래스를 두고 거기에 AOP를 걸든지 해야할 것 같다.</p><p>우선 부가 정보 추가를 Handler 내부에서 처리해보자. 핵심 로직은 추후에 따로 옮겨도 될 것이다.</p><h1 id="AttachmentHandlerFilter"><a href="#AttachmentHandlerFilter" class="headerlink" title="AttachmentHandlerFilter"></a>AttachmentHandlerFilter</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AttachmentHandlerFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TARGET_ATTRIBUTE_NAME = <span class="string">"attachment"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TARGET_QUERY_PARAM_NAME = <span class="string">"attachment"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TARGET_DELIMITER = <span class="string">","</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HandlerFilterFunction&lt;ServerResponse, ServerResponse&gt; <span class="title">filter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (request, next) -&gt; &#123;</span><br><span class="line">            Set&lt;AttachmentType&gt; attachmentTypes = resolveAttachmentType(request);</span><br><span class="line">            request.attributes().put(TARGET_ATTRIBUTE_NAME, <span class="keyword">new</span> AttachmentTypeHolder(attachmentTypes));</span><br><span class="line">            <span class="keyword">return</span> next.handle(request);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Set&lt;AttachmentType&gt; <span class="title">resolveAttachmentType</span><span class="params">(ServerRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.queryParam(TARGET_QUERY_PARAM_NAME)</span><br><span class="line">                      .map(attachments -&gt; Stream.of(attachments.split(TARGET_DELIMITER))</span><br><span class="line">                                                .map(AttachmentType::fromCaseIgnoredName)</span><br><span class="line">                                                .filter(Objects::nonNull)</span><br><span class="line">                                                .collect(Collectors.toSet()))</span><br><span class="line">                      .orElse(Collections.emptySet());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>처음에는 <code>AttachmentHandlerFilter</code>가 <code>HandlerFilterFunction</code>을 구현하도록 했었으나, 형안전성을 잡는게 어려워 Closure처럼 반환하도록 하였다. 해당 필터를 거쳐 request에 <code>AttachmentTypeHolder</code>가 존재하도록 attribute를 추가했다.</p><h1 id="HandlerFilterFunction-등록"><a href="#HandlerFilterFunction-등록" class="headerlink" title="HandlerFilterFunction 등록"></a>HandlerFilterFunction 등록</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RouterFunction&lt;?&gt; boardRouter() &#123;</span><br><span class="line">    <span class="keyword">return</span> route(GET(<span class="string">"/boards/&#123;id&#125;"</span>).and(accept(APPLICATION_JSON)), boardHandler::getBoard).filter(attachmentFilter.filter());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="BoardHandler-수정"><a href="#BoardHandler-수정" class="headerlink" title="BoardHandler 수정"></a>BoardHandler 수정</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoardHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BoardRepository boardRepository;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BoardDtoConverter boardDtoConverter;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AttachExecutor attachExecutor;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Mono&lt;ServerResponse&gt; notFound = ServerResponse.notFound().build();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BoardHandler</span><span class="params">(@NonNull BoardRepository boardRepository,</span></span></span><br><span class="line"><span class="function"><span class="params">                        @NonNull BoardDtoConverter boardDtoConverter,</span></span></span><br><span class="line"><span class="function"><span class="params">                        @NonNull AttachExecutor attachExecutor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.boardRepository = boardRepository;</span><br><span class="line">        <span class="keyword">this</span>.boardDtoConverter = boardDtoConverter;</span><br><span class="line">        <span class="keyword">this</span>.attachExecutor = attachExecutor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">getBoard</span><span class="params">(ServerRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> boardId = Long.valueOf(request.pathVariable(<span class="string">"id"</span>));</span><br><span class="line">        <span class="comment">// 좀더 NPE나 형안전성 관련해서 강하게 제약을 할 수 있으면 좋을텐데...</span></span><br><span class="line">        AttachmentTypeHolder typeHolder = request.attribute(TARGET_ATTRIBUTE_NAME)</span><br><span class="line">                                                 .map(AttachmentTypeHolder.class::cast)</span><br><span class="line">                                                 .orElseGet(() -&gt; <span class="keyword">new</span> AttachmentTypeHolder(Collections.emptySet()));</span><br><span class="line">        Mono&lt;Attachable&gt; attachableMono =</span><br><span class="line">                boardRepository.findOne(boardId)</span><br><span class="line">                               .map(boardDtoConverter::convert)</span><br><span class="line">                               .flatMap(boardDto -&gt; attachExecutor.attach(boardDto, typeHolder));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> attachableMono.flatMap(boardDto -&gt; ServerResponse.ok()</span><br><span class="line">                                                                .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">                                                                .body(fromObject(boardDto))</span><br><span class="line">                                                                .switchIfEmpty(notFound));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AttachmentTypeHolder</code>를 꺼내어서 <code>AttachExecutor</code>로 보내, 부가정보를 추가하고 <code>Mono&lt;Attachable&gt;</code>을 반환한다.<br><code>AttachExecutor</code>는 이전의 <code>AttachmentAspect</code>에서 하던 일을 수행한다.</p><h1 id="AttachService와-그-구현체들"><a href="#AttachService와-그-구현체들" class="headerlink" title="AttachService와 그 구현체들"></a>AttachService와 그 구현체들</h1><p>바뀐게 없다. 그대로 사용할 수 있다.</p><h1 id="AttachExecutor"><a href="#AttachExecutor" class="headerlink" title="AttachExecutor"></a>AttachExecutor</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AttachExecutor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;AttachmentType, List&lt;AttachService&lt;? extends Attachable&gt;&gt;&gt; typeToServiceMap;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AttachExecutor</span><span class="params">(@NonNull List&lt;AttachService&lt;? extends Attachable&gt;&gt; attachService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.typeToServiceMap = attachService.stream()</span><br><span class="line">                                             .collect(Collectors.groupingBy(AttachService::getSupportAttachmentType, Collectors.toList()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Attachable&gt; <span class="title">attach</span><span class="params">(Attachable attachable, AttachmentTypeHolder holder)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (holder.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> Mono.just(attachable);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> executeAttach(attachable, holder.getTypes());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Mono&lt;Attachable&gt; <span class="title">executeAttach</span><span class="params">(Attachable attachable, Set&lt;AttachmentType&gt; types)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Mono&lt;AttachmentWrapperItem&gt;&gt; monoItems = createMonoList(attachable, types);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1. block()을 호출하지 않는다</span></span><br><span class="line">        <span class="keyword">return</span> Mono.zip(monoItems, <span class="keyword">this</span>::filterItems)</span><br><span class="line">                   .map(attachable::attach)</span><br><span class="line">                   .doOnError(e -&gt; log.warn(e.getMessage(), e))</span><br><span class="line">                   .onErrorReturn(attachable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Mono&lt;AttachmentWrapperItem&gt;&gt; createMonoList(Attachable attachable, Set&lt;AttachmentType&gt; types) &#123;</span><br><span class="line">        <span class="keyword">return</span> types.stream()</span><br><span class="line">                    .flatMap(type -&gt; typeToServiceMap.get(type).stream())</span><br><span class="line">                    .filter(service -&gt; service.getSupportType().isAssignableFrom(attachable.getClass()))</span><br><span class="line">                    .map(service -&gt; service.getAttachment(attachable))</span><br><span class="line">                    .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;AttachmentWrapperItem&gt; <span class="title">filterItems</span><span class="params">(Object[] itemArray)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.of(itemArray)</span><br><span class="line">                     .map(AttachmentWrapperItem.class::cast)</span><br><span class="line">                     .filter(item -&gt; item != AttachmentWrapperItem.ON_ERROR)</span><br><span class="line">                     .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>1.</code> 주석을 단 곳의 내용이 핵심적인 차이점이다. 기존의 <code>AttachmentAspect</code>에서는 <code>block()</code>을 호출해서 <code>List&lt;AttachmentWrapperItem&gt;</code>을 <code>실행 후</code> 취합했다. 하지만 여기서는 실행의 흐름(<code>Data Flow</code>)을 pipeline으로 선언만하고 넘어간다.</p><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>이전까지 <code>spring-webmvc</code>로 작업한 내용을 <code>spring-webflux</code>로 포팅해보았다. blocking을 non-blocking으로 바꾸었다는 것이 가장 중요하다.</p><p>앞서 설명한 바와 같이 아직까지 JDBC, JPA 등을 non-blocking으로 호출하지 못하기에 이러한 호출이 있는 Application에는 적용하지 못한다. 그 외에, api-gateway와 같은 역할을 하거나, 원격 서비스 호출이 주를 이루는 Application을 작성할 때에는 <code>spring-webflux</code>를 유용하게 시도해볼 수 있을 것 같다.</p><p>소스코드 : <a href="https://github.com/supawer0728/simple-attachment/tree/apply-webflux" target="_blank" rel="noopener">https://github.com/supawer0728/simple-attachment/tree/apply-webflux</a></p>]]></content>
      
      <categories>
          
          <category> spring </category>
          
          <category> practice </category>
          
          <category> practice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> webflux </tag>
            
            <tag> non-blocking </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Property 관리</title>
      <link href="/2018/03/11/Spring-Property/"/>
      <content type="html"><![CDATA[<h1 id="Spring-boot-enviroment-abstraction"><a href="#Spring-boot-enviroment-abstraction" class="headerlink" title="Spring boot enviroment abstraction"></a>Spring boot enviroment abstraction</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>classpath 내의 application.properties(yml)을 사용하여 어플리케이션에서 사용할 프로퍼티를 정의할 수 있다.</p><a id="more"></a><h2 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h2><p>Srping boot enviroment abstraction은 다음 순서로 application.properties를 검색한다</p><ol><li>현재 위치에서 /config 디렉토리</li><li>현재 위치</li><li>classpath 내의 /config 패키지</li><li>classpath 내의 루트</li></ol><blockquote><p>properties 파일을 대체하여 YAML file(.yml)을 사용할 수 있다.</p></blockquote><p>application.properties라는 이름 외의 다른 이름을 사용하고자 한다면 JVM 환경을 설정하여 변경할 수 있다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java -jar myproject.jar --spring.config.name=myproject</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> java -jar myproject.jar --spring.config.location=classpath:/default.properties,classpath:/override.properties</span></span><br></pre></td></tr></table></figure><h2 id="Profile-specific-properties"><a href="#Profile-specific-properties" class="headerlink" title="Profile-specific properties"></a>Profile-specific properties</h2><p><code>application-{profile}.properties(.yml)</code>의 네이밍 컨벤션을 가진 properties 파일로 profile별로 사용할 수 있다.</p><p>복수의 profile이 적용이 된다면 last wins 전략이 사용된다.</p><p><code>spring.config.location</code>이 사용된 경우 <code>profile-specific properties</code> 전략은 무시된다.</p><h2 id="Placeholder-in-properties"><a href="#Placeholder-in-properties" class="headerlink" title="Placeholder in properties"></a>Placeholder in properties</h2><p>application.properties 내의 값은 이전의 정의된 값을 참조할 수 있다.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">app.name</span>=<span class="string">MyApp</span></span><br><span class="line"><span class="meta">app.description</span>=<span class="string">$&#123;app.name&#125; is a Spring Boot application</span></span><br></pre></td></tr></table></figure><h1 id="properties"><a href="#properties" class="headerlink" title=".properties"></a>.properties</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># spring</span><br><span class="line">spring.server.port&#x3D;8080</span><br><span class="line">spring.server.domain&#x3D;www.example.com</span><br><span class="line"> </span><br><span class="line"># jdbc</span><br><span class="line">jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;0.0.0.1:3306&#x2F;example?a&#x3D;b&amp;c&#x3D;d</span><br><span class="line">jdbc.username&#x3D;root</span><br><span class="line">jdbc.password&#x3D;root</span><br><span class="line"> </span><br><span class="line"># list</span><br><span class="line">list[0]&#x3D;a</span><br><span class="line">list[1]&#x3D;b</span><br><span class="line">list[2]&#x3D;c</span><br></pre></td></tr></table></figure><h2 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h2><ul><li>escape문자열 필요 없다.</li><li>선언부가 필요 없다.</li><li>단순하다.</li></ul><h2 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h2><ul><li>가독성이 떨어질 수 있다.</li><li>키-값 1:1 매칭</li></ul><h1 id="xml"><a href="#xml" class="headerlink" title=".xml"></a>.xml</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">properties</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://java.sun.com/dtd/properties.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- srping --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"spring.server.port"</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"spring.server.domain"</span>&gt;</span>www.example.com<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- jdbc --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"jdbc.url"</span>&gt;</span>jdbc:mysql://0.0.0.1:3306/example?a=b<span class="symbol">&amp;amp;</span>c=d<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"jdbc.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"jdbc.password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">&lt;!-- list --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"color"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">key</span>=<span class="string">"r"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">key</span>=<span class="string">"g"</span>&gt;</span>100<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">key</span>=<span class="string">"b"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="장점-1"><a href="#장점-1" class="headerlink" title="장점"></a>장점</h2><ul><li>1:N 형식 매핑이 가능하다.</li></ul><h2 id="단점-1"><a href="#단점-1" class="headerlink" title="단점"></a>단점</h2><ul><li>선언부(<code>&lt;!DOCTYPE...&gt;</code>)가 존재한다.</li><li>쳐야하는 문자 수가 많다(혹은 반복되는 ctrl+c, ctrl+v, 심지어 주석 처리에도…)</li><li>가독성(escape문자)이 떨어진다.</li></ul><h1 id="yml"><a href="#yml" class="headerlink" title=".yml"></a>.yml</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># spring</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">domain:</span> <span class="string">www.example.com</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># jdbc</span></span><br><span class="line"><span class="attr">jdbc:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">jdbc:mysql://0.0.0.1:3306/example?a=b&amp;c=d</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># list</span></span><br><span class="line"><span class="attr">list:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">apple</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">banana</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">orange</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># profiles</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">profiles:</span> <span class="string">develop</span></span><br><span class="line"><span class="attr">jdbc:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">dev1</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">profiles:</span> <span class="string">release</span></span><br><span class="line"><span class="attr">jdbc:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">release1</span></span><br></pre></td></tr></table></figure><h2 id="장점-2"><a href="#장점-2" class="headerlink" title="장점"></a>장점</h2><ul><li>escape 문자열 필요 없다</li><li>1:N 형식 매핑이 가능하다</li><li>선언부가 없다.</li><li>profile과 관련해서 spring의 지원을 받을 수 있다.</li></ul><h2 id="단점-2"><a href="#단점-2" class="headerlink" title="단점"></a>단점</h2><ul><li>생소함?(학습비용?)</li></ul><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html#boot-features-external-config-yaml" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html#boot-features-external-config-yaml</a></p><h1 id="Spring-Profile"><a href="#Spring-Profile" class="headerlink" title="Spring Profile"></a>Spring Profile</h1><p><strong>jvm 옵션, spring boot 실행 명령에 추가</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.profiles.active&#x3D;dev(local,dev,test 등)</span><br></pre></td></tr></table></figure><p><strong>xml bean 설정</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">profile</span>=<span class="string">"local"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"aesCrypto"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"privateKeyPath"</span>&gt;</span>/a/a.cert<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"publicKeyPath"</span>&gt;</span>/a/b.cert<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">profile</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"aesCrypto"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"privateKeyPath"</span>&gt;</span>/c/c.cert<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"publicKeyPath"</span>&gt;</span>/c/d.cert<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beasn</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> spring </category>
          
          <category> reference </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> reference </tag>
            
            <tag> spring-boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring에서 요청에 따른 부가 응답 추가하기(2) - reactor 적용</title>
      <link href="/2018/03/11/Spring-request-model2/"/>
      <content type="html"><![CDATA[<h1 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h1><p>앞 번에 개발한 소스에는 두 가지 문제점이 있었다</p><ol><li>Network I/O를 순차 실행<ul><li>O(n) 시간이 걸림 : timeout * attachment 갯수</li><li>Async로 O(1)만에 끝내도록 튜닝 필요</li></ul></li><li>Failover<ul><li>attachment는 단순 부가 정보임에도 불구하고 attachmentService에서 exception이 발생하면, 아무 정보도 내려줄 수 없음</li><li>attach는 실패해도 Board 정보와 나머지 성공한 attachment는 보여줘야 함</li></ul></li></ol><p>이번에는 위 이슈들을 reactor를 사용해서 해결해보려 한다.</p><img  src=http://www.plantuml.com/plantuml/svg/Y_RDJyhCIOrLqDMrKuXsoayiIWbEBIfBBOhbGk4fw9OMW5J0b5iflEwP_6f70rTqU6gIWbDHVdanM1Lnfg3eWHcbysRRb3URvkYycJVnJSl6D_CceEi5wNJEpyrDpIk1YLaf91PNvYLZKncKcWnMcqA4Mj_KtAJK8ZI5EWflkfUyxLa10000><a id="more"></a><h1 id="Reactor"><a href="#Reactor" class="headerlink" title="Reactor"></a>Reactor</h1><p>우선 왜 reactor를 사용하는 가에 대해서 간략하게 정리해보자</p><ul><li>Rx(Reactive Extension)를 구현하여 쉽게 비동기 프로그래밍 가능</li><li>또 다른 Rx 구현체인 RxJava와 비교했을 때, 다음의 장점이 있음<ul><li>Spring5에 통합하기 쉬움</li><li>Java8에 대한 지원<ul><li>rxJava는 1.6버전부터 쓸 수 있으며 자체적으로 <code>Function</code>을 구현해서 사용</li><li>Reactor는 Java8부터 쓸 수 있으며 Java8 Api와 Optional 등을 지원</li></ul></li></ul></li></ul><p>여기서 Reactor API에 대한 기초적인 사항들은 다루지 않으려 한다. 참고로 reactor는 Java 버전에 영향을 받는다. 본문의 소스는 Spring 5에서 작성되었지만 Java8을 사용한다면 아래 소스를 Spring4에 적용해도 문제없이 동작해야 한다.</p><h1 id="AttachmentWrapperItem"><a href="#AttachmentWrapperItem" class="headerlink" title="AttachmentWrapperItem"></a>AttachmentWrapperItem</h1><p>본격적으로 이슈를 해결하기 전에 먼저 한가지 리팩토링을 해야한다. 이전의 내용을 잠깐 살펴보자. <code>BoardDto</code>는 아래와 같이 <code>AttachmentWrapper</code>를 가지고 있다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@JsonInclude</span>(JsonInclude.Include.NON_NULL)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoardDto</span> <span class="keyword">implements</span> <span class="title">Attachable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Setter</span>(AccessLevel.PRIVATE)</span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> AttachmentWrapper attachmentWrapper = <span class="keyword">new</span> AttachmentWrapper();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AttachmentWrapper</code>는 <code>AttachmentType</code>과 <code>Attachment</code>를 따로 받고 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AttachmentWrapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(AttachmentType type, Attachment attachment)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>reactor를 사용하게 되면 <code>Mono&lt;T&gt;</code>, <code>Flux&lt;T&gt;</code>와 같이 Generic으로 표현할 수 있도록 <code>AttachmentType</code>과 <code>Attachment</code>를 하나로 묶는 <code>AttachmentWrapperItem</code> 클래스를 작성하고 이를 <code>AttachmentWrapper</code>에 반영해야한다.</p><p><strong>AttachmentWrapperItem</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AttachmentWrapperItem</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 예외 발생시 반환할 인스턴스</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> AttachmentWrapperItem ON_ERROR = <span class="keyword">new</span> AttachmentWrapperItem(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">private</span> AttachmentType type;</span><br><span class="line">    <span class="keyword">private</span> Attachment attachment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>AttachmentWrapper 적용</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AttachmentWrapper</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">AttachmentMap</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        Set&lt;Map.Entry&lt;AttachmentType, Attachment&gt;&gt; entrySet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delegate</span>(types = AttachmentMap<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">Map</span>&lt;<span class="title">AttachmentType</span>, <span class="title">Attachment</span>&gt; <span class="title">value</span> </span>= <span class="keyword">new</span> EnumMap&lt;&gt;(AttachmentType<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putAll</span><span class="params">(Collection&lt;AttachmentWrapperItem&gt; items)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value.putAll(items.stream().collect(Collectors.toMap(AttachmentWrapperItem::getType, AttachmentWrapperItem::getAttachment)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Attachable interface 변경</strong></p><p>기존의 두 개의 파라미터를 받던 것을 하나의 파라미터를 받도록 변경한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 변경 전</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Attachable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Map&lt;? extends AttachmentType, ? extends Attachment&gt; attachment)</span> </span>&#123;</span><br><span class="line">        getAttachmentWrapper().putAll(attachment);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 변경 후</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Attachable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Collection&lt;AttachmentWrapperItem&gt; items)</span> </span>&#123;</span><br><span class="line">        getAttachmentWrapper().putAll(items);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>AttachService 변경</strong></p><p><code>getAttachment</code>의 반환값을 <code>AttachmentWrapperItem</code>으로 바꾸자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">AttachmentWrapperItem <span class="title">getAttachment</span><span class="params">(Attachable attachable)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>AttachWriterToBoardService 변경</strong></p><p><code>AttachService</code>의 변경된 로직을 반영한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 변경 전</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Attachment <span class="title">getAttachment</span><span class="params">(Attachable attachment)</span> </span>&#123;</span><br><span class="line">    BoardDto boardDto = supportType.cast(attachment);</span><br><span class="line">    <span class="keyword">return</span> writerClient.getWriter(boardDto.getWriterId());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 변경 후</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AttachmentWrapperItem <span class="title">getAttachment</span><span class="params">(Attachable attachable)</span> </span>&#123;</span><br><span class="line">    BoardDto boardDto = supportType.cast(attachable);</span><br><span class="line">    Attachment attachment = writerClient.getWriter(boardDto.getWriterId());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AttachmentWrapperItem(supportAttachmentType, attachment);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>AttachmentAspect 변경</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 변경 전</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">executeAttach</span><span class="params">(Attachable attachable)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Set&lt;AttachmentType&gt; types = attachmentTypeHolder.getTypes();</span><br><span class="line"></span><br><span class="line">    Map&lt;AttachmentType, Attachment&gt; attachmentMap =</span><br><span class="line">            types.stream()</span><br><span class="line">                 .flatMap(type -&gt; typeToServiceMap.get(type).stream())</span><br><span class="line">                 .filter(service -&gt; service.getSupportType().isAssignableFrom(attachable.getClass()))</span><br><span class="line">                 .collect(Collectors.toMap(AttachService::getSupportAttachmentType, service -&gt; service.getAttachment(attachable)));</span><br><span class="line"></span><br><span class="line">    attachable.attach(attachmentMap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 변경 후</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">executeAttach</span><span class="params">(Attachable attachable)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Set&lt;AttachmentType&gt; types = attachmentTypeHolder.getTypes();</span><br><span class="line"></span><br><span class="line">    List&lt;AttachmentWrapperItem&gt; items =</span><br><span class="line">            types.stream()</span><br><span class="line">                 .flatMap(type -&gt; typeToServiceMap.get(type).stream())</span><br><span class="line">                 .filter(service -&gt; service.getSupportType().isAssignableFrom(attachable.getClass()))</span><br><span class="line">                 .map(service -&gt; service.getAttachment(attachable))</span><br><span class="line">                 .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    attachable.attach(items);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="reactor로-비동기-프로그래밍-적용"><a href="#reactor로-비동기-프로그래밍-적용" class="headerlink" title="reactor로 비동기 프로그래밍 적용"></a>reactor로 비동기 프로그래밍 적용</h1><p><code>attachService.getAttachment()</code>를 호출할 때 Network I/O가 발생하고 있다.<br>문제는 이 메서드가 attachment해야할 갯수만큼 실행이 된다는 점이다.<br>이를 비동기 프로그래밍을 적용해서 해결해보자.</p><h2 id="의존성-설정"><a href="#의존성-설정" class="headerlink" title="의존성 설정"></a>의존성 설정</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span>(<span class="string">'io.projectreactor:reactor-core:3.1.5.RELEASE'</span>)</span><br></pre></td></tr></table></figure><h2 id="AttachService-수정"><a href="#AttachService-수정" class="headerlink" title="AttachService 수정"></a>AttachService 수정</h2><p><code>getAttachment</code>의 반환형을 <code>Mono&lt;AttachmentWrapperInfo&gt;</code>로 수정한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AttachService</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Attachable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">AttachmentType <span class="title">getSupportAttachmentType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Class&lt;T&gt; <span class="title">getSupportType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Mono&lt;AttachmentWrapperItem&gt; <span class="title">getAttachment</span><span class="params">(Attachable attachable)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AttachWriterToBoardService-수정"><a href="#AttachWriterToBoardService-수정" class="headerlink" title="AttachWriterToBoardService 수정"></a>AttachWriterToBoardService 수정</h2><p>수정한 <code>AttachService</code>의 구현체인 <code>AttachWriterToBoardService</code>에 변경된 내용을 반영하자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Mono&lt;AttachmentWrapperItem&gt; <span class="title">getAttachment</span><span class="params">(Attachable attachable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Mono.defer(() -&gt; executeGetAttachment(attachable))</span><br><span class="line">                <span class="comment">// Network I/O를 사용하므로 elastic()으로 생성된 thread에서 실행되도록 선언</span></span><br><span class="line">               .subscribeOn(Schedulers.elastic()); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 원래 getAttachment의 실행하던 부분을 가져옴</span></span><br><span class="line"><span class="comment">// 반환 값에 Mono.just()를 씌움</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Mono&lt;AttachmentWrapperItem&gt; <span class="title">executeGetAttachment</span><span class="params">(Attachable attachable)</span> </span>&#123;</span><br><span class="line">    BoardDto boardDto = supportType.cast(attachable);</span><br><span class="line">    Attachment attachment = writerClient.getWriter(boardDto.getWriterId());</span><br><span class="line">    <span class="keyword">return</span> Mono.just(<span class="keyword">new</span> AttachmentWrapperItem(supportAttachmentType, attachment));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AttachmetAspect-수정"><a href="#AttachmetAspect-수정" class="headerlink" title="AttachmetAspect 수정"></a>AttachmetAspect 수정</h2><p><code>Attachable</code>의 구현체의 타입에 맞추어 service를 실행하고<br>얻은 <code>Mono</code>의 List를 각각 비동기로 실행시키고, <code>block()</code>을 호출해 동기화합니다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">executeAttach</span><span class="params">(Attachable attachable)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Mono&lt;AttachmentWrapperItem&gt;&gt; monoItems = createMonoList(attachable);</span><br><span class="line"></span><br><span class="line">    List&lt;AttachmentWrapperItem&gt; items = executeMonoAndCollectList(monoItems);</span><br><span class="line"></span><br><span class="line">    attachable.attach(items);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Attachable의 타입에 맞추어 서비스를 실행 후 List&lt;Mono&gt;를 생성함</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Mono&lt;AttachmentWrapperItem&gt;&gt; createMonoList(Attachable attachable) &#123;</span><br><span class="line">    Set&lt;AttachmentType&gt; types = attachmentTypeHolder.getTypes();</span><br><span class="line">    <span class="keyword">return</span> types.stream()</span><br><span class="line">                .flatMap(type -&gt; typeToServiceMap.get(type).stream())</span><br><span class="line">                .filter(service -&gt; service.getSupportType().isAssignableFrom(attachable.getClass()))</span><br><span class="line">                .map(service -&gt; service.getAttachment(attachable))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// List&lt;Mono&gt;를 zip()으로 각각 실행하면서 List&lt;attachmentWrapperItem&gt;으로 만들어 반환</span></span><br><span class="line"><span class="comment">// 각각의 Mono는 내부에서 elastic()에 의해 비동기로 실행되며</span></span><br><span class="line"><span class="comment">// block()을 통해 최종적으로 동기화됨</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;AttachmentWrapperItem&gt; <span class="title">executeMonoAndCollectList</span><span class="params">(List&lt;Mono&lt;AttachmentWrapperItem&gt;&gt; monoItems)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Mono.zip(monoItems, <span class="keyword">this</span>::filterItems)</span><br><span class="line">               .block();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;AttachmentWrapperItem&gt; <span class="title">filterItems</span><span class="params">(Object[] itemArray)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Stream.of(itemArray)</span><br><span class="line">                 .map(AttachmentWrapperItem.class::cast)</span><br><span class="line">                 .collect(Collectors.toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="실행"><a href="#실행" class="headerlink" title="실행"></a>실행</h2><p>이제 비동기로 돌아가는 것을 확인해볼 차례다.<br>테스트 코드를 짜서 확인하는 것이 가장 좋겠으나…<br>간편히 <code>Thread.sleep(3000)</code>을 줘서 확인해보도록 한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 댓글 서비스에 3초 슬립</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Mono&lt;AttachmentWrapperItem&gt; <span class="title">executeGetAttachment</span><span class="params">(Attachable attachable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123; Thread.sleep(<span class="number">3000</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; &#125;</span><br><span class="line">    BoardDto boardDto = supportType.cast(attachable);</span><br><span class="line">    Attachment attachment = <span class="keyword">new</span> SimpleAttachmentCollection&lt;&gt;(commentClient.getComments(boardDto.getId()));</span><br><span class="line">    <span class="keyword">return</span> Mono.just(<span class="keyword">new</span> AttachmentWrapperItem(supportAttachmentType, attachment));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 작성자 정보 서비스에 3초 슬립</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Mono&lt;AttachmentWrapperItem&gt; <span class="title">executeGetAttachment</span><span class="params">(Attachable attachable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123; Thread.sleep(<span class="number">3000</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; &#125;</span><br><span class="line">    BoardDto boardDto = supportType.cast(attachable);</span><br><span class="line">    Attachment attachment = writerClient.getWriter(boardDto.getWriterId());</span><br><span class="line">    <span class="keyword">return</span> Mono.just(<span class="keyword">new</span> AttachmentWrapperItem(supportAttachmentType, attachment));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3초 이상, 6초 이내에 요청이 오면 성공이다</p><p><img src="/images/Spring-request-model2/success.png" alt="스크린샷 2018-03-08 오후 7.42.16.png"></p><h1 id="reactor로-실패-극복"><a href="#reactor로-실패-극복" class="headerlink" title="reactor로 실패 극복"></a>reactor로 실패 극복</h1><p>reactor로 실패를 극복하는 방법은 간단하다. 오류가 발생하면 앞서 작성했던 <code>AttachmentWrapperItem.ON_ERROR</code>를 반환하도록 하면 된다. Rx는 이러한 상황을 위한 API들이 모두 정의하고 있다.</p><h2 id="AttachService에서-예외-발생시-처리"><a href="#AttachService에서-예외-발생시-처리" class="headerlink" title="AttachService에서 예외 발생시 처리"></a>AttachService에서 예외 발생시 처리</h2><p><code>AttachWriterToBoardService</code>에서 <code>Writer</code>를 가져오는 중에 Exception이 발생하면 <code>AttachmentWrapperItem.ON_ERROR</code>를 보내도록 변경한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AttachWriterToBoardService</span> <span class="keyword">implements</span> <span class="title">AttachService</span>&lt;<span class="title">BoardDto</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WriterClient writerClient;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Duration timeout;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AttachWriterToBoardService</span><span class="params">(@NonNull WriterClient writerClient,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      @Value(<span class="string">"$&#123;attach.writer.timeoutMillis:5000&#125;"</span>)</span> <span class="keyword">long</span> timeout) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.writerClient = writerClient;</span><br><span class="line">        <span class="keyword">this</span>.timeout = Duration.ofMillis(timeout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;AttachmentWrapperItem&gt; <span class="title">getAttachment</span><span class="params">(Attachable attachable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.defer(() -&gt; executeGetAttachment(attachable))</span><br><span class="line">                   .subscribeOn(Schedulers.elastic())</span><br><span class="line">                   .timeout(timeout) <span class="comment">// reactor에 timeout을 줘도 되고, client에서 자체적으로 timeout을 걸 수 있으면 믿고 쓰자</span></span><br><span class="line">                   .doOnError(e -&gt; log.warn(e.getMessage(), e)) <span class="comment">// 오류가 발생하면 log를 남긴다. 대체 값을 반환하므로 warn으로 지정</span></span><br><span class="line">                   .onErrorReturn(AttachmentWrapperItem.ON_ERROR); <span class="comment">// 오류가 발생하면 ON_ERROR를 반환</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AttachmentAspect에서-ON-ERROR를-거르도록-로직-변경"><a href="#AttachmentAspect에서-ON-ERROR를-거르도록-로직-변경" class="headerlink" title="AttachmentAspect에서 ON_ERROR를 거르도록 로직 변경"></a>AttachmentAspect에서 ON_ERROR를 거르도록 로직 변경</h2><p>앞서 <code>AttachmentAspect</code>에서 <code>List&lt;Mono&gt;</code>를 비동기로 실행시키고 결과 값들을 <code>List&lt;AttachmentWrapperItem&gt;</code>에 모아서 <code>Attachable</code>에 넣어줬다.<br>간단히 비동시 실행결과가 <code>ON_ERROR</code>인 경우를 필터링하면 성공한 결과만을 모아 <code>List&lt;AttachmentWrapperItem&gt;</code>을 만들 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AttachmentAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;AttachmentWrapperItem&gt; <span class="title">executeMonoAndCollectList</span><span class="params">(List&lt;Mono&lt;AttachmentWrapperItem&gt;&gt; monoItems)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 여기에 timeout을 주어서 모든 Mono가 실행되는 최대 시간을 지정할 수도 있다</span></span><br><span class="line">        <span class="keyword">return</span> Mono.zip(monoItems, <span class="keyword">this</span>::filterItems)</span><br><span class="line">                   .doOnError(e -&gt; log.warn(e.getMessage(), e))</span><br><span class="line">                   .onErrorReturn(Collections.emptyList()) <span class="comment">// 모든 Mono를 실행시키고 취합하는 과정에서 오류가 발생하면 emptyList()를 반환</span></span><br><span class="line">                   .block();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;AttachmentWrapperItem&gt; <span class="title">filterItems</span><span class="params">(Object[] itemArray)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.of(itemArray)</span><br><span class="line">                     .map(AttachmentWrapperItem.class::cast)</span><br><span class="line">                     .filter(item -&gt; item != AttachmentWrapperItem.ON_ERROR) <span class="comment">// 예외 발생으로 인해 실패한 요청은 걸러냄</span></span><br><span class="line">                     .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="실행-1"><a href="#실행-1" class="headerlink" title="실행"></a>실행</h2><p>이전에 100번 게시판을 불러올 때, 작성자 정보를 가져오려고 하면 <code>FeignClient</code>에서 404를 던지고 아래와 같이 API 자체가 실패했었다.</p><p><code>GET /boards/100?attachment=comments,writer</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"timestamp"</span>: <span class="string">"2018-03-08T07:55:22.127+0000"</span>,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">500</span>,</span><br><span class="line">  <span class="attr">"error"</span>: <span class="string">"Internal Server Error"</span>,</span><br><span class="line">  <span class="attr">"message"</span>: <span class="string">"status 404 reading WriterClient#getWriter(long); content: &#123;&#125;"</span>,</span><br><span class="line">  <span class="attr">"path"</span>: <span class="string">"/boards/100"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">feign.FeignException: status 404 reading WriterClient#getWriter(long); content: &#123;&#125;</span><br><span class="line">at feign.FeignException.errorStatus(FeignException.java:62) ~[feign-core-9.5.1.jar:na]</span><br><span class="line">        ...</span><br><span class="line">at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_152]</span><br></pre></td></tr></table></figure><p>하지만 장애 극복을 적용한 후에는 예외는 <code>warn</code>으로 로그를 남기되, 성공한 부분까지는 응답을 할 수 있게 되었다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &#123;</span><br><span class="line">    "id": 100,</span><br><span class="line">    "title": "title100",</span><br><span class="line">    "content": "content100",</span><br><span class="line">    "comments": [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">496</span>,</span><br><span class="line">        <span class="attr">"email"</span>: <span class="string">"Zola@lizzie.com"</span>,</span><br><span class="line">        <span class="attr">"body"</span>: <span class="string">"neque unde voluptatem iure\nodio excepturi ipsam ad id\nipsa sed expedita error quam\nvoluptatem tempora necessitatibus suscipit culpa veniam porro iste vel"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2018-03-08 19:59:12.056  WARN 64890 --- [      elastic-5] c.p.s.s.a.s.w.AttachWriterToBoardService : status 404 reading WriterClient#getWriter(long); content:</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line">feign.FeignException: status 404 reading WriterClient#getWriter(long); content: &#123;&#125;</span><br><span class="line">at feign.FeignException.errorStatus(FeignException.java:62) ~[feign-core-9.5.1.jar:na]</span><br><span class="line">        ...</span><br><span class="line">at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_152]</span><br></pre></td></tr></table></figure><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>Reactor를 사용해서 비동기 프로그래밍을 하고, 장애에 대처해 극복할 수 있게 해봤다.<br>중간에 reactor에 <code>timeout()</code>을 사용했는 데,<br>이 부분은 client를 <code>FeignClient</code>를 사용해서 <code>application.yml</code>로 빼서 따로 관리할 수 있다.<br>이전에 공유했던 <code>Hystrix</code>와도 연계해서 fallback을 구현할 수도 있어서, 강력한 장애 대응을 할 수 있다.</p><p>여전히 현재의 코드는 큰 단점이 있다.<br><code>AttachmentAspect</code>에서 reactor의 <code>block()</code>을 호출한다는 점이다.</p><p>이것이 단점인 이유는 <a href="https://projectreactor.io/learn" target="_blank" rel="noopener">reactor learn 페이지</a>에서 가져온 사진 3장으로 설명할 수 있을 것 같다.</p><table><thead><tr><th><img src="/images/Spring-request-model2/block.PNG" alt="blocking is evil"></th></tr></thead><tbody><tr><td><em>출처 : <a href="https://projectreactor.io/learn" target="_blank" rel="noopener">https://projectreactor.io/learn</a></em></td></tr></tbody></table><p>즉 Non-Blocking을 사용해서 <code>자원을 효율적으로</code> 사용하지 않았다는 것이다. 100만원짜리 서버를 써야 하던 일을, 50만원짜리 서버로 처리할 수 있다면 그렇게 해야한다. 때문에 SpringFramework 5에서는 webflux를 사용하여 netty기반(기본설정)으로 Non-Blocking + Async를 사용할 수 있도록 했다.</p>]]></content>
      
      <categories>
          
          <category> spring </category>
          
          <category> practice </category>
          
          <category> practice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> reactor </tag>
            
            <tag> async </tag>
            
            <tag> fallback </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring에서 요청에 따른 부가 응답 추가하기 (1)</title>
      <link href="/2018/03/11/Spring-request-model1/"/>
      <content type="html"><![CDATA[<h1 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h1><p>최근 들어 특정 콘텐츠에 부가 속성을 더하여 보여주는 UI가 증가하고 있다. 부가 속성의 예를 들자면 좋아요, 싫어요, 댓글, 공유 링크, 연관 게시물, 추천 게시물 등을 들 수 있다. 이러한 부가 속성들은 기획적 요구나 성능 이슈로 인하여 클라이언트마다 다른 UI를 보여줘야할 때가 있다. 웹 서버 개발자로써 자주 겪게되는 요구 사항 중 하나다. 이러한 요구 사항을 Java와 Spring Framework를 이용해서 어떻게 하면 OOP스럽게 풀어나갈 수 있을까. 당면 과제 해결과 리팩토링을 거쳐 조금씩 더 나은 애플리케이션을 만들어보고자 한다.</p><a id="more"></a><h1 id="요구-사항-정리"><a href="#요구-사항-정리" class="headerlink" title="요구 사항 정리"></a>요구 사항 정리</h1><ul><li>게시판 상세 API</li><li>Web에서는 댓글과 추천 게시글 목록을 보여줘야 함</li><li>Mobile에서는 댓글만 보여줘야 함</li></ul><p><strong>서비스 구조</strong></p><p>실제 도메인인 Board를 서비스하는 MicroService가 있고, 댓글, 회원 등의 다른 MicroService로 분리가 되어있다. BoardService는 자체로 하나의 서비스이자, 부가 속성들을 조합(API Ochestration)하는 역할을 한다.</p><img  src=http://www.plantuml.com/plantuml/svg/Y_RDJyhCIOrLqDMrKuXsoayiIWbEBIfBBOhbGk4fw9OMW5J0b5iflEwP_6f70rTqU6gIWbDHVdanM1Lnfg3eWHcbysRRb3URvkYycJVnJSl6D_CceEi5wNJEpyrDpIl1OJf8HL1gCbXD2XurlgcvIQb5K240><h1 id="해결법에-대한-생각"><a href="#해결법에-대한-생각" class="headerlink" title="해결법에 대한 생각"></a>해결법에 대한 생각</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 난 오늘만 사는 개발자(눈누난나~)</span></span><br><span class="line"><span class="keyword">if</span> (resolveDevice(request) == Device.APP) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>if</code>가 좋은 점이 있다. 이해하기 쉽다는 점이다. 하지만 위의 예제는 OCP를 지킬 수 없다. 시간이 촉박하다면 당장에 <code>if</code>를 쓰고 싶은 마음이 들겠지만, 미래를 생각하여 접어두자.</p><h2 id="원칙"><a href="#원칙" class="headerlink" title="원칙"></a>원칙</h2><p>특정 클라이언트에서는 특정 부가 정보들이 보이게 해달라는 요구 사항들은 앞으로도 추가될 수 있다. 좋은 설계를 통해 앞으로의 대비, 로직을 추가할 때의 비용을 줄이도록 하자.</p><ul><li>가능한 OOP스럽게 : 작은 class들이 서로 협력하여 큰 문제를 해결하도록!</li><li>마치 장식(decoration)을 추가하는 것처럼 동작을 할 수 있으면 좋겠다.</li><li>client가 필요한 부가 정보를 요청하도록 구현하자.</li></ul><blockquote><p>한 번 정해진 설계를 수정할 필요 없이 확장 가능하게</p></blockquote><h2 id="예상되는-API-형식"><a href="#예상되는-API-형식" class="headerlink" title="예상되는 API 형식"></a>예상되는 API 형식</h2><ul><li>client가 필요한 부가 정보를 요청하도록 구현하자.</li></ul><p><strong>기본</strong></p><p>Board는 <code>id</code>, <code>title</code>, <code>content</code> 속성을 가지고 있다.</p><p><code>GET /boards/1</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"title1"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: <span class="string">"content1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>댓글추가</strong></p><p>클라이언트가 댓글(<code>comments</code>)을 추가 정보로 요청할 수 있다.</p><p><code>GET /boards/1?attachment=comments</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"title1"</span>,</span><br><span class="line">    <span class="attr">"content"</span>: <span class="string">"content1"</span>,</span><br><span class="line">    <span class="attr">"comments"</span>: [&#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"email"</span>: <span class="string">"Eliseo@gardner.biz"</span>,</span><br><span class="line">        <span class="attr">"body"</span>: <span class="string">"laudantium enim quasi est quidem magnam voluptate ipsam eos\ntempora quo necessitatibus\ndolor quam autem quasi\nreiciendis et nam sapiente accusantium"</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>댓글과 작성자정보</strong></p><p>클라이언트가 댓글과 작성자정보(<code>writer</code>)를 추가 정보로 요청할 수 있다.</p><p><code>GET /boards/1?attachment=comments,writer</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"title1"</span>,</span><br><span class="line">    <span class="attr">"content"</span>: <span class="string">"content1"</span>,</span><br><span class="line">    <span class="attr">"comments"</span>: [&#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"email"</span>: <span class="string">"Eliseo@gardner.biz"</span>,</span><br><span class="line">        <span class="attr">"body"</span>: <span class="string">"laudantium enim quasi est quidem magnam voluptate ipsam eos\ntempora quo necessitatibus\ndolor quam autem quasi\nreiciendis et nam sapiente accusantium"</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="attr">"writer"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"username"</span>: <span class="string">"Bret"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="기본-API-작성"><a href="#기본-API-작성" class="headerlink" title="기본 API 작성"></a>기본 API 작성</h1><p>천리 길도 한걸음부터다. 우선은 기본 API를 작성하자. 기본 API 작성에 관한 내용은 별다른 설명 없이 소스로 대체하고자 한다.</p><h2 id="web-모듈-생성"><a href="#web-모듈-생성" class="headerlink" title="web 모듈 생성"></a>web 모듈 생성</h2><p><strong>의존성 설정</strong></p><p>현재일(2018-03-10) 기준으로 최신 버전인 spring-boot 2.0.0.RELAESE 사용했다</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">  <span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-data-jpa'</span>)</span><br><span class="line">  <span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-web'</span>)  </span><br><span class="line">  compileOnly(<span class="string">'org.projectlombok:lombok'</span>)</span><br><span class="line">  <span class="keyword">runtime</span>(<span class="string">'com.h2database:h2'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Entity</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PRIVATE)</span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"board"</span>)</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Board</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Board</span><span class="params">(@NonNull String title, @NonNull String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/boards"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoardController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BoardRepository boardRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Board <span class="title">getOne</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Board board) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> board;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>미리 데이터 넣어두기</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleAttachmentApplication</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BoardRepository boardRepository;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SimpleAttachmentApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        boardRepository.save(<span class="keyword">new</span> Board(<span class="string">"title1"</span>, <span class="string">"content1"</span>));</span><br><span class="line">        boardRepository.save(<span class="keyword">new</span> Board(<span class="string">"title2"</span>, <span class="string">"content2"</span>));</span><br><span class="line">        boardRepository.save(<span class="keyword">new</span> Board(<span class="string">"title3"</span>, <span class="string">"content3"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>서버띄워 실행</strong></p><p><code>GET /borads/1</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"title1"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: <span class="string">"content1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>소스 : <a href="https://github.com/supawer0728/simple-attachment/tree/base-api" target="_blank" rel="noopener">https://github.com/supawer0728/simple-attachment/tree/base-api</a></p><h2 id="기본-API에-attachment-구현하기"><a href="#기본-API에-attachment-구현하기" class="headerlink" title="기본 API에 attachment 구현하기"></a>기본 API에 attachment 구현하기</h2><p>attachment를 구현하기 위한 사항들을 Spring의 MVC 요청을 처리하는 흐름에 따라 정리해보았다.</p><ol><li>필요한 경우 Interceptor에서 <code>attachment</code>를 해석하고 저장한다<br> 1-1 필요한 경우가 언젠지 정의해야 함.<br> 1-2 <code>attachment</code>를 해석할 class를 정의해야 함(AttachmentType)</li><li><code>attachment</code>는 <code>Request Scope</code> bean에 담아두고, 필요할 때 꺼내 사용(AttachmentTypeHolder class 정의)</li><li>Controller에서 객체가 반환되면, 필요한 속성을 추가<br> 3-1 Controller의 로직은 변경하지 않음<br> 3-2 AOP를 통해서, <code>1-1</code>의 <code>필요한 경우</code>를 파악하여, attachment를 위한 서비스 로직을 실행<br> 3-3 <code>Board</code> 엔티티는 생성, 수정, 삭제 용도로 남겨두고, 읽기 요청에 대해서는 comments, writer 등을 추가할 수 있는 BoardDto로 변환해서 보내자.(<a href="https://martinfowler.com/bliki/CQRS.html" target="_blank" rel="noopener">CQRS 적용</a>)</li></ol><h1 id="attachment를-해석해서-저장하기"><a href="#attachment를-해석해서-저장하기" class="headerlink" title="attachment를 해석해서 저장하기"></a>attachment를 해석해서 저장하기</h1><h2 id="AttachmentType"><a href="#AttachmentType" class="headerlink" title="AttachmentType"></a>AttachmentType</h2><p>서버에서 정의한 값들만 <code>attachment</code>로 해석할 것이다. enum이 안성맞춤일 것 같다. enum으로 <code>AttachmentType</code>을 정의하자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> AttachmentType &#123;</span><br><span class="line">    COMMENTS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AttachmentTypeHolder"><a href="#AttachmentTypeHolder" class="headerlink" title="AttachmentTypeHolder"></a>AttachmentTypeHolder</h2><p>요청에서 해석한 <code>attachment</code>를 저장할 <code>@RequestScope</code> bean이 필요하다. <code>AttachmentTypeHolder</code>에 요청된 <code>attachment</code>의 내용을 담아둘 것이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestScope</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AttachmentTypeHolder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;AttachmentType&gt; types;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Attach"><a href="#Attach" class="headerlink" title="@Attach"></a>@Attach</h2><p>어떤 경우에 attachment를 해석할 것이지를 정의해야 한다. 실행하고자 하는 Controller의 메서드에 <code>@Attach</code>가 있으면, 해석이 필요한 경우로 정의했다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Attach &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/boards"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoardController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// `/boards/&#123;id&#125;`로 요청이 들어오면 요청에 있는 attachment를 해석하려 할 것이다.</span></span><br><span class="line">    <span class="meta">@Attach</span> </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> BoardDto <span class="title">getOne</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Board board) </span>&#123; <span class="keyword">return</span> board;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AttachInterceptor"><a href="#AttachInterceptor" class="headerlink" title="AttachInterceptor"></a>AttachInterceptor</h2><p>이제 요청에서 <code>attachment</code>를 해석해서 <code>AttachmentTypeHolder</code>에 저장하자. 편의상 성능 관련 로직은 배제했다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AttachInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TARGET_PARAMETER_NAME = <span class="string">"attachment"</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AttachmentTypeHolder attachmentTypeHolder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!(handler <span class="keyword">instanceof</span> HandlerMethod)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">        <span class="comment">// hasMethodAnnotation()의 호출 스택이 꽤 길어서, Map&lt;HandlerMethod, Boolean&gt;으로 캐싱하시면 살짝 성능이 좋아짐</span></span><br><span class="line">        <span class="keyword">if</span> (!key.hasMethodAnnotation(Attachable<span class="class">.<span class="keyword">class</span>)) </span>&#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Set&lt;AttachmentType&gt; types = resolveAttachmentType(request);</span><br><span class="line">        attachmentTypeHolder.setTypes(types);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Set&lt;AttachmentType&gt; <span class="title">resolveAttachmentType</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String attachments = request.getParameter(TARGET_PARAMETER_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(attachments)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptySet();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 기본적으로 enum의 valueOf는 찾는 값이 없을 시 IllegalArgumentException을 throw</span></span><br><span class="line">        <span class="comment">// attachment 때문에 장애가 나면 넌센스, 실제로 구현할 때에는 exception을 던지지 않게 해야함</span></span><br><span class="line">        <span class="comment">// github 소스에서는 exception을 던지지 않음</span></span><br><span class="line">        <span class="keyword">return</span> Stream.of(attachments.split(<span class="string">","</span>))</span><br><span class="line">                     .map(String::toUpperCase)</span><br><span class="line">                     .map(AttachmentType::valueOf)</span><br><span class="line">                     .collect(Collectors.toSet());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p>앞서 정의한 인터셉터가 잘 동작하는 지 확인해보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AttachInterceptorTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InjectMocks</span></span><br><span class="line">    <span class="keyword">private</span> AttachInterceptor attachInterceptor;</span><br><span class="line">    <span class="meta">@Spy</span></span><br><span class="line">    <span class="keyword">private</span> AttachmentTypeHolder attachmentTypeHolder;</span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> HandlerMethod handlerMethod;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MockitoAnnotations.initMocks(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preHandle</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// given</span></span><br><span class="line">        given(handlerMethod.hasMethodAnnotation(Attachable<span class="class">.<span class="keyword">class</span>)).<span class="title">willReturn</span>(<span class="title">true</span>)</span>;</span><br><span class="line">        MockHttpServletRequest request = <span class="keyword">new</span> MockHttpServletRequest();</span><br><span class="line">        request.setParameter(AttachInterceptor.TARGET_PARAMETER_NAME, AttachmentType.COMMENTS.name().toLowerCase());</span><br><span class="line">        MockHttpServletResponse response = <span class="keyword">new</span> MockHttpServletResponse();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// when</span></span><br><span class="line">        attachInterceptor.preHandle(request, response, handlerMethod);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// then</span></span><br><span class="line">        assertThat(attachmentTypeHolder.getTypes(), hasItem(AttachmentType.COMMENTS));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>소스 : <a href="https://github.com/supawer0728/simple-attachment/tree/save-attachment-request" target="_blank" rel="noopener">https://github.com/supawer0728/simple-attachment/tree/save-attachment-request</a></p><h1 id="Controller에서-BoardDto를-반환하게-만들기"><a href="#Controller에서-BoardDto를-반환하게-만들기" class="headerlink" title="Controller에서 BoardDto를 반환하게 만들기"></a>Controller에서 BoardDto를 반환하게 만들기</h1><h2 id="BoardDto-정의"><a href="#BoardDto-정의" class="headerlink" title="BoardDto 정의"></a>BoardDto 정의</h2><p>앞에서 정의했던 <code>Board</code>는 엔티티이다. 엔티티는 생성, 수정시 사용하도록 두고, 부가 정보인 댓글, 추천정보를 담을 모델을 <code>BoardDto</code>로 정의해서 응답을 주자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@JsonInclude</span>(JsonInclude.Include.NON_NULL)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoardDto</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Setter</span>(AccessLevel.PRIVATE)</span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;AttachmentType, Attachment&gt; attachmentMap = <span class="keyword">new</span> EnumMap&lt;&gt;(AttachmentType<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위에서는 왜 <code>attachmentMap</code>을 썼을까? 만약 <code>attachmentMap</code>이 없었다면 아래와 같이 각각 다른 멤버로 선언이 되었을 것이고, 이는 아래와 같이 소스를 attach할 모델이 추가될 때, 소스를 <code>수정</code>하게 만드는 원인이 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoardDto</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  List&lt;CommentDto&gt; comments;</span><br><span class="line">  Writer writer;</span><br><span class="line">  <span class="comment">// 추후에 추천목록이 생긴다면 List&lt;RecommendationDto&gt; recommendations;가 추가됨</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Map</code>을 가져다 쓰는게 마음에 들지 않는다거나, 별도의 클래스를 정의해서 쓰고 싶다면, <code>AttachmentWrapper</code> 등의 클래스를 정의해서 <code>Map</code>을 래핑하고 delegate 패턴을 구현한 클래스를 사용할 수도 있다. lombok의 <code>@Delegate</code>는 이런 경우 편리하게 사용할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AttachmentWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">AttachmentMap</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(AttachmentType type, Attachment attachment)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">putAll</span><span class="params">(Map&lt;? extends AttachmentType, ? extends Attachment&gt; attachmentMap)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">        Set&lt;Map.Entry&lt;AttachmentType, Attachment&gt;&gt; entrySet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delegate</span>(types = AttachmentMap<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">Map</span>&lt;<span class="title">AttachmentType</span>, <span class="title">Attachment</span>&gt; <span class="title">value</span> </span>= <span class="keyword">new</span> EnumMap&lt;&gt;(AttachmentType<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>BoardDto</code>에 적용하자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@JsonInclude</span>(JsonInclude.Include.NON_NULL)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoardDto</span> <span class="keyword">implements</span> <span class="title">Attachable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Setter</span>(AccessLevel.PRIVATE)</span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> AttachmentWrapper attachmentWrapper = <span class="keyword">new</span> AttachmentWrapper();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Attcahment</strong></p><p>부가 정보 클래스를 나타내기 위한 마크 인터페이스가 있으면 좋겠다.<br><code>Attachment</code>라고 이름을 짓자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Attachment</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>부가 정보, 예를 들어 댓글 DTO를 정의한다면 다음과 같이 선언하게 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommentDto</span> <span class="keyword">implements</span> <span class="title">Attachment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String body;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Attachment</code>의 내용물은 <code>Collection</code>의 자료구조가 될 수도 있다. 예를 들어, 댓글 목록을 추가할 수 있어야 한다. 그러기 위한 자료구조도 정의하자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AttachmentCollection</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Attachment</span>&gt; <span class="keyword">extends</span> <span class="title">Attachment</span>, <span class="title">Collection</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@JsonUnwrapped</span></span><br><span class="line">    <span class="function">Collection&lt;T&gt; <span class="title">getValue</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleAttachmentCollection</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Attachment</span>&gt; <span class="keyword">implements</span> <span class="title">AttachmentCollection</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Delegate</span></span><br><span class="line">    <span class="keyword">private</span> Collection&lt;T&gt; value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Converter-정의"><a href="#Converter-정의" class="headerlink" title="Converter 정의"></a>Converter 정의</h2><p>A 오브젝트를 B 오브젝트로 변환하는 것은 여러 방법이 있다.<br>별다른 모듈에 의존하지 않고, 간단히 spring의 converter를 구현해서 정의했다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoardDtoConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">Board</span>, <span class="title">BoardDto</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BoardDto <span class="title">convert</span><span class="params">(@NonNull Board board)</span> </span>&#123;</span><br><span class="line">        BoardDto boardDto = <span class="keyword">new</span> BoardDto();</span><br><span class="line">        boardDto.setId(board.getId());</span><br><span class="line">        boardDto.setTitle(board.getTitle());</span><br><span class="line">        boardDto.setContent(board.getContent());</span><br><span class="line">        <span class="keyword">return</span> boardDto;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Spring의 Converter를 구현한 것은 단순한 개인취향이다.<br><code>board.toDto()</code> 등의 메서드를 작성해서 변환해도 무관하나<br>Board와 BoardDto 사이에 결합도가 생기는 게 싫었다.<br>그 정도의 결합도를 용납할 수 있다면 <code>board.toDto()</code>도 좋은 선택이다.</p></blockquote><h2 id="Controller의-반환값-수정"><a href="#Controller의-반환값-수정" class="headerlink" title="Controller의 반환값 수정"></a>Controller의 반환값 수정</h2><p>앞서 정의한 Converter를 주입받아, <code>Board</code>를 <code>BoardDto</code>로 변환 후 반환한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/boards"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoardController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> BoardRepository boardRepository;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> BoardDtoConverter boardDtoConverter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Attachable</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> BoardDto <span class="title">getOne</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Board board) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> boardDtoConverter.convert(board);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="AOP로-반환된-값에-모델-추가하기"><a href="#AOP로-반환된-값에-모델-추가하기" class="headerlink" title="AOP로 반환된 값에 모델 추가하기"></a>AOP로 반환된 값에 모델 추가하기</h1><p><strong>AOP 사용 설정</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAspectJAutoProxy</span>(proxyTargetClass = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleAttachmentApplication</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><h2 id="AOP로-Advice-작성하기"><a href="#AOP로-Advice-작성하기" class="headerlink" title="AOP로 Advice 작성하기"></a>AOP로 Advice 작성하기</h2><p><code>@Attach</code>가 있는 메서드를 pointcut으로 잡아 advice가 실행되도록 정의한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AttachmentAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> <span class="keyword">final</span> AttachmentTypeHolder attachmentTypeHolder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.parfait.study.simpleattachment.attachment.Attach)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pointcut</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning</span>(pointcut = <span class="string">"pointcut()"</span>, returning = <span class="string">"returnValue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">afterReturning</span><span class="params">(Object returnValue)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (attachmentTypeHolder.isEmpty() &amp;&amp; !(returnValue <span class="keyword">instanceof</span> Attachable)) &#123;</span><br><span class="line">            <span class="keyword">return</span> returnValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        executeAttach((Attachable) returnValue);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">executeAttach</span><span class="params">(Attachable attachable)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// TODO : 로직 작성</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 1/2는 끝났다. 사실상 핵심로직인 저 <code>TODO</code> 안의 내용만 채우면 된다.</p><h2 id="어떻게-모델을-추가할까"><a href="#어떻게-모델을-추가할까" class="headerlink" title="어떻게 모델을 추가할까?"></a>어떻게 모델을 추가할까?</h2><p>우선은 BoardDto를 먼저 손을 봐야할 것 같다.</p><p><code>BoardDto</code>에 <code>CommentDto</code>를 추가하기 위한 동작을 interface로 뽑아내자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Attachable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">AttachmentWrapper <span class="title">getAttachmentWrapper</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(AttachmentType type, Attachment attachment)</span> </span>&#123;</span><br><span class="line">        getAttachmentWrapper().put(type, attachment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Map&lt;? extends AttachmentType, ? extends Attachment&gt; attachment)</span> </span>&#123;</span><br><span class="line">        getAttachmentWrapper().putAll(attachment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonAnyGetter</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Map&lt;String, Object&gt; <span class="title">getAttachment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AttachmentWrapper wrapper = getAttachmentWrapper();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (wrapper.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapper.entrySet()</span><br><span class="line">                      .stream()</span><br><span class="line">                      .collect(Collectors.toMap(e -&gt; e.getKey().lowerCaseName(), Map.Entry::getValue));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@JsonInclude</span>(JsonInclude.Include.NON_NULL)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoardDto</span> <span class="keyword">implements</span> <span class="title">Attachable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Setter</span>(AccessLevel.PRIVATE)</span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> AttachmentWrapper attachmentWrapper = <span class="keyword">new</span> AttachmentWrapper();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Attachable</code> 인터페이스에 필요한 동작들을 default로 선언했기 때문에, <code>BoardDto</code>에는 별다른 수정을 할 필요가 없다. <code>BoardDto</code>에 댓글을 추가할 때에는 <code>BoardDto.attach(AttachmentType.COMMENTS, new CommentsDto())</code>를 호출하면 된다.</p><h2 id="AttachService-정의"><a href="#AttachService-정의" class="headerlink" title="AttachService 정의"></a>AttachService 정의</h2><p>첨가 로직(attach)을 선언하고 실행할 <code>AttachmentService</code>가 있어야할 것 같다. AttachService가 가져야할 요건을 3가지로 나눌 수 있다.</p><ol><li>어떤 <code>AttachmentType</code>에 대해 동작하는가?</li><li>어떤 class에 대해 작업을 수행할 수 있는가?</li><li>attachment를 가져옴(생성)</li></ol><p>이를 interface로 뽑아내면 아래와 같이 선언할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AttachService</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Attachable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">AttachmentType <span class="title">getSupportAttachmentType</span><span class="params">()</span></span>; <span class="comment">// 1. 어떤 AttachmentType에 대해서 동작하는가</span></span><br><span class="line"></span><br><span class="line">    <span class="function">Class&lt;T&gt; <span class="title">getSupportType</span><span class="params">()</span></span>; <span class="comment">// 2. 어떤 Attachable 클래스에 대해 동작하는가</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 형안전성을 지킬 것</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> attachment</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassCastException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Attachement <span class="title">getAttachment</span><span class="params">(Object attachment)</span></span>; <span class="comment">// 3. attachment를 가져옴</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>2번이 왜있지? 1번만 보고 댓글이 필요하면 추가하면 되는거 아냐?</code> 라고 생각할 수 있을 것 같다. 하지만 댓글은 쪽지의 댓글이 있을 수도 있고, 뉴스의 댓글이 될 수도 있고, 동영상의 댓글이 될 수도 있다. 이러한 댓글들마다 불러오는 방법이 다를 수 있다. 즉 클래스 별로 다른 방식으로 불러와야 하는 것이다. 구현체가 어떤 객체에 대해서 attach를 실행할 수 있을지 조금더 상세히 정의하기 위해 <code>Class&lt;T&gt; getSupportType()</code>를 정의했다.</p><p>아래와 같이 <code>AttachService</code>의 구현체를 정의할 수 있다.</p><p><strong>AttachCommentsToBoardService.java</strong></p><p><code>CommentClient</code>는 <a href="https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-feign.html" target="_blank" rel="noopener">FeignClient</a>를 사용했다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AttachCommentsToBoardService</span> <span class="keyword">implements</span> <span class="title">AttachService</span>&lt;<span class="title">BoardDto</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AttachmentType supportAttachmentType = AttachmentType.COMMENTS;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Class&lt;BoardDto&gt; supportType = BoardDto<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CommentClient commentClient; <span class="comment">// feign client 사용</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AttachCommentsToBoardService</span><span class="params">(@NonNull CommentClient commentClient)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.commentClient = commentClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AttachmentType <span class="title">getSupportAttachmentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> supportAttachmentType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class&lt;BoardDto&gt; <span class="title">getSupportType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> supportType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Attachment <span class="title">getAttachment</span><span class="params">(Attachable attachment)</span> </span>&#123;</span><br><span class="line">        BoardDto boardDto = supportType.cast(attachment);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAttachmentCollection&lt;&gt;(commentClient.getComments(boardDto.getId()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Advice-나머지-부분-작성하기"><a href="#Advice-나머지-부분-작성하기" class="headerlink" title="Advice 나머지 부분 작성하기"></a>Advice 나머지 부분 작성하기</h2><p>앞서 작성했던 <code>AttachmentAspect</code>의 <code>//TODO</code> 부분을 채울 차례다.<br>List를 사용해서 spring에 등록된 모든 <code>AttachService</code>를 주입받아, <code>AttachmentType</code>과 <code>Attachable</code>의 타입으로 필터링해서 attach를 실행한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AttachmentAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AttachmentTypeHolder attachmentTypeHolder;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;AttachmentType, List&lt;AttachService&lt;? extends Attachable&gt;&gt;&gt; typeToServiceMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 생성자에서 모든 AttachService를 주입받아 지원하는 AttachmentType에 맞추어 `typeToServiceMap`에 저장</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AttachmentAspect</span><span class="params">(@NonNull AttachmentTypeHolder attachmentTypeHolder,</span></span></span><br><span class="line"><span class="function"><span class="params">                            @NonNull List&lt;AttachService&lt;? extends Attachable&gt;&gt; attachService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.attachmentTypeHolder = attachmentTypeHolder;</span><br><span class="line">        <span class="keyword">this</span>.typeToServiceMap = attachService.stream()</span><br><span class="line">                                             .collect(Collectors.groupingBy(AttachService::getSupportAttachmentType, Collectors.toList()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.parfait.study.simpleattachment.attachment.Attach)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pointcut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning</span>(pointcut = <span class="string">"pointcut()"</span>, returning = <span class="string">"returnValue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">afterReturning</span><span class="params">(Object returnValue)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (attachmentTypeHolder.isEmpty() &amp;&amp; !(returnValue <span class="keyword">instanceof</span> Attachable)) &#123;</span><br><span class="line">            <span class="keyword">return</span> returnValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        executeAttach((Attachable) returnValue);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">executeAttach</span><span class="params">(Attachable attachable)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Set&lt;AttachmentType&gt; types = attachmentTypeHolder.getTypes();</span><br><span class="line">        Class attachableClass = attachable.getClass();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Stream API를 사용해 손쉽게 필터링을 하고 알맞은 `AttachService.attach()`를 실행</span></span><br><span class="line">        Map&lt;AttachmentType, Attachment&gt; attachmentMap =</span><br><span class="line">                types.stream()</span><br><span class="line">                     .flatMap(type -&gt; typeToServiceMap.get(type).stream())</span><br><span class="line">                     .filter(service -&gt; service.getSupportType().isAssignableFrom(attachableClass))</span><br><span class="line">                     .collect(Collectors.toMap(AttachService::getSupportAttachmentType, service -&gt; service.getAttachment(attachable)));</span><br><span class="line"></span><br><span class="line">        attachable.attach(attachmentMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="실행해보기"><a href="#실행해보기" class="headerlink" title="실행해보기"></a>실행해보기</h2><p><code>GET /boards/1?attachment=comments</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">   <span class="attr">"id"</span>:<span class="number">1</span>,</span><br><span class="line">   <span class="attr">"title"</span>:<span class="string">"title1"</span>,</span><br><span class="line">   <span class="attr">"content"</span>:<span class="string">"content1"</span>,</span><br><span class="line">   <span class="attr">"comments"</span>:[  </span><br><span class="line">      &#123;  </span><br><span class="line">         <span class="attr">"id"</span>:<span class="number">1</span>,</span><br><span class="line">         <span class="attr">"email"</span>:<span class="string">"Eliseo@gardner.biz"</span>,</span><br><span class="line">         <span class="attr">"body"</span>:<span class="string">"laudantium enim quasi est quidem magnam voluptate ipsam eos\ntempora quo necessitatibus\ndolor quam autem quasi\nreiciendis et nam sapiente accusantium"</span></span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>소스 : <a href="https://github.com/supawer0728/simple-attachment/tree/attach-writer" target="_blank" rel="noopener">https://github.com/supawer0728/simple-attachment/tree/attach-writer</a></p><h1 id="Writer를-추가해보자"><a href="#Writer를-추가해보자" class="headerlink" title="Writer를 추가해보자"></a>Writer를 추가해보자</h1><p>여태까지 장황한 소스를 작성했다. 한번 구조를 잡았으니 새로운 <code>attachment</code>를 추가하는 것은 어렵지 않다. 그러기 위해 설계를 하는 것이고, OOP를 하는 거니까.</p><h2 id="AttachmentType-수정-WRITER-추가"><a href="#AttachmentType-수정-WRITER-추가" class="headerlink" title="AttachmentType 수정(WRITER 추가)"></a>AttachmentType <code>수정</code>(WRITER 추가)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> AttachmentType &#123;</span><br><span class="line">    COMMENTS, WRITER;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="WriterDto-추가"><a href="#WriterDto-추가" class="headerlink" title="WriterDto 추가"></a>WriterDto <code>추가</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriterDto</span> <span class="keyword">implements</span> <span class="title">Attachment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="WriterClient-추가"><a href="#WriterClient-추가" class="headerlink" title="WriterClient 추가"></a>WriterClient <code>추가</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"writer-api"</span>, url = <span class="string">"https://jsonplaceholder.typicode.com"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WriterClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/users/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">WriterDto <span class="title">getWriter</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AttachWriterToBoardService-추가"><a href="#AttachWriterToBoardService-추가" class="headerlink" title="AttachWriterToBoardService 추가"></a>AttachWriterToBoardService <code>추가</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AttachWriterToBoardService</span> <span class="keyword">implements</span> <span class="title">AttachService</span>&lt;<span class="title">BoardDto</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AttachmentType supportAttachmentType = AttachmentType.WRITER;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Class&lt;BoardDto&gt; supportType = BoardDto<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WriterClient writerClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AttachWriterToBoardService</span><span class="params">(@NonNull WriterClient writerClient)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.writerClient = writerClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AttachmentType <span class="title">getSupportAttachmentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> supportAttachmentType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class&lt;BoardDto&gt; <span class="title">getSupportType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> supportType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Attachment <span class="title">getAttachment</span><span class="params">(Attachable attachment)</span> </span>&#123;</span><br><span class="line">        BoardDto boardDto = supportType.cast(attachment);</span><br><span class="line">        <span class="keyword">return</span> writerClient.getWriter(boardDto.getWriterId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기존의 소스를 수정하는 곳은 딱 한 군데다. enum에 <code>WRITER</code>를 추가했는데, 이것도 사실상 수정이 아니라 추가라고 볼 수 있지 않을까?<br>Spring이 의존성 주입은 모두 담당하기 때문에 필요한 모델을 추가로 작성할 때는 어떻게 부가 정보를 가져올지, 어떻게 모델을 정의할지만 POJO로 잘 작성하면 된다.</p><h2 id="실행"><a href="#실행" class="headerlink" title="실행"></a>실행</h2><p><code>GET /boards/1?attachment=comments,writer</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"title1"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: <span class="string">"content1"</span>,</span><br><span class="line">  <span class="attr">"comments"</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"email"</span>: <span class="string">"Eliseo@gardner.biz"</span>,</span><br><span class="line">      <span class="attr">"body"</span>: <span class="string">"laudantium enim quasi est quidem magnam voluptate ipsam eos\ntempora quo necessitatibus\ndolor quam autem quasi\nreiciendis et nam sapiente accusantium"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"writer"</span>:&#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"username"</span>: <span class="string">"Bret"</span>,</span><br><span class="line">    <span class="attr">"email"</span>: <span class="string">"Sincere@april.biz"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>소스 : <a href="https://github.com/supawer0728/simple-attachment/tree/attach-writer" target="_blank" rel="noopener">https://github.com/supawer0728/simple-attachment/tree/attach-writer</a></p><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>HTTP 요청에서 client가 원하는 모델을 추가하는 로직을 구성해보았다. 다음 글에서는 여기서 성능 튜닝을 위한 몇가지 로직을 추가하려고 한다.  현재 소스에는 엄청난 단점이 적어도 두 개나 존재하는데, 바로 <code>AttachmentAspect</code>에서 외부와 통신하여 <code>Attachment</code>를 가져오는 부분이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;AttachmentType, Attachment&gt; attachmentMap =</span><br><span class="line">        types.stream()</span><br><span class="line">             .flatMap(type -&gt; typeToServiceMap.get(type).stream())</span><br><span class="line">             .filter(service -&gt; service.getSupportType().isAssignableFrom(attachable.getClass()))</span><br><span class="line">             .collect(Collectors.toMap(AttachService::getSupportAttachmentType, service -&gt; service.getAttachment(attachable)));</span><br></pre></td></tr></table></figure><p>이 부분이 왜 엄청난 단점인지 살펴보자.</p><ol><li>Network I/O를 순차 실행<ul><li>O(n) 시간이 걸린다 : timeout * attachment 개수</li><li>Asynch로 O(1)만에 끝내도록 튜닝 필요하다</li></ul></li><li>Failover<ul><li><code>attachment</code>는 단순 부가 정보임에도 불구하고 attachmentService에서 exception이 발생하면, 아무 정보도 내려줄 수 없음<br><code>attach</code>는 실패해도 <code>Board</code> 정보와 나머지 성공한 <code>attachment</code>는 보여줘야 한다</li></ul></li></ol><p>아래는 100번 writer가 없어서(404) 오류가 난 예제이다.</p><p><code>GET /boards/100?attachment=comments,writer</code> </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">   <span class="attr">"id"</span>:<span class="number">1</span>,</span><br><span class="line">   <span class="attr">"title"</span>:<span class="string">"title1"</span>,</span><br><span class="line">   <span class="attr">"content"</span>:<span class="string">"content1"</span>,</span><br><span class="line">   <span class="attr">"comments"</span>:[  </span><br><span class="line">      &#123;  </span><br><span class="line">         <span class="attr">"id"</span>:<span class="number">1</span>,</span><br><span class="line">         <span class="attr">"email"</span>:<span class="string">"Eliseo@gardner.biz"</span>,</span><br><span class="line">         <span class="attr">"body"</span>:<span class="string">"laudantium enim quasi est quidem magnam voluptate ipsam eos\ntempora quo necessitatibus\ndolor quam autem quasi\nreiciendis et nam sapiente accusantium"</span></span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>부가 정보</code>인 댓글을 가져오려고 하는데 실패해서 중요한 게시글도 못 가져오면 좋은 설계라고 할 수 있을까? 다음번에는 위의 두 가지 단점을 중점으로 개선해나가려고 한다.</p>]]></content>
      
      <categories>
          
          <category> practice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> aop </tag>
            
            <tag> interceptor </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Framework 5.0.4.RELEASE Reference Web Servlet (Chapter1)</title>
      <link href="/2018/03/11/Spring-Framework-5.0.4.RELEASE-Reference-Web-Servlet(Chapter1)/"/>
      <content type="html"><![CDATA[<h1 id="글에-앞서서"><a href="#글에-앞서서" class="headerlink" title="글에 앞서서"></a>글에 앞서서</h1><ul><li>본문은 Spring Framework Version 5의 습득을 위한 글이다.</li><li>이 글을 상업적 목적으로 쓰지 않았다<blockquote><p>Authors<br>Rod Johnson , Juergen Hoeller , Keith Donald , Colin Sampaleanu , Rob Harrop , Thomas Risberg , Alef Arendsen , Darren Davison , Dmitriy Kopylenko , Mark Pollack , Thierry Templier , Erwin Vervaet , Portia Tung , Ben Hale , Adrian Colyer , John Lewis , Costin Leau , Mark Fisher , Sam Brannen , Ramnivas Laddad , Arjen Poutsma , Chris Beams , Tareq Abedrabbo , Andy Clement , Dave Syer , Oliver Gierke , Rossen Stoyanchev , Phillip Webb , Rob Winch , Brian Clozel , Stephane Nicoll , Sebastien Deleuze</p><p>Copyright © 2004-2016</p><p>Copies of this document may be made for your own use and for distribution to others, provided that you do not charge any fee for such copies and further provided that each copy contains this Copyright Notice, whether distributed in print or electronically.</p><footer><strong>원본</strong><cite><a href="https://docs.spring.io/spring/docs/5.0.4.RELEASE/spring-framework-reference/" target="_blank" rel="noopener">docs.spring.io/spring/docs/5.0.4.RELEASE/spring-framework-reference</a></cite></footer></blockquote></li></ul><h1 id="1-Spring-Web-MVC"><a href="#1-Spring-Web-MVC" class="headerlink" title="1. Spring Web MVC"></a>1. Spring Web MVC</h1><h1 id="1-2-DispatcherServlet"><a href="#1-2-DispatcherServlet" class="headerlink" title="1.2. DispatcherServlet"></a>1.2. DispatcherServlet</h1><h2 id="1-2-DispatcherServlet-1"><a href="#1-2-DispatcherServlet-1" class="headerlink" title="1.2. DispatcherServlet"></a>1.2. DispatcherServlet</h2><p><img src="https://nesoy.github.io/assets/posts/20170217/2.PNG" alt="a"></p><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/app-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>app<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span><span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>app<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/app/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://docs.spring.io/spring/docs/5.0.4.RELEASE/spring-framework-reference/images/mvc-context-hierarchy.png" alt="b"></p><p><strong>serlvet-context.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"org.example"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cnotext:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>application-context.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"org.example"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cnotext:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="1-3-Filters"><a href="#1-3-Filters" class="headerlink" title="1.3. Filters"></a>1.3. Filters</h1><h2 id="1-3-Filters-1"><a href="#1-3-Filters-1" class="headerlink" title="1.3. Filters"></a>1.3. Filters</h2><p><code>spring-web</code> 모듈은 몇가지 유용한 필터를 제공한다</p><ul><li><code>HttpPutFormContentFilter</code> : browser는 form의 요청을 <code>GET</code>, <code>POST</code>만 사용할 수 있으나, 해당 필터를 사용해서 <code>PUT</code>, <code>PATCH</code>요청도 해석할 수 있음</li><li><code>ShallowETagHeaderFilter</code> : 응답값을 버퍼링하고 ETag값을 계산</li></ul><h1 id="1-4-Annotated-Controllers"><a href="#1-4-Annotated-Controllers" class="headerlink" title="1.4. Annotated Controllers"></a>1.4. Annotated Controllers</h1><h2 id="1-4-2-RequestMapping"><a href="#1-4-2-RequestMapping" class="headerlink" title="1.4.2. RequestMapping"></a>1.4.2. RequestMapping</h2><p><strong>RequestMapping의 shortcut</strong></p><ul><li><code>@GetMapping</code></li><li><code>@PostMapping</code></li><li><code>@PutMapping</code></li><li><code>@DeleteMapping</code></li><li><code>@PatchMapping</code></li></ul><h3 id="URI-patterns"><a href="#URI-patterns" class="headerlink" title="URI patterns"></a>URI patterns</h3><p><strong>wildcards</strong></p><p><code>?</code>, <code>*</code>, <code>**</code> 등의 와일드 카드 사용 가능</p><p><strong>regx</strong></p><p><code>/spring-web-3.0.5.jar</code> 요청에 대한 매핑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/&#123;name:[a-z-]+&#125;-&#123;version:\\d\\.\\d\\.\\d&#125;&#123;ext:\\.[a-z]+&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(@PathVariables String name, @PathVariable String version, @PathVariable String ext)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-2-RequestMapping-1"><a href="#1-4-2-RequestMapping-1" class="headerlink" title="1.4.2. RequestMapping"></a>1.4.2. RequestMapping</h2><h3 id="Pattern-comparison"><a href="#Pattern-comparison" class="headerlink" title="Pattern comparison"></a>Pattern comparison</h3><p>요청이 여러 URL 패턴에 매칭되었을 때, <code>AntPathMatcher.getPatternComparator(String path)</code>에 의해 더 정확한 패턴에 매칭됨</p><h3 id="Consumable-media-types"><a href="#Consumable-media-types" class="headerlink" title="Consumable media types"></a>Consumable media types</h3><p><strong>Request Header의 <code>Content-Type</code>에 매칭</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(path = <span class="string">"/pets"</span>, consumes = <span class="string">"application/json"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPet</span><span class="params">(@RequestBody Pet pet)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Producible-media-types"><a href="#Producible-media-types" class="headerlink" title="Producible media types"></a>Producible media types</h3><p><strong>RequestHeader의 <code>Accept</code>에 매칭</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(path = <span class="string">"/pets/&#123;petId&#125;"</span>, produces = <span class="string">"application/json;charset=UTF-8"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Pet <span class="title">getPet</span><span class="params">(@PathVariable String petId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Parameters-headers"><a href="#Parameters-headers" class="headerlink" title="Parameters, headers"></a>Parameters, headers</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(path = <span class="string">"/pets/&#123;petId&#125;"</span>, params = <span class="string">"myParam=myValue"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPet</span><span class="params">(@PathVariable String petId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(path = <span class="string">"/pets"</span>, headers = <span class="string">"myHeader=myValue"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPet</span><span class="params">(@PathVariable String petId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-3-Handler-Methods"><a href="#1-4-3-Handler-Methods" class="headerlink" title="1.4.3. Handler Methods"></a>1.4.3. Handler Methods</h2><h3 id="Method-Arguments"><a href="#Method-Arguments" class="headerlink" title="Method Arguments"></a>Method Arguments</h3><table><thead><tr><th>Controller method arguments</th><th>Description</th></tr></thead><tbody><tr><td><code>javax.servlet.http.HttpSession</code></td><td>현재 세션 정보(Thread-safe하지 않음)</td></tr><tr><td><code>java.security.Principal</code></td><td>인증된 유저 정보</td></tr><tr><td><code>java.util.Locale</code></td><td>요청의 Locale 정보, <code>LocaleResolver</code>로 인해 계산</td></tr><tr><td>java6+: <code>java.util.TimeZone</code><br>java8+: <code>java.time.ZoneId</code></td><td><code>LocaleContextResolver</code>에 의해 계산</td></tr><tr><td><code>@PathVariable</code></td><td></td></tr><tr><td><code>@MatrixVariable</code></td><td></td></tr><tr><td><code>@RequestParam</code></td><td></td></tr><tr><td><code>@RequestHeader</code></td><td></td></tr><tr><td><code>@CookieValue</code></td><td></td></tr><tr><td><code>@RequestBody</code></td><td></td></tr><tr><td><code>HttpEntity&lt;B&gt;</code></td><td></td></tr><tr><td><code>@RequestPart</code></td><td></td></tr><tr><td><code>RedirectAttributes</code></td><td></td></tr><tr><td><code>@ModelAttribute</code></td><td></td></tr><tr><td><code>Errors</code>, <code>BindingResult</code></td><td></td></tr><tr><td><code>@RequestAttribute</code></td><td></td></tr></tbody></table><h2 id="1-4-3-Handler-Methods-1"><a href="#1-4-3-Handler-Methods-1" class="headerlink" title="1.4.3. Handler Methods"></a>1.4.3. Handler Methods</h2><h3 id="Return-Values"><a href="#Return-Values" class="headerlink" title="Return Values"></a>Return Values</h3><table><thead><tr><th>Controller method return value</th><th>Description</th></tr></thead><tbody><tr><td><code>@ResponseBody</code></td><td><code>HttpMessageConverter</code>에 의해 변환되어 응답에 쓰임</td></tr><tr><td><code>HttpEntity&lt;B&gt;</code>, <code>ResponseEntity&lt;B&gt;</code></td><td>header와 body를 가지며, body는 <code>HttpMessageConverter</code>에 의해 변환됨</td></tr><tr><td><code>HttpHeaders</code></td><td>body가 없이 header만 응답</td></tr><tr><td><code>String</code></td><td>viewName</td></tr><tr><td><code>View</code></td><td></td></tr><tr><td><code>void</code></td><td><code>ServletResponse</code>, <code>OuputStream</code>을 파라미터로 받았거나, <code>@ResponseStatus</code>가 메서드에 등록된 경우에<br>모든 처리가 완료된 것으로 간주</td></tr><tr><td><code>DeferredResult&lt;V&gt;</code></td><td>위 반환값으로 다른 스레드(any thread)에서 비동기로 반환</td></tr><tr><td><code>Callable&lt;V&gt;</code></td><td>위 반환값으로 Spring MVC가 관리하는 스레드에서 비동기로 반환</td></tr><tr><td>Reactive types<br>Reactor, RxJava, etc.</td><td></td></tr><tr><td>그 외</td><td>String의 경우 viewName으로 간주, 그 외에는 <code>@ModelAttribute</code>로 간주</td></tr></tbody></table><h2 id="1-4-3-Handler-Methods-2"><a href="#1-4-3-Handler-Methods-2" class="headerlink" title="1.4.3. Handler Methods"></a>1.4.3. Handler Methods</h2><h3 id="Jackson-JSON"><a href="#Jackson-JSON" class="headerlink" title="Jackson JSON"></a>Jackson JSON</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="meta">@JsonView</span>(User.WithoutPasswordView<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">User</span> <span class="title">getUser</span>() </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">"eric"</span>, <span class="string">"7!jd#h23"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WithoutPasswordView</span> </span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WithPasswordView</span> <span class="keyword">extends</span> <span class="title">WithoutPasswordView</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonView</span>(WithoutPasswordView<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">getUsername</span>() </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonView</span>(WithPasswordView<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">getPassword</span>() </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-5-Binder-Methods"><a href="#1-4-5-Binder-Methods" class="headerlink" title="1.4.5. Binder Methods"></a>1.4.5. Binder Methods</h2><p><strong>custom editor</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@InitBinder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initBinder</span><span class="params">(WebDataBinder binder)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        dateFormat.setLenient(<span class="keyword">false</span>);</span><br><span class="line">        binder.registerCustomEditor(Date<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">CustomDateEditor</span>(<span class="title">dateFormat</span>, <span class="title">false</span>))</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>formatter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@InitBinder</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initBinder</span><span class="params">(WebDataBinder binder)</span> </span>&#123;</span><br><span class="line">        binder.addCustomFormatter(<span class="keyword">new</span> DateFormatter(<span class="string">"yyyy-MM-dd"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-6-Exception-Methods"><a href="#1-4-6-Exception-Methods" class="headerlink" title="1.4.6. Exception Methods"></a>1.4.6. Exception Methods</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(IOException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ResponseEntity</span>&lt;<span class="title">String</span>&gt; <span class="title">handle</span>(<span class="title">IOException</span> <span class="title">ex</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>@ControllerAdvice</code>에서도 사용 가능</p></blockquote><h2 id="1-4-7-Controller-Advice"><a href="#1-4-7-Controller-Advice" class="headerlink" title="1.4.7. Controller Advice"></a>1.4.7. Controller Advice</h2><p><code>@ExceptionHandler</code>, <code>@InitBinder</code>, <code>@ModelAttribute</code> 등의 처리는 <code>@ControllerAdvice</code>에서 할 수 있음</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Target all Controllers annotated with @RestController</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span>(annotations = RestController<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ExampleAdvice1</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Target all Controllers within specific packages</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span>(<span class="string">"org.example.controllers"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleAdvice2</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Target all Controllers assignable to specific classes</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span>(assignableTypes = &#123;ControllerInterface<span class="class">.<span class="keyword">class</span>, <span class="title">AbstractController</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ExampleAdvice3</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="1-5-URI-Links"><a href="#1-5-URI-Links" class="headerlink" title="1.5. URI Links"></a>1.5. URI Links</h1><h2 id="1-5-1-UriComponents"><a href="#1-5-1-UriComponents" class="headerlink" title="1.5.1. UriComponents"></a>1.5.1. UriComponents</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String uriTemplate = <span class="string">"http://example.com/hotels/&#123;hotel&#125;"</span>;</span><br><span class="line"></span><br><span class="line">UriComponents uriComponents = UriComponentsBuilder.fromUriString(uriTemplate)  </span><br><span class="line">        .queryParam(<span class="string">"q"</span>, <span class="string">"&#123;q&#125;"</span>)  </span><br><span class="line">        .build(); </span><br><span class="line"></span><br><span class="line">URI uri = uriComponents.expand(<span class="string">"Westin"</span>, <span class="string">"123"</span>).encode().toUri();  <span class="comment">// http://example.com/hotels/Westin?q=123</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">URI uri = UriComponentsBuilder.fromUriString(uriTemplate)</span><br><span class="line">        .queryParam(<span class="string">"q"</span>, <span class="string">"&#123;q&#125;"</span>)</span><br><span class="line">        .buildAndExpand(<span class="string">"Westin"</span>, <span class="string">"123"</span>)</span><br><span class="line">        .encode()</span><br><span class="line">        .toUri();</span><br></pre></td></tr></table></figure><h1 id="1-6-Async-Requests"><a href="#1-6-Async-Requests" class="headerlink" title="1.6. Async Requests"></a>1.6. Async Requests</h1><h2 id="1-6-Async-Requests-1"><a href="#1-6-Async-Requests-1" class="headerlink" title="1.6. Async Requests"></a>1.6. Async Requests</h2><p>Spring MVC는 Servlet 3.0을 확장하여 아래와 같은 기능을 제공한다</p><ul><li>하나의 비동기 결과값을 담는 <code>DeferredResult</code>, <code>Callable</code>을 반환할 수 있음</li><li><code>SSE</code>, <code>raw data</code>를 stream할 수 있음</li><li>reactive 동작</li></ul><h2 id="1-6-1-DeferredResult"><a href="#1-6-1-DeferredResult" class="headerlink" title="1.6.1. DeferredResult"></a>1.6.1. DeferredResult</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/quotes"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DeferredResult&lt;String&gt; <span class="title">quotes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DeferredResult&lt;String&gt; deferredResult = <span class="keyword">new</span> DeferredResult&lt;String&gt;();</span><br><span class="line">    <span class="comment">// Save the deferredResult somewhere..</span></span><br><span class="line">    <span class="keyword">return</span> deferredResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// From some other thread...</span></span><br><span class="line">deferredResult.setResult(data);</span><br></pre></td></tr></table></figure><blockquote><p>외부 이벤트, scheduled task 등의 다른 스레드에서 처리된 비동기 결과를 반환</p></blockquote><h2 id="1-6-2-Callable"><a href="#1-6-2-Callable" class="headerlink" title="1.6.2. Callable"></a>1.6.2. Callable</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Callable&lt;String&gt; <span class="title">processUpload</span><span class="params">(<span class="keyword">final</span> MultipartFile file)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Callable&lt;String&gt;() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"someView"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>미리 설정해둔 <code>TaskExecutor</code>에서 반환</p></blockquote><h2 id="1-6-3-Processing"><a href="#1-6-3-Processing" class="headerlink" title="1.6.3. Processing"></a>1.6.3. Processing</h2><p><strong>비동기 처리 개요</strong></p><ul><li><code>ServletRequest</code>의 <code>startAsync()</code>를 호출하여 비동기 모드로 사용할 수 있다<br>이로 인해, Servlet과 Filter를 종료시키지만 response는 남아 따로 처리하고 완료시킬 수 있게 된다</li><li><code>request.startAsync()</code>를 호출하면 추가적인 제어를 할 수 있는 <code>AsyncContext</code>가 반환된다(<code>dispatch(String)</code>, <code>setTimeout(long)</code>)</li><li><code>ServletRequest</code>는 현재 상태(초기화, dispatch, forward) 등을 파악할 수 있는 <code>DispatcherType</code>에 대한 접근을 제공한다</li></ul><h2 id="1-6-3-Processing-1"><a href="#1-6-3-Processing-1" class="headerlink" title="1.6.3. Processing"></a>1.6.3. Processing</h2><p><strong>DefferedResult</strong></p><ul><li>Controller는 <code>DeferredResult</code>를 반환하고, 이를 in-memory queue에 저장한다</li><li>Spring MVC가 <code>request.startAsync()</code>를 호출한다</li><li>그동안 <code>DispatcherServlet</code>과 <code>Filter</code>는 요청을 처리하는 스레드를 종료시킨다. response만 남겨둔다</li><li>어느 스레드에서 <code>DeferredResult</code>에 값을 넣으면, Spring MVC는 ServletContainer에 요청을 되돌린다(dispatch)</li><li><code>DispatcherServlet</code>이 다시 실행되며, 비동기 반환 값에 대한 처리가 시작된다</li></ul><h2 id="1-6-3-Processing-2"><a href="#1-6-3-Processing-2" class="headerlink" title="1.6.3. Processing"></a>1.6.3. Processing</h2><p><strong>Callable</strong></p><ul><li>Controller가 <code>Callable</code>을 반환한다</li><li>Spring MVC는 <code>request.startAsync()</code>를 호출하고, <code>Callable</code>가 <code>TaskExecutor</code>에 의해 다른 스레드에서 실행되도록 한다</li><li>그동안 <code>DispatcherServlet</code>과 <code>Filter</code>는 요청을 처리하는 스레드를 종료시킨다. response만 남겨둔다</li><li><code>Callable</code>에 완료되어 값이 반환되면, Spring MVC는 Servlet Container에 값을 되돌린다(dispatch)</li><li><code>DispatcherServlet</code>이 다시 실행되며, 비동기 반환 값에 대한 처리가 시작된다</li></ul><h2 id="1-6-3-Processing-3"><a href="#1-6-3-Processing-3" class="headerlink" title="1.6.3. Processing"></a>1.6.3. Processing</h2><h3 id="Exception-handling"><a href="#Exception-handling" class="headerlink" title="Exception handling"></a>Exception handling</h3><p><strong>DeferredResult</strong></p><p><code>DeferredResult</code>를 사용하면 <code>setResult</code>나 <code>setErrorResult</code>를 사용한다.<br>두 경우 모두 Spring MVC에서 Servlet Container로 완료 처리를 dispatch하며, 기존의 예외 처리 방식을 따르게 된다(<code>@ExceptionHandler</code> 등)</p><p><strong>Callable</strong></p><p>대부분 비슷하다. 다만 <code>Callable</code>에는 <code>setErrorResult</code> 등의 메서드가 없으므로, 스스로 exception을 throw한다.</p><h3 id="Interception"><a href="#Interception" class="headerlink" title="Interception"></a>Interception</h3><p><code>AsyncHandlerInterceptor</code>, <code>CallableProcessingInterceptor</code>, <code>DeferredResultProcessingInterceptor</code> 등이 존재</p><h2 id="1-6-3-Processing-4"><a href="#1-6-3-Processing-4" class="headerlink" title="1.6.3. Processing"></a>1.6.3. Processing</h2><h3 id="Compare-to-WebFlux"><a href="#Compare-to-WebFlux" class="headerlink" title="Compare to WebFlux"></a>Compare to WebFlux</h3><p>Servlet 3.0에서 비동기를 하는 방법은 <code>Filter-Serlvet chain</code>은 종료시킨채, reponse만 남겨두어 다른 스레드에서 응답을 채우는 방식<br>개별 요청에 대한 응답의 쓰기 작업은 여전히 <code>blocking I/O</code>으로 이루어지며,<br>WebFlux는 이를 <code>non-blocking I/O</code>으로 처리하는 것이 큰 차이점</p><p>또 하나는, WebFlux는 Controller의 메서드에 비동기 혹은 반응형 타입을 지원함</p><h2 id="1-6-4-HTTP-Streaming"><a href="#1-6-4-HTTP-Streaming" class="headerlink" title="1.6.4. HTTP Streaming"></a>1.6.4. HTTP Streaming</h2><p><code>DeferredResult</code>나 <code>Callable</code>은 비동기 처리 후, 한 번만 반환.<br><code>Streaming</code>은 여러번 반환</p><h3 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/events"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseBodyEmitter <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ResponseBodyEmitter emitter = <span class="keyword">new</span> ResponseBodyEmitter();</span><br><span class="line">    <span class="comment">// Save the emitter somewhere..</span></span><br><span class="line">    <span class="keyword">return</span> emitter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// In some other thread</span></span><br><span class="line">emitter.send(<span class="string">"Hello once"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// and again later on</span></span><br><span class="line">emitter.send(<span class="string">"Hello again"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// and done at some point</span></span><br><span class="line">emitter.complete();</span><br></pre></td></tr></table></figure><h2 id="1-6-4-HTTP-Streaming-1"><a href="#1-6-4-HTTP-Streaming-1" class="headerlink" title="1.6.4. HTTP Streaming"></a>1.6.4. HTTP Streaming</h2><h3 id="SSE-Server-Sent-Events"><a href="#SSE-Server-Sent-Events" class="headerlink" title="SSE(Server Sent Events)"></a>SSE(Server Sent Events)</h3><p><code>SseEmitter</code>는 <code>ResponseBodyEmitter</code>의 서브 클래스로서 <code>W3C SSE</code> 스펙을 준수하여 Controller에서 Stream을 생성하도록 함<br><a href="https://www.w3schools.com/html/html5_serversentevents.asp" target="_blank" rel="noopener">https://www.w3schools.com/html/html5_serversentevents.asp</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(path=<span class="string">"/events"</span>, produces=MediaType.TEXT_EVENT_STREAM_VALUE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> SseEmitter <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SseEmitter emitter = <span class="keyword">new</span> SseEmitter();</span><br><span class="line">    <span class="comment">// Save the emitter somewhere..</span></span><br><span class="line">    <span class="keyword">return</span> emitter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// In some other thread</span></span><br><span class="line">emitter.send(<span class="string">"Hello once"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// and again later on</span></span><br><span class="line">emitter.send(<span class="string">"Hello again"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// and done at some point</span></span><br><span class="line">emitter.complete();</span><br></pre></td></tr></table></figure><p>하지만 SSE는 IE에서 돌아가지 않으므로(망할), WebSocket과 SockJS 등을 사용할 것을 권장</p><h2 id="1-6-4-HTTP-Streaming-2"><a href="#1-6-4-HTTP-Streaming-2" class="headerlink" title="1.6.4. HTTP Streaming"></a>1.6.4. HTTP Streaming</h2><h3 id="Raw-data"><a href="#Raw-data" class="headerlink" title="Raw data"></a>Raw data</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/download"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> StreamingResponseBody <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> StreamingResponseBody() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(OutputStream outputStream)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="comment">// write...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-6-5-Reactive-Types"><a href="#1-6-5-Reactive-Types" class="headerlink" title="1.6.5. Reactive Types"></a>1.6.5. Reactive Types</h2><ul><li>단일 값(<code>Mono</code>, <code>Single</code>)에 대해서는 <code>DeferredResult</code>와 유사한 동작</li><li>여러 값(<code>Flux</code>, <code>Observable</code>) 등, <code>application/stream+json</code>이나 <code>text/event-stream</code> 유형의 값은 <code>ResponseBodyEmitter</code>, <code>SseEmitter</code>와 유사한 동작</li></ul><h2 id="1-6-6-Configuration"><a href="#1-6-6-Configuration" class="headerlink" title="1.6.6. Configuration"></a>1.6.6. Configuration</h2><h3 id="Servlet-Container"><a href="#Servlet-Container" class="headerlink" title="Servlet Container"></a>Servlet Container</h3><p><code>Filter</code>와 <code>ServletContainer</code>는 <code>asyncSupported</code>값이 있으며 이를 <code>true</code>로 해야한다</p><p><strong>Java</strong></p><p><code>AbstractAnnotationConfigDispatcherServletInitializer</code>로 Servlet Container를 사용한다면 자동으로 설정되어 있다</p><p><strong>web.xml</strong></p><p><code>&lt;async-supported&gt;true&lt;/async-supported&gt;</code>를 <code>DispatcherServlet</code> 설정과 <code>Filter</code> 설정에 추가한다<br><code>Filter Mapping</code>에 <code>&lt;dispatcher&gt;ASYNC&lt;/dispatcher&gt;</code>를 추가한다</p><h3 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h3><p><strong>Java</strong></p><p><code>WebMvcConfigurer</code>의 <code>configureAsyncSupport</code>를 사용</p><p><strong>xml</strong></p><p><code>&lt;mvc:annotation-driven&gt;</code> 아래에 <code>&lt;async-support&gt;</code> 선언</p><h1 id="1-7-CORS"><a href="#1-7-CORS" class="headerlink" title="1.7. CORS"></a>1.7. CORS</h1><h1 id="1-7-3-CrossOrigin"><a href="#1-7-3-CrossOrigin" class="headerlink" title="1.7.3. @CrossOrigin"></a>1.7.3. <code>@CrossOrigin</code></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/account"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CrossOrigin</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">retrieve</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>default</strong></p><ul><li>모든 origin 허용</li><li>모든 헤더 허용</li><li>모든 HTTP method 허용</li><li><code>maxAge</code>는 30분</li><li><code>allowedCredentials</code>는 기본적으로 비활성화됨.</li></ul><h2 id="1-7-3-CrossOrigin-1"><a href="#1-7-3-CrossOrigin-1" class="headerlink" title="1.7.3. @CrossOrigin"></a>1.7.3. <code>@CrossOrigin</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span>(origins = <span class="string">"http://domain2.com"</span>, maxAge = <span class="number">3600</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/account"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">retrieve</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-7-4-Global-Config"><a href="#1-7-4-Global-Config" class="headerlink" title="1.7.4. Global Config"></a>1.7.4. Global Config</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        registry.addMapping(<span class="string">"/api/**"</span>)</span><br><span class="line">            .allowedOrigins(<span class="string">"http://domain2.com"</span>)</span><br><span class="line">            .allowedMethods(<span class="string">"PUT"</span>, <span class="string">"DELETE"</span>)</span><br><span class="line">            .allowedHeaders(<span class="string">"header1"</span>, <span class="string">"header2"</span>, <span class="string">"header3"</span>)</span><br><span class="line">            .exposedHeaders(<span class="string">"header1"</span>, <span class="string">"header2"</span>)</span><br><span class="line">            .allowCredentials(<span class="keyword">true</span>).maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-7-5-CORS-Filter"><a href="#1-7-5-CORS-Filter" class="headerlink" title="1.7.5. CORS Filter"></a>1.7.5. CORS Filter</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Possibly...</span></span><br><span class="line"><span class="comment">// config.applyPermitDefaultValues()</span></span><br><span class="line"></span><br><span class="line">config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">config.addAllowedOrigin(<span class="string">"http://domain1.com"</span>);</span><br><span class="line">config.addAllowedHeader(<span class="string">""</span>);</span><br><span class="line">config.addAllowedMethod(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">source.registerCorsConfiguration(<span class="string">"/**"</span>, config);</span><br><span class="line"></span><br><span class="line">CorsFilter filter = <span class="keyword">new</span> CorsFilter(source);</span><br></pre></td></tr></table></figure><h2 id="1-9-HTTP-Caching"><a href="#1-9-HTTP-Caching" class="headerlink" title="1.9. HTTP Caching"></a>1.9. HTTP Caching</h2><h2 id="1-9-1-Cache-Control"><a href="#1-9-1-Cache-Control" class="headerlink" title="1.9.1. Cache-Control"></a>1.9.1. Cache-Control</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Cache for an hour - "Cache-Control: max-age=3600"</span></span><br><span class="line">CacheControl ccCacheOneHour = CacheControl.maxAge(<span class="number">1</span>, TimeUnit.HOURS);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prevent caching - "Cache-Control: no-store"</span></span><br><span class="line">CacheControl ccNoStore = CacheControl.noStore();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cache for ten days in public and private caches,</span></span><br><span class="line"><span class="comment">// public caches should not transform the response</span></span><br><span class="line"><span class="comment">// "Cache-Control: max-age=864000, public, no-transform"</span></span><br><span class="line">CacheControl ccCustom = CacheControl.maxAge(<span class="number">10</span>, TimeUnit.DAYS)</span><br><span class="line">                                    .noTransform().cachePublic();</span><br></pre></td></tr></table></figure><h2 id="1-9-2-Static-resources"><a href="#1-9-2-Static-resources" class="headerlink" title="1.9.2. Static resources"></a>1.9.2. Static resources</h2><p><code>ResourceHttpRequestHandler</code>를 설정해서 <code>Last-Modified</code> 헤더와 <code>Cache-Control</code> 헤더를 적절히 변경할 수 있다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/resources/**"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"/public-resources/"</span>)</span><br><span class="line">                .setCacheControl(CacheControl.maxAge(<span class="number">1</span>, TimeUnit.HOURS).cachePublic());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-9-3-Controller-caching"><a href="#1-9-3-Controller-caching" class="headerlink" title="1.9.3. @Controller caching"></a>1.9.3. <code>@Controller caching</code></h2><p><code>Controller</code>는 <code>Cache-Control</code>, <code>ETag</code>, <code>If-Modified-Since</code> 등의 다양한 헤더를 다룰 수 있다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/book/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Book&gt; <span class="title">showBook</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Book book = findBook(id);</span><br><span class="line">    String version = book.getVersion();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ResponseEntity</span><br><span class="line">                .ok()</span><br><span class="line">                .cacheControl(CacheControl.maxAge(<span class="number">30</span>, TimeUnit.DAYS))</span><br><span class="line">                .eTag(version) <span class="comment">// lastModified is also available</span></span><br><span class="line">                .body(book);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드에서 응답에 <code>ETag</code> 및 <code>Cache-Control</code> 헤더가 포함되며<br>클라이언트가 보낸 조건부 헤더가 컨트롤러에서 설정한 캐시 정보와 일치하면 <code>HTTP 304 Not Modified</code> 응답의 빈 body를 내려보낸다</p><h2 id="1-9-3-Controller-caching-1"><a href="#1-9-3-Controller-caching-1" class="headerlink" title="1.9.3. @Controller caching"></a>1.9.3. <code>@Controller caching</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">myHandleMethod</span><span class="params">(WebRequest webRequest, Model model)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> lastModified = <span class="comment">// 1. application-specific calculation</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (request.checkNotModified(lastModified)) &#123;</span><br><span class="line">        <span class="comment">// 2. shortcut exit - no further processing necessary</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. or otherwise further request processing, actually preparing content</span></span><br><span class="line">    model.addAttribute(...);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"myViewName"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>request.checkNotModified(lastModified)</code> : <code>true</code>를 반환하는 경우, response status와 header를 설정</li><li><code>return null</code> : <code>request.checkNotModified()</code>와 결합하여 Spring MVC가 요청을 처리하지 않게 만듦</li></ul><h2 id="1-9-4-ETag-Filter"><a href="#1-9-4-ETag-Filter" class="headerlink" title="1.9.4. ETag Filter"></a>1.9.4. ETag Filter</h2><ul><li><code>ShallowEtagHeaderFilter</code>가 응답의 내용을 캐싱하고 ETag 헤더로 내보낼 MD5 해시를 생성</li><li>클라이언트가 동일 자원에 대한 요청을 보내면 해당 해시를 <code>If-None-Match</code> 값으로 사용</li><li>동일한 요청일 경우 필터가 304 응답</li><li>네트워크 대역 트래픽을 낮추는 효과는 있지만, CPU 사용은 낮추지 못함</li><li>앞서 설명한 <code>Controller</code> 수준의 다른 전략들은 연산을 줄일 수 있음</li></ul><h1 id="1-10-View-Technologies"><a href="#1-10-View-Technologies" class="headerlink" title="1.10. View Technologies"></a>1.10. View Technologies</h1><h1 id="1-10-View-Technologies-1"><a href="#1-10-View-Technologies-1" class="headerlink" title="1.10. View Technologies"></a>1.10. View Technologies</h1><ul><li>Thymeleaf</li><li>FreeMarker</li><li>Groovy Markup</li><li>Script Views<ul><li>Mustache</li><li>React</li><li>ext.</li></ul></li><li>JSP &amp; JSTL</li><li>Tiles</li><li>RSS, Aom</li><li>PDF, Excel</li><li>Jackson</li><li>XML</li><li>XSLT</li></ul><h1 id="1-11-MVC-Config"><a href="#1-11-MVC-Config" class="headerlink" title="1.11. MVC Config"></a>1.11. MVC Config</h1><h2 id="1-11-2-MVC-Config-API"><a href="#1-11-2-MVC-Config-API" class="headerlink" title="1.11.2. MVC Config API"></a>1.11.2. MVC Config API</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Implement configuration methods...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>보통은 <code>WebMvcConfigurerAdapter</code>를 상속받아서 쓰지 않을까…</p><h2 id="1-11-3-Type-conversion"><a href="#1-11-3-Type-conversion" class="headerlink" title="1.11.3. Type conversion"></a>1.11.3. Type conversion</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-11-4-Validation"><a href="#1-11-4-Validation" class="headerlink" title="1.11.4. Validation"></a>1.11.4. Validation</h2><p><strong>global validator</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Validator <span class="title">getValidator</span><span class="params">()</span></span>; &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>local validator</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InitBinder</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initBinder</span><span class="params">(WebDataBinder binder)</span> </span>&#123;</span><br><span class="line">        binder.addValidators(<span class="keyword">new</span> FooValidator());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-11-5-Interceptors"><a href="#1-11-5-Interceptors" class="headerlink" title="1.11.5. Interceptors"></a>1.11.5. Interceptors</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LocaleInterceptor());</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> ThemeInterceptor()).addPathPatterns(<span class="string">"/**"</span>).excludePathPatterns(<span class="string">"/admin/**"</span>);</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> SecurityInterceptor()).addPathPatterns(<span class="string">"/secure/*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-11-6-Content-Types"><a href="#1-11-6-Content-Types" class="headerlink" title="1.11.6. Content Types"></a>1.11.6. Content Types</h2><p><code>ContentNegotiationConfigurer</code>를 통해 확장자로 <code>MediaType</code>을 결정할 수 있음</p><p>예) <code>/a.json</code>의 응답을 <code>application/json</code>으로 변경</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureContentNegotiation</span><span class="params">(ContentNegotiationConfigurer configurer)</span> </span>&#123;</span><br><span class="line">        configurer.mediaType(<span class="string">"json"</span>, MediaType.APPLICATION_JSON);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-11-7-Message-Converters"><a href="#1-11-7-Message-Converters" class="headerlink" title="1.11.7. Message Converters"></a>1.11.7. Message Converters</h2><p>아래와 같이 custom ObjectMapper를 주입할 수 있다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        Jackson2ObjectMapperBuilder builder = <span class="keyword">new</span> Jackson2ObjectMapperBuilder()</span><br><span class="line">                .indentOutput(<span class="keyword">true</span>)</span><br><span class="line">                .dateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>))</span><br><span class="line">                .modulesToInstall(<span class="keyword">new</span> ParameterNamesModule());</span><br><span class="line">        converters.add(<span class="keyword">new</span> MappingJackson2HttpMessageConverter(builder.build()));</span><br><span class="line">        converters.add(<span class="keyword">new</span> MappingJackson2XmlHttpMessageConverter(builder.xml().build()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>classpath 내에 아래 모듈이 발견되면 자동으로 설정된다</p><ul><li><code>jackson-datatype-jdk7</code> : <code>java.nio.file.Path</code> 등의 Java 7에 정의된 타입</li><li><code>jackson-datatype-joda</code> : Joda-Time 타입 지원</li><li><code>jackson-datatype-jsr310</code> : Java 8에 정의된 Date, Time 타입 지원</li><li><code>jackson-datatype-jdk8</code> : <code>Optional</code>등 Java 8에 정의된 타입</li></ul><p>그 외</p><ul><li><code>jackson-datatype-money</code>: <code>javax.money</code> 타입 지원(unofficial module)</li><li><code>jackson-datatupe-hibernate</code> : <code>lazy-loading</code>등의 하이버네이트 지원</li></ul><h2 id="1-11-8-View-Controllers"><a href="#1-11-8-View-Controllers" class="headerlink" title="1.11.8. View Controllers"></a>1.11.8. View Controllers</h2><p>특정 URL을 바로 view로 매핑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"home"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-11-10-Static-Resources"><a href="#1-11-10-Static-Resources" class="headerlink" title="1.11.10. Static Resources"></a>1.11.10. Static Resources</h2><p><code>/resources</code>로 들어오는 요청을 <code>/public</code>혹은 classpath 내의 <code>/static</code>에서 찾도록 설정.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/resources/**"</span>)</span><br><span class="line">            .addResourceLocations(<span class="string">"/public"</span>, <span class="string">"classpath:/static/"</span>)</span><br><span class="line">            .setCachePeriod(<span class="number">31556926</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> spring </category>
          
          <category> reference </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> reference </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Framework 5.0.4.RELEASE Reference Core (Chapter5)</title>
      <link href="/2018/03/11/Spring-Framework-5.0.4.RELEASE-Reference-Core-(Chapter5)/"/>
      <content type="html"><![CDATA[<h1 id="글에-앞서서"><a href="#글에-앞서서" class="headerlink" title="글에 앞서서"></a>글에 앞서서</h1><ul><li>본문은 Spring Framework Version 5의 습득을 위한 글이다.</li><li>이 글을 상업적 목적으로 쓰지 않았다<blockquote><p>Authors<br>Rod Johnson , Juergen Hoeller , Keith Donald , Colin Sampaleanu , Rob Harrop , Thomas Risberg , Alef Arendsen , Darren Davison , Dmitriy Kopylenko , Mark Pollack , Thierry Templier , Erwin Vervaet , Portia Tung , Ben Hale , Adrian Colyer , John Lewis , Costin Leau , Mark Fisher , Sam Brannen , Ramnivas Laddad , Arjen Poutsma , Chris Beams , Tareq Abedrabbo , Andy Clement , Dave Syer , Oliver Gierke , Rossen Stoyanchev , Phillip Webb , Rob Winch , Brian Clozel , Stephane Nicoll , Sebastien Deleuze</p><p>Copyright © 2004-2016</p><p>Copies of this document may be made for your own use and for distribution to others, provided that you do not charge any fee for such copies and further provided that each copy contains this Copyright Notice, whether distributed in print or electronically.</p><footer><strong>원본</strong><cite><a href="https://docs.spring.io/spring/docs/5.0.4.RELEASE/spring-framework-reference/" target="_blank" rel="noopener">docs.spring.io/spring/docs/5.0.4.RELEASE/spring-framework-reference</a></cite></footer></blockquote></li></ul><h1 id="5-Aspect-Oriented-Programming-with-Spring"><a href="#5-Aspect-Oriented-Programming-with-Spring" class="headerlink" title="5. Aspect Oriented Programming with Spring"></a>5. Aspect Oriented Programming with Spring</h1><h1 id="5-1-Introduction"><a href="#5-1-Introduction" class="headerlink" title="5.1. Introduction"></a>5.1. Introduction</h1><h2 id="5-1-2-Spring-AOP-capabilities-and-goals"><a href="#5-1-2-Spring-AOP-capabilities-and-goals" class="headerlink" title="5.1.2. Spring AOP capabilities and goals"></a>5.1.2. Spring AOP capabilities and goals</h2><ul><li>순수 자바로 구현하여, 특정 컴파일러에 의존하지 않음</li><li>메서드 실행 join point만 지원</li><li>Spring AOP의 목적은 완벽한 AOP지원이 아닌, 엔터프라이즈 어플리케이션의 각종 이슈를 해결하기 위해 AOP와 Spring IoC를 융화시키는 것</li><li>여타 AOP Framework와 경쟁하지 않을 것(Spring의 Proxy 방식의 AOP와 본격적인 AspectJ 등의 프레임워크는 보완관계에 있음)<a id="more"></a><h2 id="5-1-3-AOP-Proxies"><a href="#5-1-3-AOP-Proxies" class="headerlink" title="5.1.3. AOP Proxies"></a>5.1.3. AOP Proxies</h2></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Adder</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdderImpl</span> <span class="keyword">implements</span> <span class="title">Adder</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdderAopProxyParameterLogger</span> <span class="keyword">implements</span> <span class="title">Adder</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="meta">@Qualifier</span>(<span class="string">"adderImpl"</span>)</span><br><span class="line">  <span class="keyword">private</span> Adder target;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    log.debug(<span class="string">"a : &#123;&#125;, b : &#123;&#125;"</span>, a, b);</span><br><span class="line">    <span class="keyword">return</span> target.add(a, b);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Spring AOP에서 AOP 프록시를 사용하기 위해, 표준 JDK dynamic proxy를 사용한다</p></blockquote><h2 id="5-2-1-Enabling-AspectJ-Support"><a href="#5-2-1-Enabling-AspectJ-Support" class="headerlink" title="5.2.1. Enabling @AspectJ Support"></a>5.2.1. Enabling <code>@AspectJ</code> Support</h2><ul><li><code>@AspectJ</code> 지원은 <code>Java</code> 스타일과 <code>xml</code> 스타일로 설정할 수 있다</li><li><code>aspectjweaver.jar</code>가 경로내에 존재해야한다</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-2-Declaring-an-aspect"><a href="#5-2-2-Declaring-an-aspect" class="headerlink" title="5.2.2. Declaring an aspect"></a>5.2.2. Declaring an aspect</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceParameterLogAspect</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-3-Declaring-a-pointcut"><a href="#5-2-3-Declaring-a-pointcut" class="headerlink" title="5.2.3. Declaring a pointcut"></a>5.2.3. Declaring a pointcut</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceParameterLogAspect</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Pointcut</span>(<span class="string">"@annotation(org.springframework.stereotype.Service)"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointcut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pointcut 종류 : <a href="https://docs.spring.io/spring/docs/5.0.4.RELEASE/spring-framework-reference/core.html#aop-pointcuts-designators" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/5.0.4.RELEASE/spring-framework-reference/core.html#aop-pointcuts-designators</a></p><h2 id="5-2-4-Declaring-a-advice"><a href="#5-2-4-Declaring-a-advice" class="headerlink" title="5.2.4. Declaring a advice"></a>5.2.4. Declaring a advice</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceParameterLogAspect</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Pointcut</span>(<span class="string">"@annotation(org.springframework.stereotype.Service)"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointcut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Before</span>(<span class="string">"pointcut()"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@AfterReturning</span>(pointcut = <span class="string">"pointcut()"</span>, returning = <span class="string">"retVal"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object retVal)</span> </span>&#123; ... &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@AfterThrowing</span>(pointcut = <span class="string">"pointcut()"</span>, throwing = <span class="string">"ex"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(DataAccessException ex)</span> </span>&#123; ... &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Around</span>(<span class="string">"pointcut()"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-4-Declaring-a-advice-1"><a href="#5-2-4-Declaring-a-advice-1" class="headerlink" title="5.2.4. Declaring a advice"></a>5.2.4. Declaring a advice</h2><h3 id="Passing-PArameters-to-advice"><a href="#Passing-PArameters-to-advice" class="headerlink" title="Passing PArameters to advice"></a>Passing PArameters to advice</h3><p><strong>Parameter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"com.xyz.myapp.SystemArchitecture.dataAccessOperation() &amp;&amp; args(account,..)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">accountDataAccessOperation</span><span class="params">(Account account)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span>(<span class="string">"accountDataAccessOperation(account)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Annotation</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Auditable &#123;</span><br><span class="line">    <span class="function">AuditCode <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span>(<span class="string">"com.xyz.lib.Pointcuts.anyPublicMethod() &amp;&amp; @annotation(auditable)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">audit</span><span class="params">(Auditable auditable)</span> </span>&#123;</span><br><span class="line">    AuditCode code = auditable.value();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-4-Declaring-a-advice-2"><a href="#5-2-4-Declaring-a-advice-2" class="headerlink" title="5.2.4. Declaring a advice"></a>5.2.4. Declaring a advice</h2><h3 id="Advice-ordering"><a href="#Advice-ordering" class="headerlink" title="Advice ordering"></a>Advice ordering</h3><p><strong><code>org.springframework.core.Ordered</code> 인터페이스 구현</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceParameterLogAspect</span> <span class="keyword">implements</span> <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Pointcut</span>(<span class="string">"@annotation(org.springframework.stereotype.Service)"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointcut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Before</span>(<span class="string">"pointcut()"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>@Order</code> 애노테이션</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Order</span>(<span class="number">0</span>)</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceParameterLogAspect</span> <span class="keyword">implements</span> <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Pointcut</span>(<span class="string">"@annotation(org.springframework.stereotype.Service)"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointcut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Before</span>(<span class="string">"pointcut()"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-6-Proxying-mechanisms"><a href="#5-6-Proxying-mechanisms" class="headerlink" title="5.6. Proxying mechanisms"></a>5.6. Proxying mechanisms</h2><p>Advice 대상 object가 interface를 구현하고 있다면 JDK Dynamic Proxy를, 그렇지 않다면 CGLIB를 사용한다(상속)</p><p>CGLIB로 AOP를 사용할 때에는 주의점이 몇가지 있다</p><ul><li><code>final</code>메서드는 <code>override</code>가 불가하기 때문에 AOP를 사용할 수 없다</li><li>Spring 3.2부터는 CGLIB 라이브러리가 포함되어 별도로 의존성을 추가할 필요가 없다</li><li>Spring 4.0부터 CGLIB에 의해 대상 클래스의 생성자가 두 번 호출되는 현상이 수정되었다</li></ul><p>강제로 CGLIB를 사용하기 위해서는 <code>proxyTargetClass</code>를 <code>true</code>로 설정한다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAspectJAutoProxy</span>(proxyTargetClass = <span class="keyword">true</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> spring </category>
          
          <category> reference </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> reference </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Framework 5.0.4.RELEASE Reference Core (Chapter3)</title>
      <link href="/2018/03/11/Spring-Framework-5.0.4.RELEASE-Reference-Core-(Chapter3)/"/>
      <content type="html"><![CDATA[<h1 id="글에-앞서서"><a href="#글에-앞서서" class="headerlink" title="글에 앞서서"></a>글에 앞서서</h1><ul><li>본문은 Spring Framework Version 5의 습득을 위한 글이다.</li><li>이 글을 상업적 목적으로 쓰지 않았다<blockquote><p>Authors<br>Rod Johnson , Juergen Hoeller , Keith Donald , Colin Sampaleanu , Rob Harrop , Thomas Risberg , Alef Arendsen , Darren Davison , Dmitriy Kopylenko , Mark Pollack , Thierry Templier , Erwin Vervaet , Portia Tung , Ben Hale , Adrian Colyer , John Lewis , Costin Leau , Mark Fisher , Sam Brannen , Ramnivas Laddad , Arjen Poutsma , Chris Beams , Tareq Abedrabbo , Andy Clement , Dave Syer , Oliver Gierke , Rossen Stoyanchev , Phillip Webb , Rob Winch , Brian Clozel , Stephane Nicoll , Sebastien Deleuze</p><p>Copyright © 2004-2016</p><p>Copies of this document may be made for your own use and for distribution to others, provided that you do not charge any fee for such copies and further provided that each copy contains this Copyright Notice, whether distributed in print or electronically.</p><footer><strong>원본</strong><cite><a href="https://docs.spring.io/spring/docs/5.0.4.RELEASE/spring-framework-reference/" target="_blank" rel="noopener">docs.spring.io/spring/docs/5.0.4.RELEASE/spring-framework-reference</a></cite></footer></blockquote></li></ul><h1 id="Validation-Data-Binding-and-Type-Conversion"><a href="#Validation-Data-Binding-and-Type-Conversion" class="headerlink" title="Validation, Data Binding, and Type Conversion"></a>Validation, Data Binding, and Type Conversion</h1><h1 id="3-2-Validation-using-Spring’s-Validator-interface"><a href="#3-2-Validation-using-Spring’s-Validator-interface" class="headerlink" title="3.2. Validation using Spring’s Validator interface"></a>3.2. Validation using Spring’s Validator interface</h1><h2 id="3-2-Validation-using-Spring’s-Validator-interface-1"><a href="#3-2-Validation-using-Spring’s-Validator-interface-1" class="headerlink" title="3.2. Validation using Spring’s Validator interface"></a>3.2. Validation using Spring’s Validator interface</h2><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@lombok</span>.Data</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonValidator</span> <span class="keyword">implements</span> <span class="title">Validator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Person<span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">clazz</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">(Object obj, Errors e)</span> </span>&#123;</span><br><span class="line">        ValidationUtils.rejectIfEmpty(e, <span class="string">"name"</span>, <span class="string">"name.empty"</span>);</span><br><span class="line">        Person p = (Person) obj;</span><br><span class="line">        <span class="keyword">if</span> (p.getAge() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            e.rejectValue(<span class="string">"age"</span>, <span class="string">"negativevalue"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.getAge() &gt; <span class="number">110</span>) &#123;</span><br><span class="line">            e.rejectValue(<span class="string">"age"</span>, <span class="string">"too.darn.old"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Errors</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">rejectValue</span><span class="params">(String field, String errorCode)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">rejectValue</span><span class="params">(String field, String errorCode, String defaultValue)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-3-Resolving-codes-to-error-messages"><a href="#3-3-Resolving-codes-to-error-messages" class="headerlink" title="3.3. Resolving codes to error messages"></a>3.3. Resolving codes to error messages</h1><h2 id="3-3-Resolving-codes-to-error-messages-1"><a href="#3-3-Resolving-codes-to-error-messages-1" class="headerlink" title="3.3. Resolving codes to error messages"></a>3.3. Resolving codes to error messages</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public interface BindingResult extends Errors &#123;&#125;</span><br><span class="line"></span><br><span class="line">public interface Errors &#123;</span><br><span class="line">  &#x2F;&#x2F;...</span><br><span class="line">  List&lt;FieldError&gt; getFieldErrors();</span><br><span class="line">  &#x2F;&#x2F;...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class FieldError extends ObjectError &#123;&#125;</span><br><span class="line">public class ObjectError extends DefaultMessageSourceResolvable &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FieldError error &#x3D; bindingResult.getFieldErrors.get(0);</span><br><span class="line">String message &#x3D; messageSource.getMessage(error, Locale.KOREAN);</span><br></pre></td></tr></table></figure><p><code>errors.rejectValue(&quot;a&quot;, &quot;field.required&quot;)</code>가 실행됐을 때, <code>FieldError</code> 안의 codes 순서</p><ol><li><code>field.required.argumentName.a</code></li><li><code>field.required.a</code></li><li><code>field.required.java.lang.Integer</code></li><li><code>field.required</code></li></ol><h1 id="3-4-Bean-manipulation-and-the-BeanWrapper"><a href="#3-4-Bean-manipulation-and-the-BeanWrapper" class="headerlink" title="3.4. Bean manipulation and the BeanWrapper"></a>3.4. Bean manipulation and the BeanWrapper</h1><p><code>Bean</code> : <code>property(getter, setter)</code>를 가지고 있는 오브젝트</p><h2 id="3-4-1-Setting-and-getting-basic-and-nested-properties"><a href="#3-4-1-Setting-and-getting-basic-and-nested-properties" class="headerlink" title="3.4.1. Setting and getting basic and nested properties"></a>3.4.1. Setting and getting basic and nested properties</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Employee managingDirector;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> salary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">BeanWrapper company = <span class="keyword">new</span> BeanWrapperImpl(<span class="keyword">new</span> Company());</span><br><span class="line"><span class="comment">// setting the company name..</span></span><br><span class="line">company.setPropertyValue(<span class="string">"name"</span>, <span class="string">"Some Company Inc."</span>);</span><br><span class="line"><span class="comment">// ... can also be done like this:</span></span><br><span class="line">PropertyValue value = <span class="keyword">new</span> PropertyValue(<span class="string">"name"</span>, <span class="string">"Some Company Inc."</span>);</span><br><span class="line">company.setPropertyValue(value);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ok, let's create the director and tie it to the company:</span></span><br><span class="line">BeanWrapper jim = <span class="keyword">new</span> BeanWrapperImpl(<span class="keyword">new</span> Employee());</span><br><span class="line">jim.setPropertyValue(<span class="string">"name"</span>, <span class="string">"Jim Stravinsky"</span>);</span><br><span class="line">company.setPropertyValue(<span class="string">"managingDirector"</span>, jim.getWrappedInstance());</span><br><span class="line"></span><br><span class="line"><span class="comment">// retrieving the salary of the managingDirector through the company</span></span><br><span class="line">Float salary = (Float) company.getPropertyValue(<span class="string">"managingDirector.salary"</span>);</span><br></pre></td></tr></table></figure><h2 id="3-4-2-Built-in-PropertyEditor-implementations"><a href="#3-4-2-Built-in-PropertyEditor-implementations" class="headerlink" title="3.4.2 Built-in PropertyEditor implementations"></a>3.4.2 Built-in PropertyEditor implementations</h2><h3 id="Registering-additional-custom-PropertyEditors"><a href="#Registering-additional-custom-PropertyEditors" class="headerlink" title="Registering additional custom PropertyEditors"></a>Registering additional custom PropertyEditors</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Genre</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Genre genre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"novel"</span> <span class="attr">class</span>=<span class="string">"Book"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"genre"</span> <span class="attr">value</span>=<span class="string">"fiction"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenreEditor</span> <span class="keyword">extends</span> <span class="title">PropertyEditorSupport</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAsText</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        setValue(<span class="keyword">new</span> Genre(text.toUpperCase()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.CustomEditorConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"customEditors"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"example.ExoticType"</span> <span class="attr">value</span>=<span class="string">"example.ExoticTypeEditor"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>사용 예) <code>POST https://localhost:8080/books/1 &quot;{&quot;genre&quot; : &quot;fiction&quot;}&quot;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> BookRequest &#123;</span><br><span class="line">  <span class="keyword">private</span> Genre genre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-2-Built-in-PropertyEditor-implementations-1"><a href="#3-4-2-Built-in-PropertyEditor-implementations-1" class="headerlink" title="3.4.2 Built-in PropertyEditor implementations"></a>3.4.2 Built-in PropertyEditor implementations</h2><h3 id="Using-PropertyEditorRegistrars"><a href="#Using-PropertyEditorRegistrars" class="headerlink" title="Using PropertyEditorRegistrars"></a>Using PropertyEditorRegistrars</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomPropertyEditorRegistrar</span> <span class="keyword">implements</span> <span class="title">PropertyEditorRegistrar</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerCustomEditors</span><span class="params">(PropertyEditorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.registerCustomEditor(ExoticType<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">ExoticTypeEditor</span>())</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.CustomEditorConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"propertyEditorRegistrars"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"customPropertyEditorRegistrar"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customPropertyEditorRegistrar"</span> <span class="attr">class</span>=<span class="string">"com.foo.editors.spring.CustomPropertyEditorRegistrar"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterUserController</span> <span class="keyword">extends</span> <span class="title">SimpleFormController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PropertyEditorRegistrar customPropertyEditorRegistrar;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RegisterUserController</span><span class="params">(PropertyEditorRegistrar propertyEditorRegistrar)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.customPropertyEditorRegistrar = propertyEditorRegistrar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initBinder</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">            ServletRequestDataBinder binder)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.customPropertyEditorRegistrar.registerCustomEditors(binder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-5-Spring-Type-Conversion"><a href="#3-5-Spring-Type-Conversion" class="headerlink" title="3.5. Spring Type Conversion"></a>3.5. Spring Type Conversion</h1><h2 id="3-5-1-Converter-SPI"><a href="#3-5-1-Converter-SPI" class="headerlink" title="3.5.1. Converter SPI"></a>3.5.1. Converter SPI</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Converter</span>&lt;<span class="title">S</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">convert</span><span class="params">(S source)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-2-ConverterFactory"><a href="#3-5-2-ConverterFactory" class="headerlink" title="3.5.2. ConverterFactory"></a>3.5.2. ConverterFactory</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConverterFactory</span>&lt;<span class="title">S</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line">    &lt;T extends R&gt; <span class="function">Converter&lt;S, T&gt; <span class="title">getConverter</span><span class="params">(Class&lt;T&gt; targetType)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToEnumConverterFactory</span> <span class="keyword">implements</span> <span class="title">ConverterFactory</span>&lt;<span class="title">String</span>, <span class="title">Enum</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T extends Enum&gt; <span class="function">Converter&lt;String, T&gt; <span class="title">getConverter</span><span class="params">(Class&lt;T&gt; targetType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringToEnumConverter(targetType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToEnumConverter</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Enum</span>&gt; <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Class&lt;T&gt; enumType;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">StringToEnumConverter</span><span class="params">(Class&lt;T&gt; enumType)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.enumType = enumType;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (T) Enum.valueOf(<span class="keyword">this</span>.enumType, source.trim());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-5-Configuring-a-ConversionService"><a href="#3-5-5-Configuring-a-ConversionService" class="headerlink" title="3.5.5. Configuring a ConversionService"></a>3.5.5. Configuring a ConversionService</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"example.MyCustomConverter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-5-6-Using-a-ConversionService-programmatically"><a href="#3-5-6-Using-a-ConversionService-programmatically" class="headerlink" title="3.5.6. Using a ConversionService programmatically"></a>3.5.6. Using a ConversionService programmatically</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyService</span><span class="params">(ConversionService conversionService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.conversionService = conversionService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doIt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.conversionService.convert(...)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConversionService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">canConvert</span><span class="params">(Class&lt;?&gt; sourceType, Class&lt;?&gt; targetType)</span></span>;</span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">convert</span><span class="params">(Object source, Class&lt;T&gt; targetType)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">canConvert</span><span class="params">(TypeDescriptor sourceType, TypeDescriptor targetType)</span></span>;</span><br><span class="line">    <span class="function">Object <span class="title">convert</span><span class="params">(Object source, TypeDescriptor sourceType, TypeDescriptor targetType)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring-Field-Formatting"><a href="#Spring-Field-Formatting" class="headerlink" title="Spring Field Formatting"></a>Spring Field Formatting</h1><h2 id="3-6-1-Formatter-SPI"><a href="#3-6-1-Formatter-SPI" class="headerlink" title="3.6.1. Formatter SPI"></a>3.6.1. Formatter SPI</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Formatter</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Printer</span>&lt;<span class="title">T</span>&gt;, <span class="title">Parser</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Printer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">print</span><span class="params">(T fieldValue, Locale locale)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Parser</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">parse</span><span class="params">(String clientValue, Locale locale)</span> <span class="keyword">throws</span> ParseException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1000 -&gt; "1,000"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCurrencyFormatter</span> <span class="keyword">implements</span> <span class="title">Formatter</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">print</span><span class="params">(Date date, Locale locale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (date == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> insertComma(Integer.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">parse</span><span class="params">(String formatted, Locale locale)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(formatted)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Integer.valueOf(removeComma(formatted));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-6-2-Annotation-driven-Formatting"><a href="#3-6-2-Annotation-driven-Formatting" class="headerlink" title="3.6.2. Annotation-driven Formatting"></a>3.6.2. Annotation-driven Formatting</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AnnotationFormatterFactory</span>&lt;<span class="title">A</span> <span class="keyword">extends</span> <span class="title">Annotation</span>&gt; </span>&#123;</span><br><span class="line">    Set&lt;Class&lt;?&gt;&gt; getFieldTypes();</span><br><span class="line">    Printer&lt;?&gt; getPrinter(A annotation, Class&lt;?&gt; fieldType);</span><br><span class="line">    Parser&lt;?&gt; getParser(A annotation, Class&lt;?&gt; fieldType);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DateTimeFormat &#123;</span><br><span class="line">  <span class="function">String <span class="title">pattern</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeDto</span> </span>&#123;</span><br><span class="line">  <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy.MM.dd HH:mm:ss"</span>)</span><br><span class="line">  <span class="keyword">private</span> Date now;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTimeFormatterFactory</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">AnnotationFormatterFactory</span>&lt;<span class="title">NumberFormat</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Class&lt;?&gt;&gt; getFieldTypes() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HashSet&lt;Class&lt;?&gt;&gt;(asList(<span class="keyword">new</span> Class&lt;?&gt;[] &#123;</span><br><span class="line">            Date<span class="class">.<span class="keyword">class</span> &#125;))</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Printer&lt;Number&gt; <span class="title">getPrinter</span><span class="params">(DateTimeFormat annotation, Class&lt;?&gt; fieldType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configureFormatterFrom(annotation, fieldType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Parser&lt;Number&gt; <span class="title">getParser</span><span class="params">(DateTimeFormat annotation, Class&lt;?&gt; fieldType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configureFormatterFrom(annotation, fieldType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Formatter&lt;Number&gt; <span class="title">configureFormatterFrom</span><span class="params">(DateTimeFormat annotation,</span></span></span><br><span class="line"><span class="function"><span class="params">            Class&lt;?&gt; fieldType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DateTimeFormatter(<span class="keyword">new</span> SimpleTimeFormat(annotation.pattern()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-7-Configuring-a-global-date-amp-time-format"><a href="#3-7-Configuring-a-global-date-amp-time-format" class="headerlink" title="3.7. Configuring a global date &amp; time format"></a>3.7. Configuring a global date &amp; time format</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FormattingConversionService <span class="title">conversionService</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use the DefaultFormattingConversionService but do not register defaults</span></span><br><span class="line">        DefaultFormattingConversionService conversionService = <span class="keyword">new</span> DefaultFormattingConversionService(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Ensure @NumberFormat is still supported</span></span><br><span class="line">        conversionService.addFormatterForFieldAnnotation(<span class="keyword">new</span> NumberFormatAnnotationFormatterFactory());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Register date conversion with a specific global format</span></span><br><span class="line">        DateFormatterRegistrar registrar = <span class="keyword">new</span> DateFormatterRegistrar();</span><br><span class="line">        registrar.setFormatter(<span class="keyword">new</span> DateFormatter(<span class="string">"yyyyMMdd"</span>));</span><br><span class="line">        registrar.registerFormatters(conversionService);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> conversionService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-8-Spring-Validation"><a href="#3-8-Spring-Validation" class="headerlink" title="3.8. Spring Validation"></a>3.8. Spring Validation</h1><h2 id="3-8-1-Overview-of-the-JSR-303-Bean-Validation-API"><a href="#3-8-1-Overview-of-the-JSR-303-Bean-Validation-API" class="headerlink" title="3.8.1. Overview of the JSR-303 Bean Validation API"></a>3.8.1. Overview of the JSR-303 Bean Validation API</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonForm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Size</span>(max=<span class="number">64</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Spring에서는 기본적으로 JSR-303 Validation의 구현체로 <code>Hibernate Validation</code>을 쓰고 있음</p></blockquote><h2 id="3-8-2-Configuring-a-Bean-Validation-Provider"><a href="#3-8-2-Configuring-a-Bean-Validation-Provider" class="headerlink" title="3.8.2. Configuring a Bean Validation Provider"></a>3.8.2. Configuring a Bean Validation Provider</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"validator"</span> <span class="attr">class</span>=<span class="string">"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Configuring-Custom-Constraints"><a href="#Configuring-Custom-Constraints" class="headerlink" title="Configuring Custom Constraints"></a>Configuring Custom Constraints</h3><p><code>제약 애노테이션</code>과 <code>제약 로직</code>으로 이루어짐</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.FIELD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Constraint</span>(validatedBy=MyConstraintValidator<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">MyConstraint</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConstraintValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span>;</span><br><span class="line">    <span class="keyword">private</span> Foo aDependency;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>기본적으로 <code>LocalValidatorFactoryBean</code>은 Spring을 사용하여 <code>ConstraintValidator</code> 인스턴스를 생성하는 <code>SpringConstraintValidatorFactory</code>를 구성<br>이를 통해 커스텀 <code>ConstraintValidator</code>는 다른 Spring bean처럼 의존성 주입함</p></blockquote><h3 id="Spring-driven-Method-Validation"><a href="#Spring-driven-Method-Validation" class="headerlink" title="Spring-driven Method Validation"></a>Spring-driven Method Validation</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.validation.beanvalidation.MethodValidationPostProcessor"</span>/&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> spring </category>
          
          <category> reference </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> reference </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Framework 5.0.4.RELEASE Reference Core (Chapter2)</title>
      <link href="/2018/03/11/Spring-Framework-5.0.4.RELEASE-Reference-Core-(Chapter2)/"/>
      <content type="html"><![CDATA[<h1 id="글에-앞서서"><a href="#글에-앞서서" class="headerlink" title="글에 앞서서"></a>글에 앞서서</h1><ul><li>본문은 Spring Framework Version 5의 습득을 위한 글이다.</li><li>이 글을 상업적 목적으로 쓰지 않았다<blockquote><p>Authors<br>Rod Johnson , Juergen Hoeller , Keith Donald , Colin Sampaleanu , Rob Harrop , Thomas Risberg , Alef Arendsen , Darren Davison , Dmitriy Kopylenko , Mark Pollack , Thierry Templier , Erwin Vervaet , Portia Tung , Ben Hale , Adrian Colyer , John Lewis , Costin Leau , Mark Fisher , Sam Brannen , Ramnivas Laddad , Arjen Poutsma , Chris Beams , Tareq Abedrabbo , Andy Clement , Dave Syer , Oliver Gierke , Rossen Stoyanchev , Phillip Webb , Rob Winch , Brian Clozel , Stephane Nicoll , Sebastien Deleuze</p><p>Copyright © 2004-2016</p><p>Copies of this document may be made for your own use and for distribution to others, provided that you do not charge any fee for such copies and further provided that each copy contains this Copyright Notice, whether distributed in print or electronically.</p><footer><strong>원본</strong><cite><a href="https://docs.spring.io/spring/docs/5.0.4.RELEASE/spring-framework-reference/" target="_blank" rel="noopener">docs.spring.io/spring/docs/5.0.4.RELEASE/spring-framework-reference</a></cite></footer></blockquote></li></ul><h1 id="2-Resources"><a href="#2-Resources" class="headerlink" title="2. Resources"></a>2. Resources</h1><h1 id="2-1-Introduction"><a href="#2-1-Introduction" class="headerlink" title="2.1. Introduction"></a>2.1. Introduction</h1><ul><li><code>java.net.URL</code>은 low-level 자원에 대한 접근을 모두 처리해내기에는 부족하다<ul><li><code>classpath</code>나 <code>ServletContext</code>를 기준으로 자원에 접근하는 방법이 필요하다<a id="more"></a><h1 id="2-2-The-Resource-interface"><a href="#2-2-The-Resource-interface" class="headerlink" title="2.2. The Resource interface"></a>2.2. The Resource interface</h1></li></ul></li></ul><h2 id="2-2-The-Resource-interface-1"><a href="#2-2-The-Resource-interface-1" class="headerlink" title="2.2. The Resource interface"></a>2.2. The Resource interface</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Resource</span> <span class="keyword">extends</span> <span class="title">InputStreamSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isOpen</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">URL <span class="title">getURL</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">    <span class="function">File <span class="title">getFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">    <span class="function">Resource <span class="title">createRelative</span><span class="params">(String relativePath)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">    <span class="function">String <span class="title">getFilename</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InputStreamSource</span> </span>&#123;</span><br><span class="line">    <span class="function">InputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-3-Built-in-Resource-implementations"><a href="#2-3-Built-in-Resource-implementations" class="headerlink" title="2.3. Built-in Resource implementations"></a>2.3. Built-in Resource implementations</h1><p><code>PropertyEditor</code>라는 것이 <code>classpath:xxx</code>, <code>https:xxx</code> 등의 문자열로 아래 <code>Resource</code> 구현체 중 하나로 타입을 결정한다</p><ul><li><code>UrlResource</code> : <code>java.net.URL</code>의 wrapping. <code>http</code>, <code>ftp</code> 등의 자원에 접근할 때 사용</li><li><code>ClassPathResource</code> : classpath에 있는 자원을 가져올 때 사용, <code>classpath:</code></li><li><code>FileSystemResource</code></li><li><code>ServletContextResource</code> : <code>ServletContext(웹 환경)</code>의 자원에 접근할 때 사용</li><li><code>InputStreamResource</code></li><li><code>ByteArrayResource</code></li></ul><h1 id="2-4-The-ResourceLoader"><a href="#2-4-The-ResourceLoader" class="headerlink" title="2.4. The ResourceLoader"></a>2.4. The ResourceLoader</h1><h2 id="2-4-The-ResourceLoader-1"><a href="#2-4-The-ResourceLoader-1" class="headerlink" title="2.4. The ResourceLoader"></a>2.4. The ResourceLoader</h2><p>모든 application context는 <code>ResourceLoader</code>를 구현하여, 문자열로 원하는 자원을 획득할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResourceLoader</span> </span>&#123;</span><br><span class="line">    <span class="function">Resource <span class="title">getResource</span><span class="params">(String location)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResourcePatternResolver</span> <span class="keyword">extends</span> <span class="title">ResourceLoader</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationContext</span> <span class="keyword">extends</span> <span class="title">EnvironmentCapable</span>, <span class="title">ListableBeanFactory</span>, <span class="title">HierarchicalBeanFactory</span>,</span></span><br><span class="line"><span class="class"><span class="title">MessageSource</span>, <span class="title">ApplicationEventPublisher</span>, <span class="title">ResourcePatternResolver</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>아래 소스에 대해서 어떠한 <code>Resource</code>가 반환될까?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Resource template = ctx.getResource(<span class="string">"some/resource/path/myTemplate.txt"</span>);</span><br></pre></td></tr></table></figure><ul><li><code>ClassPathXmlApplicationContext</code> -&gt; <code>ClassPathResource</code></li><li><code>FileSystemXmlApplicationContext</code> -&gt; <code>FileSystemResource</code></li><li><code>WebApplicationContext</code> -&gt; <code>ServletContextResource</code></li></ul><p><code>ApplicationContext</code>와 상관없이 원하는 타입의 자원을 얻기 위해서는 <code>classpath:</code>등의 prefix를 달면 된다</p><table><thead><tr><th>Prefix</th><th>Example</th><th>Explanation</th></tr></thead><tbody><tr><td>classpath:</td><td>classpath:com/myapp/config.xml</td><td>Loaded from the classpath</td></tr><tr><td>file:</td><td>file:///data/config.xml</td><td>Loaded as a URL, from the filesystem</td></tr><tr><td>http:</td><td><a href="http://myserver/logo.png" target="_blank" rel="noopener">http://myserver/logo.png</a></td><td>Loaded as a URL</td></tr><tr><td>(none)</td><td>/data/config.xml</td><td>Depends on the underlying ApplicationContext</td></tr></tbody></table><h1 id="2-7-Application-contexts-and-Resource-paths"><a href="#2-7-Application-contexts-and-Resource-paths" class="headerlink" title="2.7. Application contexts and Resource paths"></a>2.7. Application contexts and Resource paths</h1><h2 id="2-7-1-Constructing-application-contexts"><a href="#2-7-1-Constructing-application-contexts" class="headerlink" title="2.7.1. Constructing application contexts"></a>2.7.1. Constructing application contexts</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"conf/appContext.xml"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext ctx = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"conf/appContext.xml"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext ctx = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"classpath:conf/appContext.xml"</span>);</span><br></pre></td></tr></table></figure><h2 id="2-7-2-Wildcards-in-application-context-constructor-resource-paths"><a href="#2-7-2-Wildcards-in-application-context-constructor-resource-paths" class="headerlink" title="2.7.2. Wildcards in application context constructor resource paths"></a>2.7.2. Wildcards in application context constructor resource paths</h2><h3 id="Ant-style-Patterns"><a href="#Ant-style-Patterns" class="headerlink" title="Ant-style Patterns"></a>Ant-style Patterns</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/WEB-INF<span class="comment">/*-context.xml</span></span><br><span class="line"><span class="comment">com/mycompany/**/</span>applicationContext.xml</span><br><span class="line">file:C:/some/path<span class="comment">/*-context.xml</span></span><br><span class="line"><span class="comment">classpath:com/mycompany/**/</span>applicationContext.xml</span><br></pre></td></tr></table></figure><h3 id="The-classpath-prefix"><a href="#The-classpath-prefix" class="headerlink" title="The classpath*: prefix"></a>The <code>classpath*:</code> prefix</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath*:conf/appContext.xml"</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> spring </category>
          
          <category> reference </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> reference </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Framework 5.0.4.RELEASE Reference Core (Chapter1)</title>
      <link href="/2018/03/11/Spring-Framework-5.0.4.RELEASE-Reference-Core-(Chapter1)/"/>
      <content type="html"><![CDATA[<h1 id="글에-앞서서"><a href="#글에-앞서서" class="headerlink" title="글에 앞서서"></a>글에 앞서서</h1><ul><li>본문은 Spring Framework Version 5의 습득을 위한 글이다.</li><li>이 글을 상업적 목적으로 쓰지 않았다<blockquote><p>Authors<br>Rod Johnson , Juergen Hoeller , Keith Donald , Colin Sampaleanu , Rob Harrop , Thomas Risberg , Alef Arendsen , Darren Davison , Dmitriy Kopylenko , Mark Pollack , Thierry Templier , Erwin Vervaet , Portia Tung , Ben Hale , Adrian Colyer , John Lewis , Costin Leau , Mark Fisher , Sam Brannen , Ramnivas Laddad , Arjen Poutsma , Chris Beams , Tareq Abedrabbo , Andy Clement , Dave Syer , Oliver Gierke , Rossen Stoyanchev , Phillip Webb , Rob Winch , Brian Clozel , Stephane Nicoll , Sebastien Deleuze</p><p>Copyright © 2004-2016</p><p>Copies of this document may be made for your own use and for distribution to others, provided that you do not charge any fee for such copies and further provided that each copy contains this Copyright Notice, whether distributed in print or electronically.</p><footer><strong>원본</strong><cite><a href="https://docs.spring.io/spring/docs/5.0.4.RELEASE/spring-framework-reference/" target="_blank" rel="noopener">docs.spring.io/spring/docs/5.0.4.RELEASE/spring-framework-reference</a></cite></footer></blockquote></li></ul><h1 id="1-The-IoC-container"><a href="#1-The-IoC-container" class="headerlink" title="1. The IoC container"></a>1. The IoC container</h1><h1 id="1-2-Container-overview"><a href="#1-2-Container-overview" class="headerlink" title="1.2. Container overview"></a>1.2. Container overview</h1><p><code>org.springframework.context.ApplicationContext</code> 인터페이스는 Spring IoC container이다. 구현체들은 bean을 인스턴스화, 설정, 조합하는 역할을 책임지고 있다.</p><h2 id="1-2-2-Instantiating-a-container"><a href="#1-2-2-Instantiating-a-container" class="headerlink" title="1.2.2. Instantiating a container"></a>1.2.2. Instantiating a container</h2><p><code>ApplicationContext context = new ClassPathXmlApplicationContext(&quot;services.xml&quot;, &quot;daos.xml&quot;);</code></p><a id="more"></a><h1 id="1-3-Bean-overview"><a href="#1-3-Bean-overview" class="headerlink" title="1.3. Bean overview"></a>1.3. Bean overview</h1><h2 id="1-3-2-Instantiating-beans"><a href="#1-3-2-Instantiating-beans" class="headerlink" title="1.3.2. Instantiating beans"></a>1.3.2. Instantiating beans</h2><blockquote><p><code>static inner class</code>를 bean으로 등록하기 위해서는 <code>FQDN$내부클래스명</code>으로 표기해야한다<br><code>com.example.Foo$Bar</code></p></blockquote><h1 id="1-5-Bean-scopes"><a href="#1-5-Bean-scopes" class="headerlink" title="1.5. Bean scopes"></a>1.5. Bean scopes</h1><h2 id="1-5-1-Bean-scopes"><a href="#1-5-1-Bean-scopes" class="headerlink" title="1.5.1. Bean scopes"></a>1.5.1. Bean scopes</h2><table><thead><tr><th>Scope</th><th>Description</th></tr></thead><tbody><tr><td>singleton</td><td>(Default) Spring IoC container 당 하나의 객체 인스턴스만 생성</td></tr><tr><td>prototype</td><td>다수의 객체 인스턴스를 생성<code>(any number)</code></td></tr><tr><td>request</td><td><code>HTTP Request</code>과 동일한 lifecycle을 가짐. web 환경의 Spring ApplicationContext에서만 동작함</td></tr><tr><td>session</td><td><code>HTTP Session</code>과 동일한 lifecycle을 가짐. web 환경의 Spring ApplicationContext에서만 동작함</td></tr><tr><td>application</td><td><code>ServletContext</code>와 동일한 lifecycle을 가짐. web 환경의 Spring ApplicationContext에서만 동작함</td></tr><tr><td>webcoket</td><td><code>WebSocket</code>과 동일한 lifecycle을 가짐. web 환경의 Spring ApplicationContext에서만 동작함</td></tr></tbody></table><h2 id="1-5-3-Singleton-beans-with-prototype-bean-dependencies"><a href="#1-5-3-Singleton-beans-with-prototype-bean-dependencies" class="headerlink" title="1.5.3. Singleton beans with prototype-bean dependencies"></a>1.5.3. Singleton beans with prototype-bean dependencies</h2><p><code>singleton bean</code>이 <code>prototype bean</code>에 의존하고 있는 경우 어떻게 될까?<br>의존성은 초기화 시점(instantiation time)에 정의된다는 점을 기억해야한다.</p><p>즉, <code>singleton bean</code>이 초기화 될때 새로운 <code>prototype bean</code>이 생성되겠지만,<br>한 번 초기화 된 이후에는 항상 같은 <code>prototype bean</code>을 사용하게 될 것이다.</p><p><code>singleton bean</code>이 매번 다른 인스턴스를 바라보도록 하고 싶다면 <a href="https://docs.spring.io/spring/docs/5.0.4.RELEASE/spring-framework-reference/core.html#beans-factory-method-injection" target="_blank" rel="noopener">Method Injection</a>항목을 참고할 수 있다.<br>스포를 하자면 <code>IoC</code>를 하지 않는 것이다.</p><h2 id="1-5-4-Request-session-application-and-WebSocket-scopes"><a href="#1-5-4-Request-session-application-and-WebSocket-scopes" class="headerlink" title="1.5.4. Request, session, application, and WebSocket scopes"></a>1.5.4. Request, session, application, and WebSocket scopes</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestScope</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestScopeBean</span> </span>&#123; </span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@SessionScope</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestScopeBean</span> </span>&#123; </span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@ApplicationScope</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestScopeBean</span> </span>&#123; </span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Scoped-beans-as-dependencies"><a href="#Scoped-beans-as-dependencies" class="headerlink" title="Scoped beans as dependencies"></a>Scoped beans as dependencies</h2><p><code>Request</code>, <code>Session</code> 등의 bean이 자신보다 더 긴 lifecycle을 가지고 있는 bean에 속해질 때,<br>Spring IoC는 <code>AOP Proxy</code>로 이를 대체하여 문제를 해결한다.<br>즉 실제 Instance를 주입받는 것이 아니라, Proxy 객체를 주입받게되며, 이 프록시는 실제 instance를 가리키도록 되어 있다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- an HTTP Session-scoped bean exposed as a proxy --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userPreferences"</span> <span class="attr">class</span>=<span class="string">"com.foo.UserPreferences"</span> <span class="attr">scope</span>=<span class="string">"session"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- instructs the container to proxy the surrounding bean --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:scoped-proxy</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- a singleton-scoped bean injected with a proxy to the above bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.foo.SimpleUserService"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- a reference to the proxied userPreferences bean --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userPreferences"</span> <span class="attr">ref</span>=<span class="string">"userPreferences"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="1-9-Annotation-based-container-configuration"><a href="#1-9-Annotation-based-container-configuration" class="headerlink" title="1.9. Annotation-based container configuration"></a>1.9. Annotation-based container configuration</h1><h2 id="Annotation-기반-설정이-XML-기반-설정보다-더-나은가"><a href="#Annotation-기반-설정이-XML-기반-설정보다-더-나은가" class="headerlink" title="Annotation 기반 설정이 XML 기반 설정보다 더 나은가?"></a>Annotation 기반 설정이 XML 기반 설정보다 더 나은가?</h2><p>그런거 없음<br>개발자가 알아서 선택할 일</p><h2 id="1-9-1-Required"><a href="#1-9-1-Required" class="headerlink" title="1.9.1 @Required"></a>1.9.1 <code>@Required</code></h2><p>bean이 초기화될 때, 반드시 의존성이 설정되어야함.<br>속성이 없는 경우, container가 예외를 던짐.<br>NPE를 회피할 수 있음.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleMovieLister</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MovieFinder movieFinder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Required</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMovieFinder</span><span class="params">(MovieFinder movieFinder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movieFinder = movieFinder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-9-2-Autowired"><a href="#1-9-2-Autowired" class="headerlink" title="1.9.2 @Autowired"></a>1.9.2 <code>@Autowired</code></h2><p>생성자</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieRecommender</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CustomerPreferenceDao customerPreferenceDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MovieRecommender</span><span class="params">(CustomerPreferenceDao customerPreferenceDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.customerPreferenceDao = customerPreferenceDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>setter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleMovieLister</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MovieFinder movieFinder;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMovieFinder</span><span class="params">(MovieFinder movieFinder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movieFinder = movieFinder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>목록(<code>@Order</code>로 순서를 정할 수 있음)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Adder</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdderA</span> <span class="keyword">implements</span> <span class="title">Adder</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdderB</span> <span class="keyword">implements</span> <span class="title">Adder</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdderService</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  Set&lt;Adder&gt; Adders; <span class="comment">// Adder[] adders, List&lt;Adder&gt; adders</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-9-3-Fine-tuning-annotation-based-autowiring-wigh-Primary"><a href="#1-9-3-Fine-tuning-annotation-based-autowiring-wigh-Primary" class="headerlink" title="1.9.3. Fine-tuning annotation-based autowiring wigh @Primary"></a>1.9.3. Fine-tuning annotation-based autowiring wigh <code>@Primary</code></h2><p><code>Autowired</code>받을 수 있는 후보가 여럿 있을 때, 주로 사용할 bean을 <code>@Primary</code>로 지정 가능</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MovieCatalog <span class="title">firstMovieCatalog</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MovieCatalog <span class="title">secondMovieCatalog</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-9-4-Fine-tuning-annotation-based-autowiring-with-qualifiers"><a href="#1-9-4-Fine-tuning-annotation-based-autowiring-with-qualifiers" class="headerlink" title="1.9.4. Fine-tuning annotation-based autowiring with qualifiers"></a>1.9.4. Fine-tuning annotation-based autowiring with qualifiers</h2><p>보다 정교하게 bean selection을 제어하고 싶다면, <code>@Qualifier</code>를 사용할 수 있다</p><p><strong>field에 사용</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieRecommender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"main"</span>)</span><br><span class="line">    <span class="keyword">private</span> MovieCatalog movieCatalog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>생성자에 사용</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieRecommender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MovieCatalog movieCatalog;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CustomerPreferenceDao customerPreferenceDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(@Qualifier(<span class="string">"main"</span>)</span>MovieCatalog movieCatalog,</span></span><br><span class="line"><span class="function">            CustomerPreferenceDao customerPreferenceDao) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movieCatalog = movieCatalog;</span><br><span class="line">        <span class="keyword">this</span>.customerPreferenceDao = customerPreferenceDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-9-4-Fine-tuning-annotation-based-autowiring-with-qualifiers-1"><a href="#1-9-4-Fine-tuning-annotation-based-autowiring-with-qualifiers-1" class="headerlink" title="1.9.4. Fine-tuning annotation-based autowiring with qualifiers"></a>1.9.4. Fine-tuning annotation-based autowiring with qualifiers</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"example.SimpleMovieCatalog"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">qualifier</span> <span class="attr">value</span>=<span class="string">"main"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- inject any dependencies required by this bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"example.SimpleMovieCatalog"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">qualifier</span> <span class="attr">value</span>=<span class="string">"action"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- inject any dependencies required by this bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"movieRecommender"</span> <span class="attr">class</span>=<span class="string">"example.MovieRecommender"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-9-4-Fine-tuning-annotation-based-autowiring-with-qualifiers-2"><a href="#1-9-4-Fine-tuning-annotation-based-autowiring-with-qualifiers-2" class="headerlink" title="1.9.4. Fine-tuning annotation-based autowiring with qualifiers"></a>1.9.4. Fine-tuning annotation-based autowiring with qualifiers</h2><p><code>@Autowired</code>와 <code>@Qualifier</code>를 같이 사용하는 경우</p><ol><li><code>@Autowired</code>는 type을 기반으로 bean을 찾는다</li><li><code>@Qualifier</code>는 기본적으로 bean name을 사용하여 bean을 찾는다</li></ol><h2 id="1-9-4-Fine-tuning-annotation-based-autowiring-with-qualifiers-3"><a href="#1-9-4-Fine-tuning-annotation-based-autowiring-with-qualifiers-3" class="headerlink" title="1.9.4. Fine-tuning annotation-based autowiring with qualifiers"></a>1.9.4. Fine-tuning annotation-based autowiring with qualifiers</h2><p><strong><code>@Qualifier</code></strong>를 사용한 custom annotation 작성</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.FIELD, ElementType.PARAMETER&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Genre &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieRecommender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Genre</span>(<span class="string">"Action"</span>)</span><br><span class="line">    <span class="keyword">private</span> MovieCatalog actionCatalog;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MovieCatalog comedyCatalog;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setComedyCatalog</span><span class="params">(@Genre(<span class="string">"Comedy"</span>)</span> MovieCatalog comedyCatalog) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.comedyCatalog = comedyCatalog;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"example.SimpleMovieCatalog"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">qualifier</span> <span class="attr">type</span>=<span class="string">"Genre"</span> <span class="attr">value</span>=<span class="string">"Action"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- inject any dependencies required by this bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"example.SimpleMovieCatalog"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">qualifier</span> <span class="attr">type</span>=<span class="string">"example.Genre"</span> <span class="attr">value</span>=<span class="string">"Comedy"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- inject any dependencies required by this bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"movieRecommender"</span> <span class="attr">class</span>=<span class="string">"example.MovieRecommender"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-9-7-Resource"><a href="#1-9-7-Resource" class="headerlink" title="1.9.7. @Resource"></a>1.9.7. <code>@Resource</code></h2><ul><li><code>@Autowired</code>는 type으로 검색</li><li><code>@Resource</code>는 bean name으로 검색</li></ul><h2 id="1-9-8-PostConstruct-and-PreDestroy"><a href="#1-9-8-PostConstruct-and-PreDestroy" class="headerlink" title="1.9.8. @PostConstruct and @PreDestroy"></a>1.9.8. @PostConstruct and @PreDestroy</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CachingMovieLister</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">populateMovieCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// populates the movie cache upon initialization...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearMovieCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// clears the movie cache upon destruction...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1-10-Classpath-scanning-and-managed-components"><a href="#1-10-Classpath-scanning-and-managed-components" class="headerlink" title="1.10. Classpath scanning and managed components"></a>1.10. Classpath scanning and managed components</h1><h2 id="1-10-1-Component-and-further-stereotype-annotations"><a href="#1-10-1-Component-and-further-stereotype-annotations" class="headerlink" title="1.10.1. @Component and further stereotype annotations"></a>1.10.1. @Component and further stereotype annotations</h2><ul><li>Spring은 여러 stereotype의 annotation을 제공한다 : <code>@Component</code>, <code>@Service</code>, <code>@Controller</code> 등등.</li><li><code>@Repository</code>, <code>@Service</code>는 <code>@Component</code>의 한정사이다</li><li>custom annotation을 만들어 사용하거나, 기본 제공되는 stereotype annotation을 AOP를 사용하여, 초기화시 임의의 process를 수행하도록 할 수도 있다</li></ul><h2 id="1-10-2-Meta-annotations"><a href="#1-10-2-Meta-annotations" class="headerlink" title="1.10.2. Meta-annotations"></a>1.10.2. Meta-annotations</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">// Spring will see this and treat @Service in the same way as @Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Service &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RestController &#123;</span><br><span class="line"><span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-10-4-Using-filters-to-customize-scanning"><a href="#1-10-4-Using-filters-to-customize-scanning" class="headerlink" title="1.10.4. Using filters to customize scanning"></a>1.10.4. Using filters to customize scanning</h2><table><thead><tr><th>Filter Type</th><th>Example Expression</th><th>Description</th></tr></thead><tbody><tr><td>annotation (default)</td><td>org.example.SomeAnnotation</td><td>An annotation to be present at the type level in target components</td></tr><tr><td>assignable</td><td>org.example.SomeClass</td><td>A class (or interface) that the target components are assignable to (extend/implement)</td></tr><tr><td>aspectj</td><td><code>org.example..*Service+</code></td><td>An AspectJ type expression to be matched by the target components</td></tr><tr><td>regex</td><td><code>org\.example\.Default.*</code></td><td>A regex expression to be matched by the target components class names</td></tr><tr><td>custom</td><td>org.example.MyTypeFilter</td><td>A custom implementation of the org.springframework.core.type .TypeFilter interface</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = <span class="string">"org.example"</span>,</span><br><span class="line">        includeFilters = <span class="meta">@Filter</span>(type = FilterType.REGEX, pattern = <span class="string">".*Stub.*Repository"</span>),</span><br><span class="line">        excludeFilters = <span class="meta">@Filter</span>(Repository<span class="class">.<span class="keyword">class</span>))</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"org.example"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"regex"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">expression</span>=<span class="string">".*Stub.*Repository"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Repository"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="1-12-Java-based-container-configuration"><a href="#1-12-Java-based-container-configuration" class="headerlink" title="1.12. Java-based container configuration"></a>1.12. Java-based container configuration</h1><h2 id="1-12-4-Using-the-Configuration-annotation"><a href="#1-12-4-Using-the-Configuration-annotation" class="headerlink" title="1.12.4. Using the @Configuration annotation"></a>1.12.4. Using the <code>@Configuration</code> annotation</h2><h3 id="Further-information-about-how-Java-based-configuration-works-internally"><a href="#Further-information-about-how-Java-based-configuration-works-internally" class="headerlink" title="Further information about how Java-based configuration works internally"></a>Further information about how Java-based configuration works internally</h3><p>아래 소스에서 <code>clientDao()</code>가 2번 호출됨에도 불구하고, 캐시(<code>CGLIB</code>)를 통해서 동일한 객체(<code>singleton</code>)가 주입됨</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientService <span class="title">clientService1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClientServiceImpl clientService = <span class="keyword">new</span> ClientServiceImpl();</span><br><span class="line">        clientService.setClientDao(clientDao());</span><br><span class="line">        <span class="keyword">return</span> clientService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientService <span class="title">clientService2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClientServiceImpl clientService = <span class="keyword">new</span> ClientServiceImpl();</span><br><span class="line">        clientService.setClientDao(clientDao());</span><br><span class="line">        <span class="keyword">return</span> clientService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientDao <span class="title">clientDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ClientDaoImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-12-5-Composing-Java-based-configurations"><a href="#1-12-5-Composing-Java-based-configurations" class="headerlink" title="1.12.5. Composing Java-based configurations"></a>1.12.5. Composing Java-based configurations</h2><p><strong><code>@Import</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigA</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> A <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> A();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(ConfigA<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ConfigB</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> B <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> B();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1-13-Environment-abstraction"><a href="#1-13-Environment-abstraction" class="headerlink" title="1.13. Environment abstraction"></a>1.13. Environment abstraction</h1><p><code>Environment</code>는 <code>profiles</code>와 <code>properties</code>를 추상화하였다</p><h2 id="1-13-1-Bean-definition-profiles"><a href="#1-13-1-Bean-definition-profiles" class="headerlink" title="1.13.1. Bean definition profiles"></a>1.13.1. Bean definition profiles</h2><h3 id="Profile"><a href="#Profile" class="headerlink" title="@Profile"></a><code>@Profile</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Profile</span>(<span class="string">"development"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StandaloneDataConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EmbeddedDatabaseBuilder()</span><br><span class="line">            .setType(EmbeddedDatabaseType.HSQL)</span><br><span class="line">            .addScript(<span class="string">"classpath:com/bank/config/sql/schema.sql"</span>)</span><br><span class="line">            .addScript(<span class="string">"classpath:com/bank/config/sql/test-data.sql"</span>)</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Profile</span>(<span class="string">"production"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JndiDataConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(destroyMethod=<span class="string">""</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Context ctx = <span class="keyword">new</span> InitialContext();</span><br><span class="line">        <span class="keyword">return</span> (DataSource) ctx.lookup(<span class="string">"java:comp/env/jdbc/datasource"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// meta-annotation으로 사용</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Profile</span>(<span class="string">"production"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Production &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="meta">@Development</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">standaloneDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EmbeddedDatabaseBuilder()</span><br><span class="line">            .setType(EmbeddedDatabaseType.HSQL)</span><br><span class="line">            .addScript(<span class="string">"classpath:com/bank/config/sql/schema.sql"</span>)</span><br><span class="line">            .addScript(<span class="string">"classpath:com/bank/config/sql/test-data.sql"</span>)</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="meta">@Production</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">jndiDataSource</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Context ctx = <span class="keyword">new</span> InitialContext();</span><br><span class="line">        <span class="keyword">return</span> (DataSource) ctx.lookup(<span class="string">"java:comp/env/jdbc/datasource"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Activating-a-profile"><a href="#Activating-a-profile" class="headerlink" title="Activating a profile"></a>Activating a profile</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.getEnvironment().setActiveProfiles(&quot;profile1&quot;, &quot;profile2&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dspring.profiles.active&#x3D;&quot;profile1,profile2&quot;</span><br></pre></td></tr></table></figure><h1 id="1-15-Additional-capabilities-of-the-ApplicationContext"><a href="#1-15-Additional-capabilities-of-the-ApplicationContext" class="headerlink" title="1.15. Additional capabilities of the ApplicationContext"></a>1.15. Additional capabilities of the ApplicationContext</h1><h2 id="1-15-1-Internationalization-using-MessageSource"><a href="#1-15-1-Internationalization-using-MessageSource" class="headerlink" title="1.15.1. Internationalization using MessageSource"></a>1.15.1. Internationalization using MessageSource</h2><p><strong><code>MessageSource</code> 인터페이스</strong></p><ul><li><code>String getMessage(String code, Object[] args, String default, Locale loc)</code></li><li><code>String getMessage(String code, Object[] args, Locale loc)</code></li><li><code>String getMessage(MessageSourceResolvable resolvable, Locale locale)</code> - <code>BindingResult</code>의 <code>FieldError</code>가 <code>MessageSourceResolvable</code>을 구현하고 있음</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;messageSource&quot;</span><br><span class="line">            class&#x3D;&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;basenames&quot;&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;value&gt;format&lt;&#x2F;value&gt;</span><br><span class="line">                &lt;value&gt;exceptions&lt;&#x2F;value&gt;</span><br><span class="line">                &lt;value&gt;windows&lt;&#x2F;value&gt;</span><br><span class="line">            &lt;&#x2F;list&gt;</span><br><span class="line">        &lt;&#x2F;property&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><h2 id="1-15-2-Standard-and-custom-events"><a href="#1-15-2-Standard-and-custom-events" class="headerlink" title="1.15.2. Standard and custom events"></a>1.15.2. Standard and custom events</h2><p><strong>Built-in Events</strong></p><table><thead><tr><th>Event</th><th>Explanation</th></tr></thead><tbody><tr><td>ContextRefreshedEvent</td><td><code>ApplicationContext</code>가 초기화되거나, 갱신(refresh)될 때 발행됨.<br><code>ConfigurableApplicationContext</code> 인터페이스의 <code>refresh()</code> 메서드가 호출되는 상황을 예로 들 수 있음</td></tr><tr><td>ContextStartedEvent</td><td><code>ApplicationContext</code>가 시작될 때 발행됨<br><code>ConfigurableApplicationContext</code> 인터페이스의 <code>start()</code>메서드가 호출되는 상황을 예로 들 수 있음</td></tr><tr><td>ContextStoppedEvent</td><td><code>ApplicationContext</code>가 <code>ConfigurableApplicationContext</code> 인터페이스의 <code>stop()</code>이 호출되어 정지되는 경우 발행됨</td></tr><tr><td>ContextClosedEvent</td><td><code>ApplicationContext</code>가 <code>ConfigurableApplicationContext</code>의 <code>close()</code>가 호출되어 <code>close</code>되는 경우에 발행됨</td></tr><tr><td>RequestHandledEvent</td><td>웹 환경에서 <code>HTTP request</code>를 처리했을 때 발행됨<br>요청 완료 후 발행<br><code>DispatcherServlet</code>을 사용하는 웹 어플리케이션만 적용</td></tr></tbody></table><p><strong>custom event</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Custom Event</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlackListEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String address;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String test;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BlackListEvent</span><span class="params">(Object source, String address, String test)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(source);</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">        <span class="keyword">this</span>.test = test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Publish Event</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailService</span> <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; blackList;</span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBlackList</span><span class="params">(List&lt;String&gt; blackList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.blackList = blackList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationEventPublisher</span><span class="params">(ApplicationEventPublisher publisher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.publisher = publisher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">(String address, String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (blackList.contains(address)) &#123;</span><br><span class="line">            BlackListEvent event = <span class="keyword">new</span> BlackListEvent(<span class="keyword">this</span>, address, text);</span><br><span class="line">            publisher.publishEvent(event);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// send email...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handle Event</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlackListNotifier</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">BlackListEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String notificationAddress;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNotificationAddress</span><span class="params">(String notificationAddress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.notificationAddress = notificationAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(BlackListEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// notify appropriate parties via notificationAddress...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-15-2-Standard-and-custom-events-1"><a href="#1-15-2-Standard-and-custom-events-1" class="headerlink" title="1.15.2. Standard and custom events"></a>1.15.2. Standard and custom events</h2><h3 id="Annotation-based-event-listeners"><a href="#Annotation-based-event-listeners" class="headerlink" title="Annotation-based event listeners"></a>Annotation-based event listeners</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlackListNotifier</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String notificationAddress;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNotificationAddress</span><span class="params">(String notificationAddress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.notificationAddress = notificationAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processBlackListEvent</span><span class="params">(BlackListEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// notify appropriate parties via notificationAddress...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 여러 타입의 이벤트 처리</span></span><br><span class="line"><span class="meta">@EventListener</span>(&#123;ContextStartedEvent<span class="class">.<span class="keyword">class</span>, <span class="title">ContextRefreshedEvent</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">void</span> <span class="title">handleContextStart</span>() </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SpEL 사용</span></span><br><span class="line"><span class="meta">@EventListener</span>(condition = <span class="string">"#blEvent.test == 'foo'"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processBlackListEvent</span><span class="params">(BlackListEvent blEvent)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// notify appropriate parties via notificationAddress...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Asynchronous-Listeners"><a href="#Asynchronous-Listeners" class="headerlink" title="Asynchronous Listeners"></a>Asynchronous Listeners</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EventListener</span></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processBlackListEvent</span><span class="params">(BlackListEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// BlackListEvent is processed in a separate thread</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>비동기 이벤트 리스너에서 예외가 발생시, caller로 전파되지 않는다. <code>AsyncUncaughtExceptionHandler</code> 참고할 것<br>처리 결과를 받기 위해서는 다시 비동기로 이벤트를 발생시켜야 한다</p></blockquote><h3 id="Ordering-listeners"><a href="#Ordering-listeners" class="headerlink" title="Ordering listeners"></a>Ordering listeners</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EventListener</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">42</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processBlackListEvent</span><span class="params">(BlackListEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// notify appropriate parties via notificationAddress...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Generic-events"><a href="#Generic-events" class="headerlink" title="Generic events"></a>Generic events</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EventListener</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPersonCreated</span><span class="params">(EntityCreatedEvent&lt;Person&gt; event)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EntityCreatedEvent</span>&lt;<span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> <span class="keyword">implements</span> <span class="title">ResolvableTypeProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EntityCreatedEvent</span><span class="params">(T entity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResolvableType <span class="title">getResolvableType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResolvableType.forClassWithGenerics(getClass(),</span><br><span class="line">                ResolvableType.forInstance(getSource()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> spring </category>
          
          <category> reference </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> reference </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>(Spring Cloud) Zuul</title>
      <link href="/2018/03/11/Spring-Cloud-Zuul/"/>
      <content type="html"><![CDATA[<h1 id="Zuul"><a href="#Zuul" class="headerlink" title="Zuul"></a>Zuul</h1><p>Netflix에서 사용하는 JVM 기반의 라우터이자, 로드 밸런서</p><p>아래의 용도로 사용할 수 있다</p><ul><li>인증과 보안 : 리소스에 대한 인증 정보를 식별하고, 인증이 되지 않는 경우 요청 거부</li><li>모니터링과 분석 : 서비스 상세를 파악하기 위해, 의미있는 정보와 통계를 추적</li><li>동적 라우팅</li><li>트래픽 조정</li><li>그 외…</li></ul><a id="more"></a><table><thead><tr><th><img src="https://camo.githubusercontent.com/5e596c573110bffb608614a09c97611107205d0d/687474703a2f2f6e6574666c69782e6769746875622e696f2f7a75756c2f696d616765732f7a75756c2d706879736963616c2d617263682e706e67" alt="image"></th></tr></thead><tbody><tr><td><em>출처 : <a href="https://github.com/Netflix/zuul/wiki/How-We-Use-Zuul-At-Netflix" target="_blank" rel="noopener">https://github.com/Netflix/zuul/wiki/How-We-Use-Zuul-At-Netflix</a></em></td></tr></tbody></table><h1 id="기본-예제"><a href="#기본-예제" class="headerlink" title="기본 예제"></a>기본 예제</h1><p><strong>상황</strong></p><ol><li>client가 zuul을 <code>http://zuul.com/api/members/1</code>을 호출하면</li><li>zuul은 해당 요청을 <code>member-api</code>에  <code>http://member-api/api/members/1</code>로 보낸다</li></ol><blockquote><p>참고로 Ribbon, Feign 등에서 대상 서버의 <code>spring.application.name</code>을 domain으로 넣으면, 로드밸런싱 후 알아서 IP로 변환된다<br><code>http://member-api/api/members/1</code> -&gt; <code>http://x.x.x.x/api/members/1</code></p></blockquote><img  src=http://www.plantuml.com/plantuml/svg/YqxEoKpDAubLqDMrKuYkAYtDYLMmKiWeAIcmqjS7SVMIytFr4miozNDJSvDIYuhr3RcWoi0w8AAwG0L8-X22g3e1><blockquote><p>예제 소스는 이전의 <code>Ribbon과 Eureka</code>에서 이어짐</p></blockquote><h2 id="member-api"><a href="#member-api" class="headerlink" title="member-api"></a>member-api</h2><ul><li>eureka 적용</li><li>spring-data-rest 적용(base path: /api)</li><li><code>/api/members/1</code> 호출 시 <code>{&quot;name&quot;: &quot;a&quot;,&quot;grade&quot;: &quot;BRONZE&quot;,&quot;_links&quot;:...}</code> 응답</li></ul><p><strong>application.yml</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application.name: member-api</span><br><span class="line">  data.rest.base-path: &#x2F;api</span><br><span class="line">eureka.client.service-url.defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka</span><br></pre></td></tr></table></figure><ul><li><code>spring.application.name</code> : eureka에 등록되는 serivce id</li></ul><h2 id="gateway"><a href="#gateway" class="headerlink" title="gateway"></a>gateway</h2><p><strong>의존성 추가</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span>(<span class="string">'org.springframework.cloud:spring-cloud-starter-zuul'</span>)</span><br></pre></td></tr></table></figure><p><strong>자바 설정 추가</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GatewayApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>application.yml</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.application.name:</span> <span class="string">api-gateway</span></span><br><span class="line"><span class="attr">eureka.client.service-url.defaultZone:</span> <span class="string">http://localhost:8761/eureka</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">member-api:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/api/members/**</span></span><br><span class="line">      <span class="attr">stripPrefix:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li><code>zuul.routes.&lt;serviceId&gt;.path</code> : 해당 path의 요청을 <code>&lt;serviceId&gt;</code>로 보낸다</li><li><code>zuul.routes.&lt;serviceId&gt;.stripPrefix</code>: false인 경우 uri를 모두 보내며(<code>/api/members/1</code>), true인 경우에는 matching된 값을 제외하고 보낸다(<code>/1</code>)</li></ul><h2 id="실행"><a href="#실행" class="headerlink" title="실행"></a>실행</h2><ol><li>eureka-server start</li><li>gateway, member-api(8083, 8084) start(순서 상관 없음)</li></ol><p><strong>member-api</strong></p><p><code>GET http://localhost:8083/api/members/1</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;a&quot;,</span><br><span class="line">  &quot;grade&quot;: &quot;BRONZE&quot;,</span><br><span class="line">  &quot;_links&quot;:&#123;</span><br><span class="line">    &quot;self&quot;:&#123;</span><br><span class="line">      &quot;href&quot;: &quot;http:&#x2F;&#x2F;localhost:8083&#x2F;api&#x2F;members&#x2F;1&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;member&quot;:&#123;</span><br><span class="line">      &quot;href&quot;: &quot;http:&#x2F;&#x2F;localhost:8083&#x2F;api&#x2F;members&#x2F;1&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>gateway(같은 응답)</strong></p><p><code>GET http://localhost:8080/api/members/1</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;a&quot;,</span><br><span class="line">  &quot;grade&quot;: &quot;BRONZE&quot;,</span><br><span class="line">  &quot;_links&quot;:&#123;</span><br><span class="line">    &quot;self&quot;:&#123;</span><br><span class="line">      &quot;href&quot;: &quot;http:&#x2F;&#x2F;localhost:8083&#x2F;api&#x2F;members&#x2F;1&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;member&quot;:&#123;</span><br><span class="line">      &quot;href&quot;: &quot;http:&#x2F;&#x2F;localhost:8083&#x2F;api&#x2F;members&#x2F;1&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hystrix-Ribbon과-결합"><a href="#Hystrix-Ribbon과-결합" class="headerlink" title="Hystrix, Ribbon과 결합"></a>Hystrix, Ribbon과 결합</h1><p>eureka에 등록된 대상 서버의 <code>spring.application.name(serivceId)</code>를 기반으로 아래와 같이<br>Hystrix, Ribbon 설정을 결합할 수 있다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">zuul:</span><br><span class="line">  routes:</span><br><span class="line">    member-api:</span><br><span class="line">      path: &#x2F;api&#x2F;members&#x2F;**</span><br><span class="line">      stripPrefix: false</span><br><span class="line"></span><br><span class="line">hystrix:</span><br><span class="line">  command:</span><br><span class="line">    member-api:</span><br><span class="line">      execution:</span><br><span class="line">        isolation:</span><br><span class="line">          thread:</span><br><span class="line">            # Ribbon의 각 timeout보다 커야 기대하는대로 동작함</span><br><span class="line">            timeoutInMilliseconds: 5000 </span><br><span class="line"></span><br><span class="line">member-api:</span><br><span class="line">  ribbon:</span><br><span class="line">    NIWSServerListClassName: com.netflix.loadbalancer.ConfigurationBasedServerList</span><br><span class="line">    ConnectTimeout: 1000</span><br><span class="line">    ReadTimeout: 3000</span><br><span class="line">    MaxTotalHttpConnections: 500</span><br><span class="line">    MaxConnectionsPerHost: 100</span><br></pre></td></tr></table></figure><h1 id="Zuul-Properties"><a href="#Zuul-Properties" class="headerlink" title="Zuul Properties"></a>Zuul Properties</h1><p><code>application.yml</code>의 <code>zuul</code>로 시작하는 property는 <code>ZuulProperties</code> 클래스에 매핑된다</p><p><strong>zuul properties(일부)</strong></p><ul><li><code>zuul.host.maxTotalConnections</code> : backend에 연결할 수 있는 최대 connection 갯수, 기본 200 -&gt; eureka를 사용하지 않을시 적용됨</li><li><code>zuul.host.maxPerRouteConnections</code> : <code>route</code> 별 최대 connection 갯수, 기본 20 -&gt; eureka를 사용하지 않을 시 적용됨</li><li><code>zuul.host.socketTimeoutMillis</code></li><li><code>zuul.host.connectTimeoutMillis</code></li><li><code>zuul.ribbonIsolationStrategy</code> : Hystrix의 isolation 방식 - 기본은 <code>SEMAPHORE</code></li><li><code>zuul.retryable</code> : true인 경우 Ribbon client의 설정대로, 요청이 실패시 재시도</li><li><code>zuul.addProxyHeaders</code> : true인 경우, <code>X-Forwarded-Host</code> 헤더가 추가됨</li></ul><blockquote><p>eureka를 사용하면서 readTimeout, socketTimeout을 사용하려면<br><code>ribbon.ReadTimeout</code>, <code>ribbon.SocketTimeout</code>을 사용해야한다</p></blockquote><h1 id="Zuul-Http-Client"><a href="#Zuul-Http-Client" class="headerlink" title="Zuul Http Client"></a>Zuul Http Client</h1><p>zuul은 기본적으로 Apache HTTP Client를 사용</p><p><code>ribbon.restclient.enabled=true</code> 혹은 <code>ribbon.okhttp.enabled=true</code>를 설정하여 다른 library를 사용할 수도 있다</p><p>커스터마이징한 Apache HTTP client, OK HTTP client를 쓰고 싶은 경우, <code>ClosableHttpClient</code> 혹은 <code>OkHttpClient</code>를 빈으로 등록하면 된다</p><h1 id="Cookie와-Sensitive-Header"><a href="#Cookie와-Sensitive-Header" class="headerlink" title="Cookie와 Sensitive Header"></a>Cookie와 Sensitive Header</h1><p>동일한 시스템 내에서 공유되는 요청 헤더를 외부(downstream)로 노출하지 않아야하는 경우가 있을 수 있다</p><p><code>sensitiveHeaders</code>를 설정하여 내부에서 사용되는 헤더값이 노출되는 것을 막을 수 있다</p><p><strong>application.yml</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">zuul:</span><br><span class="line">  routes:</span><br><span class="line">    users:</span><br><span class="line">      path: &#x2F;myusers&#x2F;**</span><br><span class="line">      sensitiveHeaders: Cookie,Set-Cookie,Authorization</span><br><span class="line">      url: https:&#x2F;&#x2F;downstream</span><br></pre></td></tr></table></figure><p>위 예제의 <code>Cookie</code>, <code>Set-Cookie</code>, <code>Authorization</code>은 zuul의 기본값이며, <code>sensitiveHeaders</code>를 사용하지 않으려면 명시적으로 값을 비워둬야한다</p><h1 id="Endpoint-관리-spring-actuator"><a href="#Endpoint-관리-spring-actuator" class="headerlink" title="Endpoint 관리(spring-actuator)"></a>Endpoint 관리(spring-actuator)</h1><p><code>@EnableZuulProxy</code>를 사용하면 아래의 actuator endpoint가 추가된다</p><ul><li>Routes</li><li>Filters</li></ul><h2 id="Routes-Endpoint"><a href="#Routes-Endpoint" class="headerlink" title="Routes Endpoint"></a>Routes Endpoint</h2><h3 id="GET-application-routes"><a href="#GET-application-routes" class="headerlink" title="GET /application/routes"></a><code>GET /application/routes</code></h3><p><strong>eureka를 안쓰는 경우</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &#x2F;api&#x2F;members&#x2F;**: &quot;http:&#x2F;&#x2F;localhost:8083&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>eureka를 쓰는 경우</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;&#x2F;api&#x2F;members&#x2F;**&quot;: &quot;member-api&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="GET-application-routes-format-details"><a href="#GET-application-routes-format-details" class="headerlink" title="GET /application/routes?format=details"></a><code>GET /application/routes?format=details</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;&#x2F;api&#x2F;members&#x2F;**&quot;:&#123;</span><br><span class="line">    &quot;id&quot;: &quot;member-api&quot;,</span><br><span class="line">    &quot;fullPath&quot;: &quot;&#x2F;api&#x2F;members&#x2F;**&quot;,</span><br><span class="line">    &quot;location&quot;: &quot;member-api&quot;,</span><br><span class="line">    &quot;path&quot;: &quot;&#x2F;api&#x2F;members&#x2F;**&quot;,</span><br><span class="line">    &quot;retryable&quot;: false,</span><br><span class="line">    &quot;customSensitiveHeaders&quot;: false,</span><br><span class="line">    &quot;prefixStripped&quot;: false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><p><code>POST /application/routes</code> 요청으로 route의 속성을 변경할 수 있다</p><p>변경 못하게 하려면 <code>endpoints.routes.enabled=false</code>로 설정한다</p><h1 id="URL-패턴과-Local-Forward"><a href="#URL-패턴과-Local-Forward" class="headerlink" title="URL 패턴과 Local Forward"></a>URL 패턴과 Local Forward</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">zuul:</span><br><span class="line"> routes:</span><br><span class="line">   first:</span><br><span class="line">     path: &#x2F;first&#x2F;**</span><br><span class="line">     url: http:&#x2F;&#x2F;first.example.com</span><br><span class="line">   second:</span><br><span class="line">     path: &#x2F;second&#x2F;**</span><br><span class="line">     url: forward:&#x2F;second</span><br><span class="line">   third:</span><br><span class="line">     path: &#x2F;third&#x2F;**</span><br><span class="line">     url: forward:&#x2F;3rd</span><br><span class="line">   legacy:</span><br><span class="line">     path: &#x2F;**</span><br><span class="line">     url: http:&#x2F;&#x2F;legacy.example.com</span><br></pre></td></tr></table></figure><ul><li><code>/first/**</code> : 외부로 라우팅</li><li><code>/second/**</code> : 내부(local)에서 처리됨(spring <code>@RequestMapping</code>)</li><li><code>/third/**</code> : <code>/second/**</code>와 마찬가지로 내부에서 처리되나 prefix가 변경됨(<code>/third/foo</code> -&gt; <code>/3rd/foo</code>)</li><li>그 외 : <code>legacy</code>로 처리</li></ul><h1 id="Hystrix-Fallback"><a href="#Hystrix-Fallback" class="headerlink" title="Hystrix Fallback"></a>Hystrix Fallback</h1><p><code>FallbackProvier</code> 타입의 spring bean을 등록하여, 특정 route의 fallback을 실행시킬 수 있다<br>route의 id를 명시해야하며, fallback에 대한 반환형으로 <code>ClientHttpResponse</code>를 써야한다.</p><p><strong>예제</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFallbackProvider</span> <span class="keyword">implements</span> <span class="title">FallbackProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 모든 route에 대해 기본 fallback을 지정하고 싶으면, "*"이나 null을 반환</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"customers"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientHttpResponse <span class="title">fallbackResponse</span><span class="params">(String route, <span class="keyword">final</span> Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> HystrixTimeoutException) &#123;</span><br><span class="line">            <span class="keyword">return</span> response(HttpStatus.GATEWAY_TIMEOUT);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> response(HttpStatus.INTERNAL_SERVER_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ClientHttpResponse <span class="title">response</span><span class="params">(<span class="keyword">final</span> HttpStatus status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ClientHttpResponse() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> HttpStatus <span class="title">getStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> status;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRawStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> status.value();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getStatusText</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> status.getReasonPhrase();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> InputStream <span class="title">getBody</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ByteArrayInputStream(<span class="string">"fallback"</span>.getBytes());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> HttpHeaders <span class="title">getHeaders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">                headers.setContentType(MediaType.APPLICATION_JSON);</span><br><span class="line">                <span class="keyword">return</span> headers;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Zuul-Filter"><a href="#Zuul-Filter" class="headerlink" title="Zuul Filter"></a>Zuul Filter</h1><table><thead><tr><th><img src="https://camo.githubusercontent.com/4eb7754152028cdebd5c09d1c6f5acc7683f0094/687474703a2f2f6e6574666c69782e6769746875622e696f2f7a75756c2f696d616765732f7a75756c2d726571756573742d6c6966656379636c652e706e67" alt="image"></th></tr></thead><tbody><tr><td><em>출처 : <a href="https://github.com/Netflix/zuul/wiki/How-it-Works" target="_blank" rel="noopener">https://github.com/Netflix/zuul/wiki/How-it-Works</a></em></td></tr></tbody></table><h2 id="Pre-Filter"><a href="#Pre-Filter" class="headerlink" title="Pre Filter"></a>Pre Filter</h2><p>주로 backend에 보내줄 정보를 <code>RequestContext</code>에 담는 역할</p><p><strong>Payco의 AccessToken으로 email을 넘겨주는 경우</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryParamPreFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> PRE_DECORATION_FILTER_ORDER - <span class="number">1</span>; <span class="comment">// run before PreDecoration</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> PRE_TYPE;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"member-api"</span>.equals(context.get(SERVICE_ID_KEY));</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">    HttpServletRequest request = context.getRequest();</span><br><span class="line">    String email = paycoTokenToEmail(request);</span><br><span class="line">    context.addZuulRequestHeader(<span class="string">"X-PAYCO-EMAIL"</span>, email);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>email은 소중한 개인 정보입니다. 다루실 때 주의하시기 바랍니다.</p></blockquote><h2 id="Route-Filter"><a href="#Route-Filter" class="headerlink" title="Route Filter"></a>Route Filter</h2><p>pre filter 이후에 실행되며, 다른 서비스로 보낼 요청을 작성한다</p><p>이 필터는 주로 request, response를 client가 요구하는 모델로 변환하는 작업을 수행한다</p><p>아래의 예제는 Servlet Request를 OkHttp3 Request로 변환하고, 요청을 실행하고,</p><p>OkHttp3 Response를 Servlet Response로 변환하는 작업을 수행한다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OkHttpRoutingFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProxyRequestHelper helper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ROUTE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SIMPLE_HOST_ROUTING_FILTER_ORDER - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RequestContext.getCurrentContext().getRouteHost() != <span class="keyword">null</span></span><br><span class="line">               &amp;&amp; RequestContext.getCurrentContext().sendZuulResponse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        OkHttpClient httpClient = <span class="keyword">new</span> OkHttpClient.Builder()</span><br><span class="line">                <span class="comment">// customize</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = context.getRequest();</span><br><span class="line"></span><br><span class="line">        String method = request.getMethod();</span><br><span class="line"></span><br><span class="line">        String uri = <span class="keyword">this</span>.helper.buildZuulRequestURI(request);</span><br><span class="line"></span><br><span class="line">        Headers.Builder headers = <span class="keyword">new</span> Headers.Builder();</span><br><span class="line">        Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class="line">        <span class="keyword">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class="line">            String name = headerNames.nextElement();</span><br><span class="line">            Enumeration&lt;String&gt; values = request.getHeaders(name);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (values.hasMoreElements()) &#123;</span><br><span class="line">                String value = values.nextElement();</span><br><span class="line">                headers.add(name, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        InputStream inputStream = request.getInputStream();</span><br><span class="line"></span><br><span class="line">        RequestBody requestBody = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (inputStream != <span class="keyword">null</span> &amp;&amp; HttpMethod.permitsRequestBody(method)) &#123;</span><br><span class="line">            MediaType mediaType = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (headers.get(<span class="string">"Content-Type"</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mediaType = MediaType.parse(headers.get(<span class="string">"Content-Type"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            requestBody = RequestBody.create(mediaType, StreamUtils.copyToByteArray(inputStream));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Request.Builder builder = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .headers(headers.build())</span><br><span class="line">                .url(uri)</span><br><span class="line">                .method(method, requestBody);</span><br><span class="line"></span><br><span class="line">        Response response = httpClient.newCall(builder.build()).execute();</span><br><span class="line"></span><br><span class="line">        LinkedMultiValueMap&lt;String, String&gt; responseHeaders = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, List&lt;String&gt;&gt; entry : response.headers().toMultimap().entrySet()) &#123;</span><br><span class="line">            responseHeaders.put(entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.helper.setResponse(response.code(), response.body().byteStream(),</span><br><span class="line">                                responseHeaders);</span><br><span class="line">        context.setRouteHost(<span class="keyword">null</span>); <span class="comment">// prevent SimpleHostRoutingFilter from running</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Post-Filter"><a href="#Post-Filter" class="headerlink" title="Post Filter"></a>Post Filter</h2><p>Response를 생성하는 작업을 처리한다</p><p>아래 예제는 <code>X-Sample</code> 헤더에 임의의 <code>UUID</code>를 넣는 소스이다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddResponseHeaderFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> POST_TYPE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> SEND_RESPONSE_FILTER_ORDER - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">    HttpServletResponse servletResponse = context.getResponse();</span><br><span class="line">servletResponse.addHeader(<span class="string">"X-Sample"</span>, UUID.randomUUID().toString());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>Zuul은 내부에서 Ribbon, Hystrix 등을 사용하기 때문에, 이 자체로도 LoadBalancer로 볼 수도 있고, API Gateway라고 볼수도 있다<br>Netflix에서는 모든 요청에 대한 Front door라고 부른다</p><p> 주변에서 api-gateway로 각광받고 있는 Kong과 비교해달라는 요청이 있었다.</p><p> 사실상, Kong이 할 수 있는 일과 Zuul이 할 수 있는 일에 대해서는 거의 차이점이 없다.<br> Java를 잘 다룰 줄 안다면, Zuul로 세세한 부분까지 커스터마이징해서 사용할 수 있고,<br> Kong은 자체로 제공해주는 plugin들로 필요한 부분들을 쉽게 설정할 수 있다</p><p><code>사용상의 편의</code>라는 점을 제외한다면, Zuul과 Kong의 비교가 아니라 Zuul과 nginx의 비교가 된다<br>tomcat에서 Zuul을 올려 사용한다면 thread pool 기반으로 동작할 것이고<br>Kong을 사용한다면 event driven 방식으로 동작할 것이다</p><p>성능상에서(<code>중요한 부분을 거두절미하고 말하자면 Non-Blocking은 좋은 것이다!</code>)<br>저사양 서버에서는 nginx를 사용하는 Kong이 더 좋은 성능을 보이고,<br>자원이 충분한 서버에서는 둘 간의 차이는 거의 없다<br>AWS Instance 기반의 벤치마킹 : <a href="https://engineering.opsgenie.com/comparing-api-gateway-performances-nginx-vs-zuul-vs-spring-cloud-gateway-vs-linkerd-b2cc59c65369" target="_blank" rel="noopener">https://engineering.opsgenie.com/comparing-api-gateway-performances-nginx-vs-zuul-vs-spring-cloud-gateway-vs-linkerd-b2cc59c65369</a></p><p>고무적인 것은 Zuul도 2.0 버전에서 Netty 기반의 Non-bloking을 지원할 것이라는 점이다</p>]]></content>
      
      <categories>
          
          <category> spring </category>
          
          <category> cloud </category>
          
          <category> netflix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring-cloud </tag>
            
            <tag> spring </tag>
            
            <tag> netflix </tag>
            
            <tag> zuul </tag>
            
            <tag> api-gateway </tag>
            
            <tag> proxy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Cloud를 사용한 Auto Scaling</title>
      <link href="/2018/03/11/Spring-Cloud-Auto-Scaling/"/>
      <content type="html"><![CDATA[<h1 id="Eureka-Topology"><a href="#Eureka-Topology" class="headerlink" title="Eureka Topology"></a>Eureka Topology</h1><img  src=http://www.plantuml.com/plantuml/svg/IyxFBSZFIyqhKOXsBIrApKvK24ujAaijYkLAHiWa5cJgfYUMf9OdLce4PIObvUVfA41LE-Ta0fLeeYZFJSrDIYtI1UhIG5V5HOnP2hevgMabkdReJbAmKdZJCkVrfXQ5rwjMlbuuL-7DmWrlP_LmuR5GGRUq0Aj1hoTl19f0f7DIyilpGARWiGVej5bJtcnQg_1cGSkRjeK0><ul><li>중앙 레지스트리 컴포넌트에 서비스 식별자, 호스트명, 포트 번호, 동작 상태 등의 메타데이터를 담을 수 있다</li><li>Ribbon과 함께 클라이언트 측의 동적 부하 분산 기능을 담당할 수 있다</li></ul><p><strong>단점</strong></p><ul><li>인스턴스 추가를 수동으로 해야한다!!!</li><li>인스턴스 종료를 수동으로 해야한다!!!</li></ul><a id="more"></a><h1 id="자동확장-Auto-Scale-out"><a href="#자동확장-Auto-Scale-out" class="headerlink" title="자동확장(Auto Scale-out)"></a>자동확장(Auto Scale-out)</h1><h2 id="자동확장이란"><a href="#자동확장이란" class="headerlink" title="자동확장이란?"></a>자동확장이란?</h2><ul><li>트래픽 증가시 : 추가 인스턴스를 만듦</li><li>트래픽 감소시 : 불필요한 여분의 인스턴스를 서비스에서 제외</li></ul><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><ul><li>고가용성</li><li>확장성 : 필요한 서비스 그룹만 수평적으로 늘릴 수 있다</li><li>자원 사용량 최적화</li></ul><h2 id="확장-모델"><a href="#확장-모델" class="headerlink" title="확장 모델"></a>확장 모델</h2><ul><li>애플리케이션 자동 확장 : 애플리케이션 바이너리 복제</li><li>인프라스트럭처 확장 : 전체 가상머신까지 복제</li></ul><h2 id="확장-모델-어플리케이션-자동-확장"><a href="#확장-모델-어플리케이션-자동-확장" class="headerlink" title="확장 모델(어플리케이션 자동 확장)"></a>확장 모델(어플리케이션 자동 확장)</h2><p><strong>A 시나리오</strong></p><img  src=http://www.plantuml.com/plantuml/svg/AqXCpavCJrLGUhMXuKrpu-iLEzvqBp1KKgZcKb28VjCov_NEbZTTImnZkMgvk0gmgJL2Lsk4MwqnkbfZe5e0><img  src=http://www.plantuml.com/plantuml/svg/AqXCpavCJrLGUhMXuKrpu-iLEzvqBp1HKgZcKb28VjCov_NEbZTTImnZkMgvk0gmgJL5LskaW5kn6OPYe5e0><ul><li>라이브러리만 바뀌었을 뿐 그 하부 인프라스트럭처는 바뀌지 않는다</li><li>라이브러리만 교체하고 가상머신은 그대로이므로 인스턴스화가 빠르게 이루어진다</li><li>OS 수준의 튜닝이 필요하다면 효과적이지 않을 수 있다</li></ul><h2 id="확장-모델-인프라스트럭처-자동-확장"><a href="#확장-모델-인프라스트럭처-자동-확장" class="headerlink" title="확장 모델(인프라스트럭처 자동 확장)"></a>확장 모델(인프라스트럭처 자동 확장)</h2><img  src=http://www.plantuml.com/plantuml/svg/AqXCpavCJrLGUZDhoviPZGflbanKKgZcKb0eW4cysj3mfhdnzOeTRxeN647a51IYtxJCURspvKtN4gDOe40jBWs6c1eC8HfgkRZWEjxCw03AuR7N18kz2dWjDiPYCLH7BG00><ul><li>대부분의 경우 새로운 가상머신을 그때그때 생성하고 제거</li><li>예비 인스턴스는 미리 정의된 서비스 인스턴스를 가진 가상머신 이미지로 생성</li><li><code>서비스1</code>에 대한 수요가 생길시 <code>가상머신3</code>이 운영 상태로 옮겨짐</li><li>가상머신 이미지가 본질적으로 무거우므로 새로운 가상머신을 운영 상태로 전환하는 데 시간이 많이 소요될 수 있다<ul><li>때문에 도커와 같은 가벼운 컨테이너가 선호된다</li></ul></li></ul><h2 id="확장-모델-클라우드-자동-확장"><a href="#확장-모델-클라우드-자동-확장" class="headerlink" title="확장 모델(클라우드 자동 확장)"></a>확장 모델(클라우드 자동 확장)</h2><p>AWS 등의 클라우드 서비스가 제공해주는 기능</p><h2 id="자동-확장-방식-자원-제약-조건-기반"><a href="#자동-확장-방식-자원-제약-조건-기반" class="headerlink" title="자동 확장 방식(자원 제약 조건 기반)"></a>자동 확장 방식(자원 제약 조건 기반)</h2><p><strong>실시간 지표(metric)</strong></p><ul><li>cpu, 메모리, disc 사용율 뿐 아니라 <code>Heap memory</code>와 같이 인스턴스가 스스로 수집할 수 있는 통계에 기반해 확장함</li></ul><p><strong>예제</strong></p><ul><li>CPU사용량 60%를 초과하면 인스턴스 추가</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[모니터링] .right.&gt; [인스턴스3] : CPU가 60% 이상이면 가동</span><br><span class="line">[모니터링] -down-&gt; [인스턴스1] : CPU 모니터링</span><br><span class="line">[모니터링] -down-&gt; [인스턴스2] : CPU 모니터링</span><br></pre></td></tr></table></figure><ul><li>응답 슬라이딩 : 60초 슬라이딩 윈도우 내에서 특정 트랜잭션의 60% 이상의 응답 시간이 정해진 한계치를 넘으면 인스턴스 추가</li><li>CPU 슬라이딩 : 5분 슬라이딩 윈도우 내에서 CPU 사용량이 70% 넘으면 새 인스턴스를 추가</li><li>예외 슬라이딩 : 60초 슬라이딩 윈도우 내에서 80% 이상의 트랜잭션이 스레드 풀 부족에 의한 타임아웃이 발생했을 시, 새 인스턴스 추가</li></ul><h2 id="자동-확장-방식-특정-기간-동안"><a href="#자동-확장-방식-특정-기간-동안" class="headerlink" title="자동 확장 방식(특정 기간 동안)"></a>자동 확장 방식(특정 기간 동안)</h2><p><strong>개요</strong></p><p>특정 기간 동안에 집중적으로 발생하는 트래픽을 처리하는 데 사용되는 방식</p><img  src=http://www.plantuml.com/plantuml/svg/YtwzQiNhxewtBHjUBs-CLT0hoapFAD6pKuX-CtV7cwubRrks04dZM0Kh1GEBDzrptaoVeF1cnfhNopQyxbwYes084tlTj0KYnXMDQg1kIdvvdYwQUOQnH2apYWK0><h2 id="자동-확장-방식-메시지-큐-길이-기반"><a href="#자동-확장-방식-메시지-큐-길이-기반" class="headerlink" title="자동 확장 방식(메시지 큐 길이 기반)"></a>자동 확장 방식(메시지 큐 길이 기반)</h2><img  src=http://www.plantuml.com/plantuml/svg/Ytupe-FryYKARrhclDxPygPhIQo2Raf-UPwkdKAqRsfnSM9wga9WQMffQgo2bG9SxSPNcxU-wPwZy6RkbjURbhpjsg7mUiESDyrp5RcYNw-SycRk7Z2_RI72M4EWkQK5M4rzjNNDw_vMeCvLArvtTxnjsV1wUIDGTKvgMWbMzMyR9oYysh43QBV2gqqDRvhMAA3hrGFvG0-e5uTZZ52DURMXGS7Gm03acpVDZI0_hToYy6RR5A0u0000><h2 id="자동-확장-방식-예측에-의한-확장"><a href="#자동-확장-방식-예측에-의한-확장" class="headerlink" title="자동 확장 방식(예측에 의한 확장)"></a>자동 확장 방식(예측에 의한 확장)</h2><ul><li>트래픽이 갑자기 치솟을 때는 전통적인 자동 확장은 도움이 되지 못한다</li><li>실제 트래픽이 치솟기 전에 예측해서 확장한다</li><li><a href="https://medium.com/netflix-techblog/scryer-netflixs-predictive-auto-scaling-engine-a3f8fc922270" target="_blank" rel="noopener">Netflix Scryer</a></li><li>이력 정보, 현재 트렌드 등, 여러 가지 입력 정보를 바탕으로 발생 가능한 <code>트래픽 패턴</code>을 예측 - 빅데이터 분석 등의 솔루션과 연계</li></ul><h1 id="구현"><a href="#구현" class="headerlink" title="구현"></a>구현</h1><h2 id="필요한-기능"><a href="#필요한-기능" class="headerlink" title="필요한 기능"></a>필요한 기능</h2><img  src=http://www.plantuml.com/plantuml/svg/hP91Im915CVl-odUqJtiHdOByI8TWZe5NROEjivXoLQPtA3RPal89XJaWeah2beK6wooY46Vo7dp7Pg1g8jBMjxU3FFx_zwR6MFVCcdbWD0BooImQv_NYhP9De_it8v3oMaH2cMBsBNyCMXELSk3WLwNlNle3u7r6_ZiYehxC_OK_I0oZL21R0Dx6BD1g1WBBTbrMrQXSXeOBFp0CE4j3x0UoUegWNdY2W1xzp9O1auyOAyl8Xzm4FDEK_aDq-G0Ir-hb8oPFmAS3R0VP3REI8rQfleFJNQj6c4fb2jE2RuqcKDYbofKbPayyB3JmjikyCS0UwCCJWEyQQeWToTlIXgfwsczRotk_RhnVK8iGZ6BiZolErNzptzgvGbI7ddQciSkx5adj4WlWSKnlujuq9wFOrPlVm80><ul><li>마이크로 서비스 : 지속적으로 상태, 성능 성보를 전달(spring-actuator 사용시: <code>/mertirc</code>)</li><li>서비스 레지스트리 : 모든 서비스와 해당 서비스들의 상태, 메타데이터, 종단점 URI를 지속적으로 추적</li><li>로드 밸런서 : 사용 가능한 인스턴스 최신 정보를 얻기위해 서비스 레지스트리를 검색</li><li>라이프 사이클 관리자<ul><li>측정 지표 수집기 : 모든 서비스 인스턴스로부터 측정 지표 정보를 수집하는 책임, 슬라이딩 윈도우 유지</li><li>확장 정책 : CPU 60% 이상 등의 규칙 집합</li><li>결정 엔진 : 수집된 측정 지표와 확장 정책으로 확장과 축소를 결정하는 책임</li><li>배포 규칙 : 서비스를 위해 최소 4GB의 메모리가 있어야 한다 등의 배포 제약 조건를 사용</li><li>배포 엔진 : 레지스트리를 업데이트</li></ul></li></ul><blockquote><p>라이프 사이클 관리자가 직접 인스턴스 생성, 제거를 하더라도 역할 상으로는 문제 없어 보임<br>다만 역할을 분리하여 관리하는 것이, 운영하기가 더 수월할 수도 있겠다는 생각이 듦</p></blockquote><h2 id="spring-boot를-활용한-사용자-정의-라이프-사이클-관리자-구현"><a href="#spring-boot를-활용한-사용자-정의-라이프-사이클-관리자-구현" class="headerlink" title="spring-boot를 활용한 사용자 정의 라이프 사이클 관리자 구현"></a>spring-boot를 활용한 사용자 정의 라이프 사이클 관리자 구현</h2><img  src=http://www.plantuml.com/plantuml/svg/YtOjBKhDJbHuqpBdzQQMMAxertFtl9cxvUsK5eKtJMj0hCOj2eu10R4AkgK5kdOAqQZg5QmK3FN0d9qjRxgMABnUjWP8lUtQeV1cuOQtith8CCy8oRpNcrkWCYIPd99VdWSo6wHXIilhvOqAhxSrWBN230PPPAptQaCZajlVD3U-RPwZy6OJqAGrN7WrutBxwyaRNo-SYyTfUY1NDNSel9cx0sH-onQGSG00><ul><li>스프링 부트 서비스는 마이크로 서비스에 해당<ul><li>spring actuator가 활성화 되어 있고, 라이프 사이클 관리자는 이를 통해 측정 지표를 수집한다</li></ul></li><li>라이프 사이클 관리자는 스르핑 애플리케이션이다<ul><li>백그라운드 잡으로 실행</li><li>Eureka 서버를 폴링</li><li>Eureka 서버에서 받아온 서비스 목록의 actuator 종단점을 호출해서 상태와 수치 정보를 가져옴</li><li>인스턴스 종료는 각 서비스 인스턴스의 종료 서비스를 호출(<code>/shutdown 등</code>)</li><li>등록의 경우 SSH로 가상머신에 접속하고 미리 설치된 스크립트를 실행(혹은 스크립트 전달)</li></ul></li></ul><h2 id="member-api"><a href="#member-api" class="headerlink" title="member-api"></a>member-api</h2><p><strong>spring-actuator의 성능 지표</strong></p><p><code>/metrics</code> 호출시 서비스 상태 반환</p><p>참고 : <a href="https://cloud.spring.io/spring-cloud-netflix/multi/multi_netflix-metrics.html" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-netflix/multi/multi_netflix-metrics.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;mem&quot;: 491102,</span><br><span class="line">    &quot;mem.free&quot;: 247109,</span><br><span class="line">    &quot;processors&quot;: 4,</span><br><span class="line">    &quot;instance.uptime&quot;: 15898,</span><br><span class="line">    &quot;uptime&quot;: 42016,</span><br><span class="line">    &quot;systemload.average&quot;: 3.90234375,</span><br><span class="line">    &quot;heap.committed&quot;: 435200,</span><br><span class="line">    &quot;heap.init&quot;: 262144,</span><br><span class="line">    &quot;heap.used&quot;: 188090,</span><br><span class="line">    &quot;heap&quot;: 3728384,</span><br><span class="line">    &quot;nonheap.committed&quot;: 56920,</span><br><span class="line">    &quot;nonheap.init&quot;: 2496,</span><br><span class="line">    &quot;nonheap.used&quot;: 55903,</span><br><span class="line">    &quot;nonheap&quot;: 0,</span><br><span class="line">    &quot;threads.peak&quot;: 35,</span><br><span class="line">    &quot;threads.daemon&quot;: 30,</span><br><span class="line">    ...</span><br><span class="line">    &quot;httpsessions.max&quot;: -1,</span><br><span class="line">    &quot;httpsessions.active&quot;: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="member-api-1"><a href="#member-api-1" class="headerlink" title="member-api"></a>member-api</h2><p>분당 transaction 추가</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private GaugeService gaugeService;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public Filter transactionPerMinuteCountFilter() &#123;</span><br><span class="line"></span><br><span class="line">    return new OncePerRequestFilter() &#123;</span><br><span class="line">        private SlidingWindowCounter counter &#x3D; new SlidingWindowCounter(Duration.ofSeconds(10L));</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException &#123;</span><br><span class="line">            gaugeService.submit(&quot;gauge.request.per.10s&quot;, counter.increase());</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private class SlidingWindowCounter &#123;</span><br><span class="line">    private Duration duration;</span><br><span class="line">    private LocalDateTime expiry;</span><br><span class="line">    private long count;</span><br><span class="line"></span><br><span class="line">    public SlidingWindowCounter(Duration duration) &#123;</span><br><span class="line">        this.duration &#x3D; duration;</span><br><span class="line">        calculateExpiry();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void calculateExpiry() &#123;</span><br><span class="line">        this.expiry &#x3D; LocalDateTime.now().plus(duration);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public synchronized long increase() &#123;</span><br><span class="line">        if (expiry.isBefore(LocalDateTime.now())) &#123;</span><br><span class="line">            calculateExpiry();</span><br><span class="line">            count &#x3D; 1L;</span><br><span class="line">            return count;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return ++count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>http://localhost:8081/metrics</code></strong></p><p><code>/members</code>를 한 번 호출 후</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;gauge.request.per.10s()&quot;: 1,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LifecycleManagerApplication"><a href="#LifecycleManagerApplication" class="headerlink" title="LifecycleManagerApplication"></a>LifecycleManagerApplication</h2><h3 id="MetricsCollector"><a href="#MetricsCollector" class="headerlink" title="MetricsCollector"></a>MetricsCollector</h3><p><code>/metrics</code> 정보 수집</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">while (true) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        Thread.sleep(1000);</span><br><span class="line">    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 서비스 목록 순회</span><br><span class="line">    eurekaClient.getServices().forEach(service -&gt; &#123;</span><br><span class="line">        log.info(&quot;service : &#123;&#125;&quot;, service);</span><br><span class="line">        Map metrics &#x3D; restTemplate.getForObject(&quot;http:&#x2F;&#x2F;&#123;service&#125;&#x2F;metrics&quot;, Map.class, service);</span><br><span class="line">        decisionEngine.execute(service, metrics);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LifecycleManagerApplication-1"><a href="#LifecycleManagerApplication-1" class="headerlink" title="LifecycleManagerApplication"></a>LifecycleManagerApplication</h2><h3 id="DecisionEngine"><a href="#DecisionEngine" class="headerlink" title="DecisionEngine"></a>DecisionEngine</h3><p><code>/metrics</code> 정보로 배포가 필요한지 판단 후 배포 실행</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 서비스 별 정책에 의한 확장 필요여부 판단</span><br><span class="line">if (policies.getPolicy(serviceId).isScaleOutRequired(serviceId, metrics)) &#123;</span><br><span class="line">    return deploymentEngine.scaleOut(deploymentRules.getDeploymentRule(serviceId), serviceId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SamplePolicy</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public boolean isScaleOutRequired(String serviceId, Map metrics) &#123;</span><br><span class="line">    &#x2F;&#x2F; 10초당 100회 이상의 요청이 있는 경우 배포</span><br><span class="line">    if (metrics.containsKey(key)) &#123;</span><br><span class="line">        Long requestsPer10Seconds &#x3D; (Long) metrics.get(key);</span><br><span class="line">        log.info(&quot;&#123;&#125; : &#123;&#125;&quot;, key, requestsPer10Seconds);</span><br><span class="line">        return requestsPer10Seconds &gt; 10L;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LifecycleManagerApplication-2"><a href="#LifecycleManagerApplication-2" class="headerlink" title="LifecycleManagerApplication"></a>LifecycleManagerApplication</h2><h3 id="DeplymentEngine"><a href="#DeplymentEngine" class="headerlink" title="DeplymentEngine"></a>DeplymentEngine</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public boolean scaleOut(DeploymentRule rule, String serviceId) &#123;</span><br><span class="line"></span><br><span class="line">    if (!rule.executable()) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Thread thread &#x3D; new Thread(() -&gt; &#123;</span><br><span class="line">        executeDeploy();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    thread.start();</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; TODO: 배포 서비스에 맞춰 배포 실행</span><br><span class="line">private void executeDeploy() &#123;</span><br><span class="line">    log.info(&quot;배포 실행&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><p><strong>서적</strong></p><p><a href="http://www.acornpub.co.kr/book/spring-microservices" target="_blank" rel="noopener">스프링 마이크로 서비스(라제시 RV, 2017.07.27, acorn+PACKT)</a></p>]]></content>
      
      <categories>
          
          <category> spring </category>
          
          <category> architecture </category>
          
          <category> cloud </category>
          
          <category> netflix </category>
          
          <category> msa </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring-cloud </tag>
            
            <tag> eureka </tag>
            
            <tag> spring-actuator </tag>
            
            <tag> architecture </tag>
            
            <tag> msa </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>(Spring Cloud)Ribbon과 Eureka</title>
      <link href="/2018/03/11/Spring-Cloud-Ribbon-And-Eureka/"/>
      <content type="html"><![CDATA[<h1 id="Ribbon-Load-Balancer"><a href="#Ribbon-Load-Balancer" class="headerlink" title="Ribbon(Load Balancer)"></a>Ribbon(Load Balancer)</h1><h2 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h2><ul><li>클라이언트 측 로드 밸런서</li><li>여러 서버를 라운드로빈 방식의 부하 분산 기능을 제공(여러 알고리즘 사용 가능)</li><li>Spring Cloud Config와 결합하여, 서버 목록을 제공받아 사용할 수 있음</li></ul><a id="more"></a><h2 id="전통적인-LoadBalance-구조"><a href="#전통적인-LoadBalance-구조" class="headerlink" title="전통적인 LoadBalance 구조"></a>전통적인 LoadBalance 구조</h2><p><strong>상황</strong></p><ul><li>게시글 상세 화면 : 게시글 내용, 댓글, 추천 게시물을 노출</li><li>client에서 <code>http://api-gateway.com/boards/1</code>로 <code>api-gateway</code> 호출</li><li><code>api-gateway</code>에서는 <code>board 서버</code>, <code>comment 서버</code>, <code>recommend 서버</code>를 각각 호출</li></ul><img  src=http://www.plantuml.com/plantuml/svg/ZOwn3S8m44LxJt4BE8u33IaegDaWId745uXaRCjnYDY4WZaGGy4EA1HHC46YldlllwBI3PbG0bUsDtmDnTQYsg16Kv4l8GUPm244bmk1hk5x3DJZEQdiKUmiUjKA2S_B_N6xiWWTZHDk46O9n2YmpoVUkRcKnPZovdbB_aJ-xuufDEYMto6C6Hi8DDK1R1qX3ERcyrMQoj-dZ95HC5XV><h2 id="Ribbon을-사용한-구조"><a href="#Ribbon을-사용한-구조" class="headerlink" title="Ribbon을 사용한 구조"></a>Ribbon을 사용한 구조</h2><img  src=http://www.plantuml.com/plantuml/svg/TSz13e8m40NGVKyn5u02kY0iNBZs1eH5QKTeKbfJ6eatSU4vZ8VIEoWIYKMxdSpxywVaIg9s5KJ233hQGBapJ6oPOfgZhQ20D8RMkKD1AJl8g64E1tQAkUbeRPWLFKtXSRxThnUoe7FYbni3inYM58Y_DDCEknfjrACzJctKwmJKquqGUeV_Dr8tX6ZZ4AniMWTcxzSZy7bM6SvKQtfNv4cU4DG2HlUZ_OO1dmRcMJZNUoB0Lu7vUevz0W00><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>의존성</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile(&#39;org.springframework.cloud:spring-cloud-starter-ribbon&#39;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ext &#123;</span><br><span class="line">    springCloudVersion &#x3D; &#39;Finchley.M7&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencyManagement &#123;</span><br><span class="line">    imports &#123;</span><br><span class="line">        mavenBom &quot;org.springframework.cloud:spring-cloud-dependencies:$&#123;springCloudVersion&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>application.yml</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">board-api:</span><br><span class="line">  ribbon:</span><br><span class="line">    listOfServers:</span><br><span class="line">      - localhost:8081</span><br><span class="line">      - localhost:8082</span><br></pre></td></tr></table></figure><p><strong>interface</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@FeignClient(name &#x3D; &quot;board-api&quot;)</span><br><span class="line">public interface BoardClient &#123;</span><br><span class="line">    @GetMapping(&quot;&#x2F;boards&#x2F;&#123;id&#125;&quot;)</span><br><span class="line">    Board get(@PathVariable(&quot;id&quot;) Long id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>최초 호출시 로그</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DynamicServerListLoadBalancer for client videos-proxy initialized:</span><br><span class="line">DynamicServerListLoadBalancer:&#123;</span><br><span class="line">  NFLoadBalancer: name &#x3D; videos-proxy,</span><br><span class="line">  current list of Servers &#x3D; [10.162.3.34:8003, 10.162.3.37:8003],</span><br><span class="line">  Load balancer stats &#x3D; Zone stats: &#123;</span><br><span class="line">    unknown &#x3D; [Zone:unknown;Instance count:2;</span><br><span class="line">      Active connections count: 0;</span><br><span class="line">      Circuit breaker tripped count: 0;</span><br><span class="line">      Active connections per server: 0.0;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ribbon-설정"><a href="#Ribbon-설정" class="headerlink" title="Ribbon 설정"></a>Ribbon 설정</h2><ul><li>properties 설정 : <code>application.yml</code> 내에 <code>&lt;client&gt;.ribbon.*</code> 프로퍼티를 설정할 수 있음</li><li>Java 설정 : <code>@Configuration</code>, <code>@RibbonClient</code>를 선언하여 설정. <code>RibbonClientConfiguration</code>에 있는 설정을 <code>CustomConfiguration</code>으로 덮어씀</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@RibbonClient</span>(name = <span class="string">"custom"</span>, configuration = CustomConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>CustomConfiguration</code> 클래스는 반드시 <code>@Configuration</code>이 선언되어 있어야 하지만, <code>@ComponentScan</code>에 의해 등록되어서는 안된다<br>그렇지 않으면 모든 <code>@RibbonClients</code>가 공유하게 된다<br><code>@ComponentScan</code>이나 <code>@SpringBootApplication</code>을 사용하는 경우, 명시적으로 <code>CustomConfiguration</code>을 제외 시켜야한다</p></blockquote><p><strong>Spring Cloud Netflix는 Ribbon에서 사용하기 위해 아래의 Bean을 기본으로 제공함(즉, 확장 포인트!)</strong></p><table><thead><tr><th>Bean Type</th><th>Bean Name</th><th>Class Name</th></tr></thead><tbody><tr><td>IClientConfig</td><td>ribbonClientConfig</td><td>DefaultClientConfigImpl</td></tr><tr><td>IRule</td><td>ribbonRule</td><td>ZoneAvoidanceRule</td></tr><tr><td>IPing</td><td>ribbonPing</td><td>DummyPing</td></tr><tr><td>ServerList<Server></td><td>ribbonServerList</td><td>ConfigurationBasedServerList</td></tr><tr><td>ServerListFilter<Server></td><td>ribbonServerListFilter</td><td>ZonePreferenceServerListFilter</td></tr><tr><td>ILoadBalancer</td><td>ribbonLoadBalancer</td><td>ZoneAwareLoadBalancer</td></tr></tbody></table><p><strong>커스터마이징 예제</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FooConfiguration</span> </span>&#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ZonePreferenceServerListFilter <span class="title">serverListFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ZonePreferenceServerListFilter filter = <span class="keyword">new</span> ZonePreferenceServerListFilter();</span><br><span class="line">filter.setZone(<span class="string">"myTestZone"</span>);</span><br><span class="line"><span class="keyword">return</span> filter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IPing <span class="title">ribbonPing</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> PingUrl();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>이러한 확장 포인트로 어떻게 LoadBalancing을 할 것인지, 상세한 커스터마이징을 할 수 있음<br>Load Balancing은 기본적으로 Round Robin 방식으로 동작하지만,<br>spring-actuator의 metrics에 의존하여 그리 어렵지 않게, CPU 사용량, 메모리 사용양, 최근 30초 내 요청 수 등을 기준으로<br>상세한 부하분산 정책을 정의할 수 있음(<a href="https://cloud.spring.io/spring-cloud-netflix/multi/multi_netflix-metrics.html" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-netflix/multi/multi_netflix-metrics.html</a>)</p></blockquote><h2 id="Ribbon의-한계"><a href="#Ribbon의-한계" class="headerlink" title="Ribbon의 한계"></a>Ribbon의 한계</h2><p><code>board-server</code>에 과부하가 염려되어 서버를 5개를 추가하였다<br>Ribbon의 설정을 변경하여, <code>api-gateway</code>도 다시 빌드해서 배포해야한다<br><strong><code>board-server</code>가 새로 추가되고, 제거되는 것을 재빌드/배포없이 무중단으로 적용하고 싶다면 Eureka와 함께 사용하자</strong></p><p>여기까지의 예제 소스</p><p><a href="https://github.com/supawer0728/simple-spring-cloud/tree/ribbon" target="_blank" rel="noopener">https://github.com/supawer0728/simple-spring-cloud/tree/ribbon</a></p><h1 id="Eureka-동적-서비스-등록-발견"><a href="#Eureka-동적-서비스-등록-발견" class="headerlink" title="Eureka(동적 서비스 등록, 발견)"></a>Eureka(동적 서비스 등록, 발견)</h1><h2 id="동적-서비스-등록-발견"><a href="#동적-서비스-등록-발견" class="headerlink" title="동적 서비스 등록, 발견"></a>동적 서비스 등록, 발견</h2><h3 id="왜"><a href="#왜" class="headerlink" title="왜?"></a>왜?</h3><ul><li>서버 개수 동적 조절 - elastic service에서 URL을 환경설정 파일에 정적으로 미리 지정하는 것은 적합하지 않음</li><li>IP주소는 예측할 수 없으며, 어떤 파일에서 정적으로 관리하기가 어려움</li></ul><h3 id="등록"><a href="#등록" class="headerlink" title="등록"></a>등록</h3><img  src=http://www.plantuml.com/plantuml/svg/IyxFBSZFIyqhKOXEoayiIj5DBCYqiZ2mC8Z9iqajBKhDJbH8pia4ojl5SYNZK6j8WbeZ_6eXKhh5gKLbgKKQHQdfcSKbHPMQiLnS19sde5jQe6k7smW5AuNNapU-NZYNYw3hoJNAY0AZ0000><ul><li>서비스 제공자 관점의 프로세스</li><li>새로운 서비스가 시작될 때 중앙의 서비스 레지스트리에 등록</li><li>장애가 발생시 서비스 레지스트리에서 제외</li><li>레지스트리는 항상 최신 정보</li></ul><h3 id="발견"><a href="#발견" class="headerlink" title="발견"></a>발견</h3><img  src=http://www.plantuml.com/plantuml/svg/YquioDHDJon9BK-iZCcpIIqjIirEL4ZEoKpDAx6BLT2rKuY6YEaMfnQLfHPf5AMcPnQN55LgnYfOAHZglPwyyVN2kQydp55uqpBdzSwMDrrB5DuitF1sLWyNLpG1irFoo_D05YJb9nQbw08LMraOM1XWKMcbOAJtTiQEDzlca6Uc8GtCDC9h9W00><ul><li>사용자 관점의 프로세스</li><li>사용자가 서비스 레지스트리에서 필요한 서비스를 찾아서 호출할 수 있게 함</li><li>URL을 정적으로 관리하는 대신 서비스 레지스트리를 통해 그때 그때 사용 가능한 URL을 발견할 수 있음</li></ul><h2 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h2><p><strong>Server</strong></p><ul><li>Server는 모든 micro service가 자신의 가용성을 등록하는 레지스트리</li><li>등록 정보는 service id와 url을 포함</li><li>micro service가 시작되면 Eureka 서버에 접근해서 서비스 ID와 URL 등의 정보를 등록하고 자신을 알림(30초 heart-beat ping)</li></ul><p><strong>Client</strong></p><ul><li>Server로부터 레지스트리 정보를 읽어와 로컬에 캐시</li><li>30초마다 갱신</li><li>레지스트리 정보의 차이를 가져오는 방식으로 갱신(delta updates)</li></ul><h2 id="Server-Example"><a href="#Server-Example" class="headerlink" title="Server Example"></a>Server Example</h2><p><strong>의존성</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile &#39;org.springframework.cloud:spring-cloud-starter-eureka-server&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencyManagement &#123;</span><br><span class="line">    imports &#123;</span><br><span class="line">        mavenBom &quot;org.springframework.cloud:spring-cloud-netflix:$&#123;springCloudNetflixVersion&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>application.properties</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name&#x3D;service-registry</span><br><span class="line">server.port&#x3D;8761</span><br><span class="line"></span><br><span class="line">eureka.client.serviceUrl.defaultZone&#x3D;http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;</span><br><span class="line">eureka.client.registerWithEureka&#x3D;false</span><br><span class="line">eureka.client.fetchRegistry&#x3D;false</span><br></pre></td></tr></table></figure><p><strong>@EnableEurekaServer</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@EnableEurekaServer</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class ServiceRegistryApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(EurekaSampleApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Client-Example"><a href="#Client-Example" class="headerlink" title="Client Example"></a>Client Example</h2><p><strong>의존성</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile(&#39;org.springframework.cloud:spring-cloud-starter-eureka&#39;)</span><br></pre></td></tr></table></figure><h3 id="board-api"><a href="#board-api" class="headerlink" title="board-api"></a>board-api</h3><p><strong>application.yml</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name: board-api</span><br><span class="line">eureka.client.service-url.defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka</span><br></pre></td></tr></table></figure><p><strong>설정</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@EnableDiscoveryClient</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class BoardApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(BoardApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="api-gateway"><a href="#api-gateway" class="headerlink" title="api-gateway"></a>api-gateway</h3><p><strong>application.yml</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name: api-gateway</span><br><span class="line">eureka.client.service-url.defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka</span><br></pre></td></tr></table></figure><p><strong>설정</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@EnableDiscoveryClient</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class GatewayApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(GatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="service-registry-실행-예제"><a href="#service-registry-실행-예제" class="headerlink" title="service-registry 실행 예제"></a>service-registry 실행 예제</h2><p><code>http://localhost:8761</code></p><p><img src="/images/ribbon-eureka/%EC%8B%A4%ED%96%89%EC%98%88%EC%A0%9C1.png" alt="스크린샷 2018-03-05 오후 6.00.03.png"></p><h2 id="board-api-실행-예제"><a href="#board-api-실행-예제" class="headerlink" title="board-api 실행 예제"></a>board-api 실행 예제</h2><p><code>8081</code>, <code>8082</code> 로 서버를 띄움</p><p><code>BOARD-API</code>에 두 서버가 등록됨</p><p><img src="/images/ribbon-eureka/%EC%8B%A4%ED%96%89%EC%98%88%EC%A0%9C2.png" alt="스크린샷 2018-03-05 오후 6.07.27.png"></p><h2 id="gateway-실행-예제"><a href="#gateway-실행-예제" class="headerlink" title="gateway 실행 예제"></a>gateway 실행 예제</h2><p><code>8080</code>으로 서버를 띄움</p><p><code>API-GATEWAY</code>로 서버가 등록된</p><p><img src="/images/ribbon-eureka/%EC%8B%A4%ED%96%89%EC%98%88%EC%A0%9C3.png" alt="스크린샷 2018-03-05 오후 6.11.08.png"></p><p><strong><code>GET http://localhost:8080/boards/1</code>을 실행시 로그</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">2018-03-05 18:12:44.865  INFO 36121 --- [nio-8080-exec-1] c.n.l.DynamicServerListLoadBalancer      : </span><br><span class="line">DynamicServerListLoadBalancer for client board-api initialized: DynamicServerListLoadBalancer:</span><br><span class="line">&#123;</span><br><span class="line">  NFLoadBalancer:name&#x3D;board-api,current list of Servers&#x3D;[10.78.93.40:8081, 10.78.93.40:8082],</span><br><span class="line">  Load balancer stats&#x3D;Zone stats: &#123;</span><br><span class="line">    defaultzone&#x3D;[</span><br><span class="line">      Zone:defaultzone;</span><br><span class="line">      Instance count:2;</span><br><span class="line">      Active connections count: 0;</span><br><span class="line">      Circuit breaker tripped count: 0;</span><br><span class="line">      Active connections per server: 0.0;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  Server stats: [</span><br><span class="line">    [</span><br><span class="line">      Server:10.78.93.40:8082;</span><br><span class="line">      Zone:defaultZone;</span><br><span class="line">      Total Requests:0;</span><br><span class="line">      Successive connection failure:0;</span><br><span class="line">      Total blackout seconds:0;</span><br><span class="line">      Last connection made:Thu Jan 01 09:00:00 KST 1970;</span><br><span class="line">      First connection made: Thu Jan 01 09:00:00 KST 1970;</span><br><span class="line">      Active Connections:0;</span><br><span class="line">      total failure count in last (1000) msecs:0;</span><br><span class="line">      average resp time:0.0;</span><br><span class="line">      90 percentile resp time:0.0;</span><br><span class="line">      95 percentile resp time:0.0;</span><br><span class="line">      min resp time:0.0;</span><br><span class="line">      max resp time:0.0;</span><br><span class="line">      stddev resp time:0.0</span><br><span class="line">    ], [</span><br><span class="line">      Server:10.78.93.40:8081;</span><br><span class="line">      Zone:defaultZone;Total Requests:0;</span><br><span class="line">      Successive connection failure:0;</span><br><span class="line">      Total blackout seconds:0;</span><br><span class="line">      Last connection made:Thu Jan 01 09:00:00 KST 1970;</span><br><span class="line">      First connection made: Thu Jan 01 09:00:00 KST 1970;</span><br><span class="line">      Active Connections:0;</span><br><span class="line">      total failure count in last (1000) msecs:0;</span><br><span class="line">      average resp time:0.0;</span><br><span class="line">      90 percentile resp time:0.0;</span><br><span class="line">      95 percentile resp time:0.0;</span><br><span class="line">      min resp time:0.0;</span><br><span class="line">      max resp time:0.0;</span><br><span class="line">      stddev resp time:0.0</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"title1"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: <span class="string">"lorem ipsum1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Eureka-고가용성"><a href="#Eureka-고가용성" class="headerlink" title="Eureka 고가용성"></a>Eureka 고가용성</h2><p><strong>구조</strong></p><img  src=http://www.plantuml.com/plantuml/svg/YqujBKhDJjHDpibCpIinZ5NGBItGjLE8Tl4BrlV9JqnHS4hCISnBJYsAvOf6KMf4l59Zl4ennM2geOOKfnQLfHOP4g_KA9QB2rspWWqMPGfM2WMfgKKA9VbW6W00><p><strong>설정</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceRegistryApplication</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(AmpVideoCloudEurekaServerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>application.yml</strong></p><p><code>spring.profiles.active</code>을 <code>peer1</code>, <code>peer2</code> 등으로 설정하여 사용하도록 한 예제</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">peer1:</span></span><br><span class="line">  <span class="attr">address:</span> <span class="string">peer1</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8761</span></span><br><span class="line"><span class="attr">peer2:</span></span><br><span class="line">  <span class="attr">address:</span> <span class="string">peer2</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8761</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">peer1</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">address:</span> <span class="string">$&#123;peer1.address&#125;</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">$&#123;peer1.port&#125;</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">peer1</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;peer2.address&#125;:$&#123;peer2.port&#125;/eureka/</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">peer2</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">address:</span> <span class="string">$&#123;peer2.address&#125;</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">$&#123;peer2.port&#125;</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">peer2</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;peer1.address&#125;:$&#123;peer1.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><p><strong>TC서버에 올린 뒤 확인된 주의사항</strong></p><ol><li><code>/etc/hosts</code>에 peer1, peer2에 대한 설정을 해줘야함</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10.162.3.34     tcampapp-92c901.svr.toastmaker.net tcampapp-92c901</span><br><span class="line">10.162.3.37     peer2 tcampapp-92d901</span><br><span class="line">0.0.0.0         peer1</span><br></pre></td></tr></table></figure><ol start="2"><li><code>application</code>이 <code>0.0.0.0</code>으로 bind되어야함.<br><code>127.0.0.1</code>로 bind되는 경우, 외부에서 접근이 안됨.<br>사설 IP로 bind된 경우 <code>localhost:8761</code>이 접근이 안되는 현상 발생</li><li><code>eureka.client.service-url.defaultZone</code>의 <code>defaultZone</code>은 무조건 camelCase로 작성해야함(<code>Map&lt;String, String&gt;</code>)</li><li>P2P 통신을 통한 상호 업데이트의 기본 인터벌은 30초</li></ol><p><strong>그 외의 설정</strong></p><p><a href="https://github.com/Netflix/eureka/wiki/Overriding-Default-Configurations" target="_blank" rel="noopener">https://github.com/Netflix/eureka/wiki/Overriding-Default-Configurations</a></p><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p><strong>참고</strong></p><p>Spring cloud reference</p><ul><li>ribbon : <a href="http://cloud.spring.io/spring-cloud-static/Finchley.M7/single/spring-cloud.html#spring-cloud-ribbon" target="_blank" rel="noopener">http://cloud.spring.io/spring-cloud-static/Finchley.M7/single/spring-cloud.html#spring-cloud-ribbon</a></li><li>eureka-client : <a href="http://cloud.spring.io/spring-cloud-static/Finchley.M7/single/spring-cloud.html#_service_discovery_eureka_clients" target="_blank" rel="noopener">http://cloud.spring.io/spring-cloud-static/Finchley.M7/single/spring-cloud.html#_service_discovery_eureka_clients</a></li><li>eureka-server : <a href="http://cloud.spring.io/spring-cloud-static/Finchley.M7/single/spring-cloud.html#spring-cloud-eureka-server" target="_blank" rel="noopener">http://cloud.spring.io/spring-cloud-static/Finchley.M7/single/spring-cloud.html#spring-cloud-eureka-server</a></li></ul><p>서적<br>스프링 마이크로 서비스(라제시 RV, 2017.07.27, acorn+PACKT) : <a href="http://www.acornpub.co.kr/book/spring-microservices" target="_blank" rel="noopener">http://www.acornpub.co.kr/book/spring-microservices</a></p><p>예제 소스 : <a href="https://github.com/supawer0728/simple-spring-cloud/tree/eureka" target="_blank" rel="noopener">https://github.com/supawer0728/simple-spring-cloud/tree/eureka</a></p>]]></content>
      
      <categories>
          
          <category> spring </category>
          
          <category> cloud </category>
          
          <category> netflix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring-cloud </tag>
            
            <tag> eureka </tag>
            
            <tag> netflix </tag>
            
            <tag> ribbon </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>(Spring Cloud) Hystrix</title>
      <link href="/2018/03/11/Spring-Cloud-Hystrix/"/>
      <content type="html"><![CDATA[<h1 id="Hystrix란"><a href="#Hystrix란" class="headerlink" title="Hystrix란"></a>Hystrix란</h1><p>Netflix에서 <a href="https://martinfowler.com/bliki/CircuitBreaker.html" target="_blank" rel="noopener">Circuit Breaker Pattern</a>을 구현한 라이브러리이다. Micro Service Architecture에서 장애 전파 방지를 할 수 있다.</p><a id="more"></a><h2 id="Circuit-Breaker-Pattern"><a href="#Circuit-Breaker-Pattern" class="headerlink" title="Circuit Breaker Pattern"></a>Circuit Breaker Pattern</h2><table><thead><tr><th><img src="https://martinfowler.com/bliki/images/circuitBreaker/sketch.png" alt="Inline-image-2018-02-28 17.38.25.834.png"></th></tr></thead><tbody><tr><td><em>출처 : <a href="https://martinfowler.com/bliki/images/circuitBreaker" target="_blank" rel="noopener">https://martinfowler.com/bliki/images/circuitBreaker</a></em></td></tr></tbody></table><h1 id="장애-연쇄"><a href="#장애-연쇄" class="headerlink" title="장애 연쇄"></a>장애 연쇄</h1><p>위 그림에서 <code>supplier 서버</code>에 장애가 생겨 항상 Timeout이 발생하는 경우, <code>supplier 서버</code>를 호출한 <code>client 서버</code>는 Timeout이 발생할 때까지 응답이 밀리게 된다. 응답이 밀리는 동안 요청이 계속 쌓여 결국 <code>client 서버</code>까지 요청이 과하게 밀려 장애가 발생할 수 있다.</p><p>이러한 상황이 발생하지 않도록 <code>circuit breaker</code>를 두어 장애 전파를 막을 수 있다.</p><table><thead><tr><th><img src="https://raw.githubusercontent.com/spring-cloud/spring-cloud-netflix/master/docs/src/main/asciidoc/images/HystrixFallback.png" alt="image2"></th></tr></thead><tbody><tr><td><em>출처 : <a href="https://cloud.spring.io/spring-cloud-netflix/multi/multi__circuit_breaker_hystrix_clients.html" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-netflix/multi/multi__circuit_breaker_hystrix_clients.html</a></em></td></tr></tbody></table><h1 id="Hystrix-Flow-Chart"><a href="#Hystrix-Flow-Chart" class="headerlink" title="Hystrix Flow Chart"></a>Hystrix Flow Chart</h1><table><thead><tr><th><img src="https://raw.githubusercontent.com/wiki/Netflix/Hystrix/images/hystrix-command-flow-chart.png" alt="Inline-image-2018-03-05 10.55.00.102.png"></th></tr></thead><tbody><tr><td><em>출처 : <a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki/How-it-Works</a></em></td></tr></tbody></table><ol><li><code>HystrixCommand</code>, <code>HystrixObservableCommand</code> 객체 생성</li><li>Command 실행</li><li>캐시 여부 확인</li><li>회로 상태 확인</li><li>사용가능한 Thread Pool/Queue/Semaphore가 있는지 확인</li><li><code>HystrixObservableCommand.construc()</code>, 혹은 <code>HystrixCommand.run()</code> 실행</li><li>회로 상태 연산(Calculate circuit health)</li><li>fallback 실행</li><li>응답 반환</li></ol><h1 id="Hystrix-Circuit-Breaker-구현"><a href="#Hystrix-Circuit-Breaker-구현" class="headerlink" title="Hystrix Circuit Breaker 구현"></a>Hystrix Circuit Breaker 구현</h1><table><thead><tr><th><img src="https://github.com/Netflix/Hystrix/wiki/images/circuit-breaker-1280.png" alt="Inline-image-2018-03-05 11.04.14.221.png"></th></tr></thead><tbody><tr><td><em>출처 : <a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki/How-it-Works</a></em></td></tr></tbody></table><ol><li>circuit health check를 위한 최소한의 요청이 있을 때(<code>HystrixCommandProperties.circuitBreakerRequestVolumeThreshold()</code>)</li><li>그리고, 지정한 오류율을 초과했을 때(<code>HystrixCommandProperties.circuitBreakerErrorThresholdPercentage()</code>)</li><li>회로의 상태를 <code>CLOSED</code>에서 <code>OPEN</code>으로 변경</li><li>회로가 열린 동안, 모든 요청에 대해서 fallback method을 바로 실행</li><li>일정 시간이 지난 후(<code>HystrixCommandProperties.circuitBreakerSleepWindowInMilliseconds()</code>), 하나의 요청을 원래 method로 실행(<code>HALF OPEN</code>). 이 요청이 실패한다면 <code>OPEN</code>으로 두고, 이 요청이 성공한다면 <code>CLOSED</code>로 상태를 변경. 다시 1번으로 돌아감.</li></ol><h1 id="기본-설정"><a href="#기본-설정" class="headerlink" title="기본 설정"></a>기본 설정</h1><ul><li><code>metrics.rollingStats.timeInMilliseconds</code> : 오류 감시 시간, 기본값 10초</li><li><code>circuitBreaker.requestVolumeThreshold</code> : 감시 시간 내 요청 수, 기본값 20</li><li><code>circuitBreaker.errorThresholdPercentage</code> : 요청 대비 오류율, 기본값 50</li></ul><p>기본 설정을 풀어서 설명하면 다음과 같다</p><blockquote><p>감시시간 내(30초)에, 20번 이상의 요청이 있었고, 그 중에서 오류율이 50% 이상일 때 Circuit Breaker가 작동한다(circuit open)<br>감시 시간 내에 요청이 반드시 20번 이상이 있어야 회로가 열림. 30초 동안 요청이 19번이었고 모두 실패했어도 Circuit Breaker는 작동하지 않는다</p></blockquote><h1 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h1><p><strong>dependencies</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dependencyManagement &#123;</span><br><span class="line">    imports &#123;</span><br><span class="line">        mavenBom <span class="string">"org.springframework.cloud:spring-cloud-dependencies:$&#123;springCloudVersion&#125;"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span>(<span class="string">'org.springframework.cloud:spring-cloud-starter-netflix-hystrix'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>사용</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> SpringApplicationBuilder(Application<span class="class">.<span class="keyword">class</span>).<span class="title">web</span>(<span class="title">true</span>).<span class="title">run</span>(<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StoreIntegration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand</span>(commandKey=<span class="string">"getStores"</span>, fallbackMethod = <span class="string">"defaultStores"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getStores</span><span class="params">(Map&lt;String, Object&gt; parameters)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//do stuff that might fail</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">defaultStores</span><span class="params">(Map&lt;String, Object&gt; parameters)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="comment">/* something useful */</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>StoreIntegration.getStores()</code>가 실패하거나 회로가 열렸을 시에는 <code>.defaultStores</code>가 실행된다.</li></ul><h1 id="설정"><a href="#설정" class="headerlink" title="설정"></a>설정</h1><p><strong>application.yml로 설정예시</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="comment"># 전역설정</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution.isolation.thread.timeoutInMilliseconds:</span> <span class="number">10000</span></span><br><span class="line">    <span class="comment"># 특정 commandKey에 대한 설정</span></span><br><span class="line">    <span class="attr">getStores:</span></span><br><span class="line">      <span class="attr">execution.isolation.thread.timeoutInMilliseconds:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><p><strong>java 설정예시</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserResource</span> </span>&#123;</span><br><span class="line">    <span class="meta">@HystrixCommand</span>(commandProperties = &#123;</span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"execution.isolation.thread.timeoutInMilliseconds"</span>, value = <span class="string">"500"</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        threadPoolProperties = &#123;</span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"coreSize"</span>, value = <span class="string">"30"</span>),</span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"maxQueueSize"</span>, value = <span class="string">"101"</span>),</span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"keepAliveTimeMinutes"</span>, value = <span class="string">"2"</span>),</span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"queueSizeRejectionThreshold"</span>, value = <span class="string">"15"</span>),</span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"metrics.rollingStats.numBuckets"</span>, value = <span class="string">"12"</span>),</span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"metrics.rollingStats.timeInMilliseconds"</span>, value = <span class="string">"1440"</span>)&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userResource.getUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>설정 참고:<br><a href="https://github.com/Netflix/Hystrix/wiki/Configuration#execution.isolation.strategy" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki/Configuration#execution.isolation.strategy</a></p><h1 id="실사용례"><a href="#실사용례" class="headerlink" title="실사용례"></a>실사용례</h1><p>Micro Service Architecture에서 하나의 게시판을 보여주는 예제(게시글, 댓글, 추천 게시글 API를 호출)<br>예제는 spring 4.3.x + reactor로 작성했다.</p><img  src=http://www.plantuml.com/plantuml/svg/TOvB4eCW38Rtd88BC4otBjps09uWXIoO4S80hUFjJOjQr74Lyl4_OiX72XYADAFZ8SmE8Bed59nWRk2B8Da1qmTJG_dbULvumlgpEKGjaQflqZkfVwbPFyIVIlMEB6lwxdJziPvbwvwhNZbxSbYQ0jjErx5n9r0SXQpB7B66w6_80W00><p><strong>서비스</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoardService</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span> <span class="keyword">private</span> BoardClient boardClient;</span><br><span class="line">  <span class="meta">@Autowired</span> <span class="keyword">private</span> CommentClient commentClient;</span><br><span class="line">  <span class="meta">@Autowired</span> <span class="keyword">private</span> RecommendationClient recoClient;</span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"service.board.detail.timeout"</span>) <span class="keyword">private</span> Duration detailTimeout;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> BoardDetailDto <span class="title">getDetail</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// board server에서 게시물 단건 호출, 실패시 실패 응답 반환</span></span><br><span class="line">    Board board = boardClient.getOne(id);</span><br><span class="line">    <span class="keyword">if</span> (board == Board.ERROR) &#123;</span><br><span class="line">      <span class="keyword">return</span> BoardDetailDto.ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// board를 기반으로 댓글과 추천 게시물을 비동기 동시 호출</span></span><br><span class="line">    <span class="keyword">return</span> Mono.zip(Mono.just(board), commentClient.getCommentsByBoardId(id), recoClient.getRecommendationsByBoardId(id))</span><br><span class="line">               .map(TupleUtils.function(BoardDetailDto::<span class="keyword">new</span>))</span><br><span class="line">               .timeout(detailTimeout)</span><br><span class="line">               .doOnError(e.getMessage(), e)</span><br><span class="line">               .onErrorReturn(BoardDetailDto.create(board)) <span class="comment">// 실패시 board 만이라도 DTO로 만들어 응답</span></span><br><span class="line">               .blockOptional()</span><br><span class="line">               .orElse(BoardDetailDto.ERROR);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>CommentClient.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommentClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"getCommentsByBoardIdFallback"</span>)</span><br><span class="line">  <span class="keyword">public</span> Mono&lt;List&lt;Comment&gt;&gt; getCommentsByBoardId(<span class="keyword">long</span> id) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> Mono&lt;List&lt;Comment&gt;&gt; getCommentsByBoardIdFallback(<span class="keyword">long</span> id) &#123;</span><br><span class="line">    <span class="keyword">return</span> Mono.just(Collections.emptyList());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>여러 서비스를 호출하면서도, 하위 서비스의 장애가 client로 노출되지 않고, 성공한 서비스 응답들은 모두 client로 줄 수 있음</li></ul><h1 id="Isolation"><a href="#Isolation" class="headerlink" title="Isolation"></a>Isolation</h1><p>bulkhead pattern를 채용하여 종속성(dependency)을 분리하며, 각각에 대한 접근을 제한했다.</p><table><thead><tr><th><img src="https://github.com/Netflix/Hystrix/wiki/images/soa-5-isolation-focused-640.png" alt="Inline-image-2018-03-05 11.45.23.425.png"></th></tr></thead><tbody><tr><td><em>출처 : <a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki/How-it-Works</a></em></td></tr></tbody></table><h2 id="Threads-amp-ThreadPool"><a href="#Threads-amp-ThreadPool" class="headerlink" title="Threads &amp; ThreadPool"></a>Threads &amp; ThreadPool</h2><p>호출 thread와 별도의 thread(ex. Tomcat thread pool)에서 동작한다. </p><table><thead><tr><th><img src="https://github.com/Netflix/Hystrix/wiki/images/request-example-with-latency-1280.png" alt="Inline-image-2018-03-05 11.48.29.958.png"></th></tr></thead><tbody><tr><td><em>출처 : <a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki/How-it-Works</a></em></td></tr></tbody></table><blockquote><p>ThreadPool을 사용하지 않아도 되는 경우</p><ol><li>네트워크 connection/read timeout, retry 옵션을 사용하여 매우 빨리 실패하거나</li><li>client가 항상 정상동작한다는 신뢰가 있는 경우<br>즉, 그냥 ThreadPool을 사용하자</li></ol></blockquote><p><strong>Netflix에서 각각의 Thread pool을 사용하여 의존성 격리를 구성한 이유</strong></p><ul><li>결론부터 먼저 말하자면, Thread를 나누어 다른 Thread에 접근하기 어렵도록 종속성을 원천차단한다.</li><li>application은 수없이 많은 팀의, 수없이 많은 back-end service 를 수없이 많이 호출한다</li><li>각 service는 client library를 가지고 있다</li><li>client library는 항상 바뀐다</li><li>client library는 새로운 네트워크를 호출할 수도 있고, retry, parsing, caching 등의 logic을 가지며 <code>blackbox</code> 취급된다</li></ul><table><thead><tr><th><img src="https://github.com/Netflix/Hystrix/wiki/images/isolation-options-1280.png" alt="Inline-image-2018-03-05 11.59.03.923.png"></th></tr></thead><tbody><tr><td><em>출처 : <a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki/How-it-Works</a></em></td></tr></tbody></table><p><strong>Thread Pool 사용상 이점</strong></p><ul><li>application이 client library로부터 보호된다</li><li>덕분에 새 client library를 추가할 때의 risk를 낮출 수 있다, 장애는 격리된 thread에서 발생한다</li></ul><p><strong>Thread Pool 사용상 단점</strong></p><ul><li>queueing, scheduling, context switching 등의 오버 헤드 발생가 발생된다(Netflix에서는 이를 사소한 정도로 간주)</li></ul><p><strong>Thread 비용</strong></p><ul><li>Hystrix는 자식 thread에서 <code>construct()</code>, <code>run()</code>을 실행할 때, 부모 thread에서 총 종단 시간을 측정하여 overhead를 계산한다.</li><li>Netflix에서는 10억 건 이상의 Hystrix Command를 실행하며, 각 API 인스턴스마다 5-20개의 thread를 가지고 있는 thread pool을 40+개를 설정한다.(대부분의 thread pool 내의 thread 개수는 10개)</li></ul><p><strong>ThreadLocal</strong></p><p>기본적으로 <code>@HytrixCommand</code>는 다른 Thread로 동작을 하기 때문에, ThreadLocal이나 spring에서 지원해주는 <code>@RequestScope</code>, <code>@SessionScope</code> 빈에 접근할 수 없다. 필요한 경우 <code>execution.isolation.strategy: SEMAPHORE</code>로 변경하여 현재 Thread에서 연산을 실행하게 할 수 있다.<br>Spring Security를 사용하는 경우, <code>hystrix.shareSecurityContext=true</code>로 설정해서 <code>SecurityContext</code>를 공유할 수 있다.</p><blockquote><p>THREAD 동작 방식의 경우에는 Thread-pool내의 Thread 갯수 만큼, SEMAPHORE 동작 방식의 경우에는 semaphore count 만큼 요청을 수행할 수 있다<br><code>execution.isolation.semaphore.maxConcurrentRequests</code></p></blockquote><h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><p>Thread pool을 사용하는 대신, <code>Semaphore(counter)</code>를 사용하여 종속성에 대한 동시 호출 수를 제한할 수 있다. 따라서 Thread를 사용하지 않고 부하를 분한하지만, timeout과 격리가 느슨해지는 단점이 있다 위에서 <code>ThreadPool을 사용하지 않아도 되는 경우</code>에서 설명한 것과 같이 <code>back-end server를 신뢰할 수 있다면 사용해도 괜찮다</code></p><p><code>HystrixCommand</code>와 <code>HystrixObservableCommand</code>는 두 곳에서 <code>semaphore</code>를 지원한다</p><ul><li>Execution: <code>execution.isolation.strategy=SEMAPHORE</code>로 설정이 되어 있으면, 해당 command를 실행할 수 있는 부모 스레스 수를 제한</li><li>Fallback 검색</li></ul>]]></content>
      
      <categories>
          
          <category> spring </category>
          
          <category> cloud </category>
          
          <category> netflix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring-cloud </tag>
            
            <tag> spring </tag>
            
            <tag> netflix </tag>
            
            <tag> hystrix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>(Spring Cloud) Feign</title>
      <link href="/2018/03/11/Spring-Cloud-Feign/"/>
      <content type="html"><![CDATA[<h1 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h1><ul><li>REST 기반 서비스 호출을 추상화한 Spring Cloud Netflix 라이브러리</li><li>선언적 방식</li><li>인터페이스를 통해 클라이언트 측 프로그램 작성</li><li>Spring이 런타임에 구현체를 제공</li></ul><a id="more"></a><h1 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h1><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dependencyManagement &#123;</span><br><span class="line">  imports &#123;</span><br><span class="line">    mavenBom <span class="string">'spring-cloud-dependencies:Finchley.M7'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'spring.framework.cloud:spring-cloud-starter-openfeign'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><p><strong>@EnableFeignClients</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiGatewayApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ApiGatewayApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>interface 정의</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"post-api"</span>, url = <span class="string">"$&#123;feign.post-api.url&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PostClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/posts/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">Post <span class="title">get</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>사용</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/posts"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PostClient postClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PostController</span><span class="params">(PostClient postClient)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.postClient = postClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Post <span class="title">get</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> postClient.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Feign-설정"><a href="#Feign-설정" class="headerlink" title="Feign 설정"></a>Feign 설정</h1><h2 id="FeignClient"><a href="#FeignClient" class="headerlink" title="@FeignClient"></a><code>@FeignClient</code></h2><ul><li>name : 서비스ID 혹은 논리적인 이름, spring-cloud의 eureka, ribbon에 사용</li><li>url : 실제 호출할 서비스의 URL, eureka, ribbon을 사용하지 않고서도 동작</li><li>decode404 : 404응답이 올 때 <code>FeignExeption</code>을 발생시킬지, 아니면 응답을 decode할 지 여부</li><li>configuration : feign configuration class 지정</li><li>fallback : hystrix fallback class 지정</li><li>fallbackFactory : hystrix fallbak factory 지정</li></ul><blockquote><p>Hystrix란?<br><code>spring-cloud</code>의 서비스 중 하나. Circuit Breaker Pattern을 사용. 뒷단 API 서버가 장애 발생 등의 이유로 일정 시간(Time window) 내에 여러번 오류 응답을 주는 경우(timeout, bad gateway 등), 해당 API 서버로 요청을 보내지 않고 잠시 동안 대체(fallback) method를 실행. 일정 시간이 지나서 다시 뒷단 API 서버를 호출하는 등의, 일련의 작업을 제공해준다. <a href="https://martinfowler.com/bliki/CircuitBreaker.html" target="_blank" rel="noopener">Circuit Breaker Pattern(마틴 파울러)</a></p></blockquote><h3 id="application-yml-설정"><a href="#application-yml-설정" class="headerlink" title="application.yml 설정"></a>application.yml 설정</h3><p><code>.properties</code>로 하면 장황해질 것 같아, <code>yml</code>로 설명<br>아래 설정은 <code>@FeignClient(configuration = FooConfiguration.class)</code>으로 선언할 수 있음</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span> </span><br><span class="line">      <span class="attr">feignName:</span> <span class="comment"># @FeignClient에서 name 값, 전역으로 설정하려면 default</span></span><br><span class="line">        <span class="attr">connectTimeout:</span> <span class="number">5000</span></span><br><span class="line">        <span class="attr">readTimeout:</span> <span class="number">5000</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">full</span></span><br><span class="line">        <span class="attr">errorDecoder:</span> <span class="string">com.example.SimpleErrorDecoder</span></span><br><span class="line">        <span class="attr">retryer:</span> <span class="string">com.example.SimpleRetryer</span></span><br><span class="line">        <span class="attr">requestInterceptors:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">com.example.FooRequestInterceptor</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">com.example.BarRequestInterceptor</span></span><br><span class="line">        <span class="attr">decode404:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">encoder:</span> <span class="string">com.example.SimpleEncoder</span></span><br><span class="line">        <span class="attr">decoder:</span> <span class="string">com.example.SimpleDecoder</span></span><br><span class="line">        <span class="attr">contract:</span> <span class="string">com.example.SimpleContract</span></span><br></pre></td></tr></table></figure><ul><li>connectionTimeout, readTimeout : hystrix의 timeout 설정이 더 짧으면, hystirx 옵션을 따라감</li><li>loggerLevel : NONE, BASIC, HEADER, FULL을 지정할 수 있음<ul><li>NONE : default, 로그를 남기지 않음</li><li>BASIC : Request Method, URL과 응답 코드, 실행 시간을 남김</li><li>HEADERS : <code>BASIC</code>의 정보를 포함하여, 요청, 응답의 헤더를 남김</li><li>FULL : 요청, 응답의 header, body, metadata를 남김</li><li><code>logging.level.com.example.demo.PostClient: debug</code> 등의 debug logger 설정이 되어 있어야함</li></ul></li><li>encoder, decode : body의 내용을 Object로 변경하는 class 지정, 각각 </li><li>retryer : 요청이 실패했을 때 재시도에 대한 정책</li></ul><h3 id="java설정"><a href="#java설정" class="headerlink" title="java설정"></a>java설정</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FooConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Contract <span class="title">feignContract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> feign.Contract.Default();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BasicAuthRequestInterceptor <span class="title">basicAuthRequestInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BasicAuthRequestInterceptor(<span class="string">"user"</span>, <span class="string">"password"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>@FeignClient(configuration = FooConfiguration.class)</code>와 <code>application.yml</code>이 같이 있을 시에는, <code>yml</code> 설정이 우선. 우선 순위를 변경하고 싶으면 <code>feign.client.default-to-properties: false</code>를 <code>yml</code>에 설정</p></blockquote><h3 id="java설정-spring-연동-없는-순수-open-feign-설정"><a href="#java설정-spring-연동-없는-순수-open-feign-설정" class="headerlink" title="java설정(spring 연동 없는 순수 open feign 설정)"></a>java설정(spring 연동 없는 순수 open feign 설정)</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PostClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestLine</span>(<span class="string">"GET /posts/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">Post <span class="title">get</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">Feign.builder()</span><br><span class="line">             .contract(<span class="keyword">new</span> Contract.Default())</span><br><span class="line">             .retryer(<span class="keyword">new</span> Retryer.Default())</span><br><span class="line">             .options(<span class="keyword">new</span> Request.Options(<span class="number">1000</span>, <span class="number">1000</span>))</span><br><span class="line">             .encoder(<span class="keyword">new</span> Encoder.Default())</span><br><span class="line">             .decoder(<span class="keyword">new</span> Decoder.Default())</span><br><span class="line">             .decode404()</span><br><span class="line">             .logLevel(Logger.Level.BASIC)</span><br><span class="line">             .target(new Target.HardCodedTarget&lt;&gt;(PostClient.class, "post-api", "https://jsonplaceholder.typicode.com"));</span><br></pre></td></tr></table></figure><h1 id="Feign-Hystrix-Support"><a href="#Feign-Hystrix-Support" class="headerlink" title="Feign Hystrix Support"></a>Feign Hystrix Support</h1><p>classpath 내에 hystrix가 있으며, <code>feign.hystrix.enabled: true</code> 설정이 되었다면 Hystrix를 사용 가능</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span>(<span class="string">'org.springframework.cloud:spring-cloud-starter-netflix-hystrix'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>Hystrix를 사용하는 경우 기본적으로 thread time out이 1초<br>때문에 기본 설정으로는 feign의 connection, read timeout이 1초 이상인 경우라도<br>1초 안에 응답이 오지 않으면 fallback이 실행되므로 주의</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">BASIC</span></span><br><span class="line">        <span class="comment"># feign의 전역 timeout 설정 : 5초</span></span><br><span class="line">        <span class="attr">connectTimeout:</span> <span class="number">5000</span></span><br><span class="line">        <span class="attr">readTimeout:</span> <span class="number">5000</span></span><br><span class="line">  <span class="attr">post-api.url:</span> <span class="string">https://jsonplaceholder.typicode.com</span></span><br><span class="line">  <span class="attr">http-bin-api.url:</span> <span class="string">https://httpbin.org</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hystrix 명령의 기본 timeout을 10초로 변경</span></span><br><span class="line"><span class="attr">hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><h2 id="Fallback"><a href="#Fallback" class="headerlink" title="Fallback"></a>Fallback</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Feign 선언</span></span><br><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"http-bin-api"</span>, url = <span class="string">"$&#123;feign.http-bin-api.url&#125;"</span>, fallback = HttpBinClientFallback<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">HttpBinClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/delay/&#123;seconds&#125;"</span>)</span><br><span class="line">    <span class="function">DelayResponse <span class="title">delay</span><span class="params">(@PathVariable(<span class="string">"seconds"</span>)</span> <span class="keyword">int</span> seconds)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fallback 설정</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpBinClientFallback</span> <span class="keyword">implements</span> <span class="title">HttpBinClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DelayResponse <span class="title">delay</span><span class="params">(<span class="keyword">int</span> seconds)</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">"fallback called"</span>);</span><br><span class="line">        <span class="keyword">return</span> DelayResponse.EMPTY;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 응답 모델</span></span><br><span class="line"><span class="meta">@Value</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayResponse</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DelayResponse EMPTY = <span class="keyword">new</span> DelayResponse(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String origin;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonCreator</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DelayResponse</span><span class="params">(@JsonProperty(<span class="string">"origin"</span>)</span> String origin, @<span class="title">JsonProperty</span><span class="params">(<span class="string">"url"</span>)</span> String url) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.origin = origin;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>http://localhost:8080/delay/1</code> 성공</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"origin"</span>: <span class="string">"106.249.33.22"</span>,</span><br><span class="line"><span class="attr">"url"</span>: <span class="string">"https://httpbin.org/delay/1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DEBUG 60528 --- [-http-bin-api-1] c.p.s.httpbin.client.HttpBinClient       : [HttpBinClient#delay] ---&gt; GET https:&#x2F;&#x2F;httpbin.org&#x2F;delay&#x2F;1 HTTP&#x2F;1.1</span><br><span class="line">DEBUG 60528 --- [-http-bin-api-1] c.p.s.httpbin.client.HttpBinClient       : [HttpBinClient#delay] &lt;--- HTTP&#x2F;1.1 200 OK (2343ms)</span><br></pre></td></tr></table></figure><p><strong><code>http://localhost:8080/delay/5</code> timeout!!!</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"origin"</span>:<span class="literal">null</span>, <span class="attr">"url"</span>:<span class="literal">null</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DEBUG 60528 --- [-http-bin-api-5] c.p.s.httpbin.client.HttpBinClient       : [HttpBinClient#delay] ---&gt; GET https:&#x2F;&#x2F;httpbin.org&#x2F;delay&#x2F;5 HTTP&#x2F;1.1</span><br><span class="line">DEBUG 60528 --- [-http-bin-api-5] c.p.s.httpbin.client.HttpBinClient       : [HttpBinClient#delay] &lt;--- ERROR SocketTimeoutException: Read timed out (5883ms)</span><br></pre></td></tr></table></figure><h3 id="회로-열림-상태-Circuit-Open-Hystrix에-대해서"><a href="#회로-열림-상태-Circuit-Open-Hystrix에-대해서" class="headerlink" title="회로 열림 상태(Circuit Open) - Hystrix에 대해서"></a>회로 열림 상태(Circuit Open) - Hystrix에 대해서</h3><p>위 예제에 대해서 Hystrix의 동작을 아래와 같이 튜닝</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="string">"HttpBinClient#delay(int)"</span><span class="string">:</span></span><br><span class="line">      <span class="attr">execution.isolation.thread.timeoutInMilliseconds:</span> <span class="number">3000</span></span><br><span class="line">      <span class="attr">metrics.rollingStats.timeInMilliseconds:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">circuitBreaker.requestVolumeThreshold:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">circuitBreaker.errorThresholdPercentage:</span> <span class="number">50</span></span><br></pre></td></tr></table></figure><ul><li><code>execution.isolation.thread.timeoutInMilliseconds</code> : hystirx명령에 대해 3초 timeout 설정</li><li><code>metrics.rollingStats.timeInMilliseconds</code> : 60초의 window slice를 가짐(30초씩 감시)</li><li><code>circuitBreaker.requestVolumeThreshold</code> : 최소 5번 이상의 요청이 있어야함</li><li><code>circuitBreaker.errorThresholdPercentage</code> : 50% 이상 오류가 발생시 회로를 오픈(circuit open)</li><li>즉 최근 1분 내에, 5번 이상의 요청이 있었고, 그 중 50% 이상이 오류가 발생했다면, command를 실행하지 않고 fallback을 실행하겠다는 의미임</li><li>회로가 열린 후, 일정시간(<code>circuitBreaker.sleepWindowInMilliseconds</code>)동안 fallback 응답을 보내고 성공하면 회로를 닫음</li></ul><p><strong>timeout이 5번 이상 발생시 로그</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">2018-02-28 15:46:37.653 DEBUG 99893 --- [-http-bin-api-1] c.p.s.httpbin.client.HttpBinClient       : [HttpBinClient#delay] ---&gt; GET https:&#x2F;&#x2F;httpbin.org&#x2F;delay&#x2F;5 HTTP&#x2F;1.1</span><br><span class="line">2018-02-28 15:46:40.655 DEBUG 99893 --- [ HystrixTimer-1] c.p.s.h.client.HttpBinClientFallback     : fallback called</span><br><span class="line">2018-02-28 15:46:42.899 DEBUG 99893 --- [-http-bin-api-2] c.p.s.httpbin.client.HttpBinClient       : [HttpBinClient#delay] ---&gt; GET https:&#x2F;&#x2F;httpbin.org&#x2F;delay&#x2F;5 HTTP&#x2F;1.1</span><br><span class="line">2018-02-28 15:46:43.844 DEBUG 99893 --- [-http-bin-api-1] c.p.s.httpbin.client.HttpBinClient       : [HttpBinClient#delay] &lt;--- ERROR SocketTimeoutException: Read timed out (6190ms)</span><br><span class="line">2018-02-28 15:46:45.902 DEBUG 99893 --- [ HystrixTimer-1] c.p.s.h.client.HttpBinClientFallback     : fallback called</span><br><span class="line">2018-02-28 15:46:46.704 DEBUG 99893 --- [-http-bin-api-3] c.p.s.httpbin.client.HttpBinClient       : [HttpBinClient#delay] ---&gt; GET https:&#x2F;&#x2F;httpbin.org&#x2F;delay&#x2F;5 HTTP&#x2F;1.1</span><br><span class="line">2018-02-28 15:46:48.849 DEBUG 99893 --- [-http-bin-api-2] c.p.s.httpbin.client.HttpBinClient       : [HttpBinClient#delay] &lt;--- ERROR SocketTimeoutException: Read timed out (5950ms)</span><br><span class="line">2018-02-28 15:46:49.708 DEBUG 99893 --- [ HystrixTimer-2] c.p.s.h.client.HttpBinClientFallback     : fallback called</span><br><span class="line">2018-02-28 15:46:50.438 DEBUG 99893 --- [-http-bin-api-4] c.p.s.httpbin.client.HttpBinClient       : [HttpBinClient#delay] ---&gt; GET https:&#x2F;&#x2F;httpbin.org&#x2F;delay&#x2F;5 HTTP&#x2F;1.1</span><br><span class="line">2018-02-28 15:46:52.477 DEBUG 99893 --- [-http-bin-api-3] c.p.s.httpbin.client.HttpBinClient       : [HttpBinClient#delay] &lt;--- ERROR SocketTimeoutException: Read timed out (5772ms)</span><br><span class="line">2018-02-28 15:46:53.443 DEBUG 99893 --- [ HystrixTimer-1] c.p.s.h.client.HttpBinClientFallback     : fallback called</span><br><span class="line">2018-02-28 15:46:54.765 DEBUG 99893 --- [-http-bin-api-5] c.p.s.httpbin.client.HttpBinClient       : [HttpBinClient#delay] ---&gt; GET https:&#x2F;&#x2F;httpbin.org&#x2F;delay&#x2F;5 HTTP&#x2F;1.1</span><br><span class="line">2018-02-28 15:46:56.292 DEBUG 99893 --- [-http-bin-api-4] c.p.s.httpbin.client.HttpBinClient       : [HttpBinClient#delay] &lt;--- ERROR SocketTimeoutException: Read timed out (5853ms)</span><br><span class="line">2018-02-28 15:46:57.769 DEBUG 99893 --- [ HystrixTimer-3] c.p.s.h.client.HttpBinClientFallback     : fallback called</span><br><span class="line">2018-02-28 15:47:00.115 DEBUG 99893 --- [nio-8080-exec-6] c.p.s.h.client.HttpBinClientFallback     : fallback called</span><br><span class="line">2018-02-28 15:47:00.874 DEBUG 99893 --- [-http-bin-api-5] c.p.s.httpbin.client.HttpBinClient       : [HttpBinClient#delay] &lt;--- ERROR SocketTimeoutException: Read timed out (6108ms)</span><br><span class="line">2018-02-28 15:47:01.000 DEBUG 99893 --- [nio-8080-exec-7] c.p.s.h.client.HttpBinClientFallback     : fallback called</span><br><span class="line">2018-02-28 15:47:01.827 DEBUG 99893 --- [nio-8080-exec-8] c.p.s.h.client.HttpBinClientFallback     : fallback called</span><br></pre></td></tr></table></figure><blockquote><p><code>https://httpbin.org/delay/5</code>에서 5번 실패가 발생한 이후에는 바로 fallback을 호출</p></blockquote><h2 id="Fallback-Factory"><a href="#Fallback-Factory" class="headerlink" title="Fallback Factory"></a>Fallback Factory</h2><p>앞서 살펴보았던 Fallback은 어떤 Exception이 발생했는지 알 수가 없음</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"http-bin-api"</span>, url = <span class="string">"$&#123;feign.http-bin-api.url&#125;"</span>, fallbackFactory = HttpBinClientFallbackFactory<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">HttpBinClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/delay/&#123;seconds&#125;"</span>)</span><br><span class="line">    <span class="function">DelayResponse <span class="title">delay</span><span class="params">(@PathVariable(<span class="string">"seconds"</span>)</span> <span class="keyword">int</span> seconds)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpBinClientFallbackFactory</span> <span class="keyword">implements</span> <span class="title">FallbackFactory</span>&lt;<span class="title">HttpBinClient</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpBinClient <span class="title">create</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        log.error(cause.getMessage(), cause);</span><br><span class="line">        <span class="keyword">return</span> seconds -&gt; DelayResponse.EMPTY;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>오류 발생시 로그</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">2018-02-28 16:03:26.213 ERROR 14890 --- [ HystrixTimer-1] c.p.s.h.c.HttpBinClientFallbackFactory   : null</span><br><span class="line"></span><br><span class="line">com.netflix.hystrix.exception.HystrixTimeoutException: null</span><br><span class="line">at com.netflix.hystrix.AbstractCommand$HystrixObservableTimeoutOperator$1$1.run(AbstractCommand.java:1154) [hystrix-core-1.5.12.jar:1.5.12]</span><br><span class="line">at com.netflix.hystrix.strategy.concurrency.HystrixContextRunnable$1.call(HystrixContextRunnable.java:45) [hystrix-core-1.5.12.jar:1.5.12]</span><br><span class="line">at com.netflix.hystrix.strategy.concurrency.HystrixContextRunnable$1.call(HystrixContextRunnable.java:41) [hystrix-core-1.5.12.jar:1.5.12]</span><br><span class="line">at com.netflix.hystrix.strategy.concurrency.HystrixContextRunnable.run(HystrixContextRunnable.java:61) [hystrix-core-1.5.12.jar:1.5.12]</span><br><span class="line">at com.netflix.hystrix.AbstractCommand$HystrixObservableTimeoutOperator$1.tick(AbstractCommand.java:1159) [hystrix-core-1.5.12.jar:1.5.12]</span><br><span class="line">at com.netflix.hystrix.util.HystrixTimer$1.run(HystrixTimer.java:99) [hystrix-core-1.5.12.jar:1.5.12]</span><br><span class="line">at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_152]</span><br><span class="line">at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308) [na:1.8.0_152]</span><br><span class="line">at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180) [na:1.8.0_152]</span><br><span class="line">at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294) [na:1.8.0_152]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_152]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_152]</span><br><span class="line">at java.lang.Thread.run(Thread.java:748) [na:1.8.0_152]</span><br></pre></td></tr></table></figure><blockquote><p>fallbackFactory를 사용할 때에, Spring Application이 올라오면서 검증차원에서 일부러 fallbackFactory를 한 번 실행시킴.<br><code>Object exampleFallback = fallbackFactory.create(new RuntimeException());</code><br>때문에 불필요한 log가 올라오는데, 이를 배제할 방법을 모름…</p></blockquote><h1 id="Feign-상속-지원"><a href="#Feign-상속-지원" class="headerlink" title="Feign 상속 지원"></a>Feign 상속 지원</h1><p>Feign이 Spring MVC의 <code>@Controller</code>의 애너테이션들을 사용하는 것을 응용해서 다음과 같은 소스를 작성할 수 있음</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET, value =<span class="string">"/users/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">getUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserClient</span> <span class="keyword">extends</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이처럼 다른 곳에 API client를 납품할 일이 있을때, Feign을 사용한다면<br><code>UserService</code>를 <code>serivce</code> 모듈에 넣고, 그를 구현한 <code>UserController</code>를 <code>api</code> 모듈에 넣고,<br>그에 대한 feign client인 <code>UserClient</code>를 <code>client</code> 모듈에 넣어<br><code>client</code>모듈을 외부에 공유하는 식의 개발도 가능</p><p><strong>하지만 권장하지 않음. server-client 간의 커플링을 높이며, 현재 실질적으로 Spring MVC의 기능을 Feign이 모두 소화하고 있지 않음</strong></p><h1 id="요청-응답-압축"><a href="#요청-응답-압축" class="headerlink" title="요청, 응답 압축"></a>요청, 응답 압축</h1><p>GZIP을 통해 요청, 응답을 압축</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">request:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">mime-types:</span> <span class="string">text/xml,application/xml,application/json</span></span><br><span class="line">      <span class="attr">request.min-request-size:</span> <span class="number">2048</span></span><br><span class="line">    <span class="attr">response.enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="Pageable"><a href="#Pageable" class="headerlink" title="Pageable"></a>Pageable</h1><p><code>spring-data</code>를 쓰는 환경이라면 <code>Pageable</code>을 빼놓을 수 없음<br>아쉽게도 요청이나, 응답을 받을 때 <code>Pageable</code>이나 <code>Page&lt;T&gt;</code>를 지원하지는 않음<br>직접 Encoder와 Jackson 설정을 해야함</p><h2 id="Pageable-요청-보내기"><a href="#Pageable-요청-보내기" class="headerlink" title="Pageable 요청 보내기"></a>Pageable 요청 보내기</h2><p>아래와 같이 Encoder를 구현하여, Pageable로 요청을 만들 수 있음<br>참고 : <a href="https://github.com/spring-cloud/spring-cloud-netflix/issues/556" target="_blank" rel="noopener">https://github.com/spring-cloud/spring-cloud-netflix/issues/556</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignClientConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectFactory&lt;HttpMessageConverters&gt; messageConverters;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Encoder <span class="title">feignEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PageableQueryEncoder(<span class="keyword">new</span> SpringEncoder(messageConverters));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageableQueryEncoder</span> <span class="keyword">implements</span> <span class="title">Encoder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Encoder delegate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageableQueryEncoder</span><span class="params">(Encoder delegate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.delegate = delegate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(Object object, Type bodyType, RequestTemplate template)</span> <span class="keyword">throws</span> EncodeException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (object <span class="keyword">instanceof</span> Pageable) &#123;</span><br><span class="line">            Pageable pageable = (Pageable) object;</span><br><span class="line">            template.query(<span class="string">"page"</span>, pageable.getPageNumber() + <span class="string">""</span>);</span><br><span class="line">            template.query(<span class="string">"size"</span>, pageable.getPageSize() + <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (pageable.getSort() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Collection&lt;String&gt; existingSorts = template.queries().get(<span class="string">"sort"</span>);</span><br><span class="line">                List&lt;String&gt; sortQueries = existingSorts != <span class="keyword">null</span> ? <span class="keyword">new</span> ArrayList&lt;&gt;(existingSorts) : <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="keyword">for</span> (Sort.Order order : pageable.getSort()) &#123;</span><br><span class="line">                    sortQueries.add(order.getProperty() + <span class="string">","</span> + order.getDirection());</span><br><span class="line">                &#125;</span><br><span class="line">                template.query(<span class="string">"sort"</span>, sortQueries);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            delegate.encode(object, bodyType, template);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Encoder</code>로 할 수 있는 일이 한정적이기 때문에, 실제 운영에서 사용하고자 않다면 아래와 같은 구현체를 만들어야함</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignClientConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectFactory&lt;HttpMessageConverters&gt; messageConverters;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Encoder <span class="title">feignEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomEncoder(<span class="keyword">new</span> SpringEncoder(messageConverters), <span class="keyword">new</span> PageableQueryEncoder());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomEncoder</span> <span class="keyword">implements</span> <span class="title">Encoder</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Encoder defaultEncoder;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class, TypeSupportEncoder&gt; encoders;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CustomEncoder</span><span class="params">(Encoder defaultEncoder, TypeSupportEncoder... encoders)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TypeSupportEncoder</span> <span class="keyword">extends</span> <span class="title">Encoder</span> </span>&#123;</span><br><span class="line">  <span class="function">Class <span class="title">getSupportType</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Page-응답-Json-파싱하기"><a href="#Page-응답-Json-파싱하기" class="headerlink" title="Page 응답 Json 파싱하기"></a>Page 응답 Json 파싱하기</h2><p>Jackson 설정<br>참고 : <a href="https://github.com/spring-cloud/spring-cloud-netflix/issues/556" target="_blank" rel="noopener">https://github.com/spring-cloud/spring-cloud-netflix/issues/556</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Module <span class="title">customModule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SimpleModule <span class="keyword">module</span> = <span class="keyword">new</span> SimpleModule(<span class="string">"simple-feign"</span>, <span class="keyword">new</span> Version(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="string">"SNAPSHOT"</span>, <span class="string">"com.parfait"</span>, <span class="string">"simple-feign"</span>));</span><br><span class="line">        <span class="keyword">module</span>.setMixInAnnotation(Page<span class="class">.<span class="keyword">class</span>, <span class="title">SimplePageImpl</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">module</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonDeserialize</span>(as = SimplePageImpl<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">interface</span> <span class="title">PageMixIn</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePageImpl</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Page</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Page&lt;T&gt; delegate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimplePageImpl</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @JsonProperty(<span class="string">"content"</span>)</span> List&lt;T&gt; content,</span></span><br><span class="line"><span class="function">            @<span class="title">JsonProperty</span><span class="params">(<span class="string">"page"</span>)</span> <span class="keyword">int</span> number,</span></span><br><span class="line"><span class="function">            @<span class="title">JsonProperty</span><span class="params">(<span class="string">"size"</span>)</span> <span class="keyword">int</span> size,</span></span><br><span class="line"><span class="function">            @<span class="title">JsonProperty</span><span class="params">(<span class="string">"totalElements"</span>)</span> <span class="keyword">long</span> totalElements) </span>&#123;</span><br><span class="line">        delegate = <span class="keyword">new</span> PageImpl&lt;&gt;(content, <span class="keyword">new</span> PageRequest(number, size), totalElements);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonProperty</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalPages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.getTotalPages();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonProperty</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTotalElements</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.getTotalElements();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"page"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.getNumber();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonProperty</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.getSize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonProperty</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumberOfElements</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.getNumberOfElements();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonProperty</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.getContent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonProperty</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.hasContent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sort <span class="title">getSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.getSort();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonProperty</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.isFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonProperty</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.isLast();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.hasNext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.hasPrevious();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pageable <span class="title">nextPageable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.nextPageable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pageable <span class="title">previousPageable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.previousPageable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;S&gt; <span class="function">Page&lt;S&gt; <span class="title">map</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends S&gt; converter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.map(converter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.iterator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> spring </category>
          
          <category> cloud </category>
          
          <category> netflix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring-cloud </tag>
            
            <tag> spring </tag>
            
            <tag> feign </tag>
            
            <tag> netflix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hazelcast 공유</title>
      <link href="/2018/03/11/hazelcast/"/>
      <content type="html"><![CDATA[<h1 id="In-Memory-Data-Grid"><a href="#In-Memory-Data-Grid" class="headerlink" title="In-Memory Data Grid"></a>In-Memory Data Grid</h1><h2 id="In-Memory-Data-Grid-IMDG-에-관해서"><a href="#In-Memory-Data-Grid-IMDG-에-관해서" class="headerlink" title="In-Memory Data Grid(IMDG)에 관해서"></a>In-Memory Data Grid(IMDG)에 관해서</h2><p><a href="http://d2.naver.com/helloworld/106824" target="_blank" rel="noopener">http://d2.naver.com/helloworld/106824</a></p><h3 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h3><ul><li>분산 저장(scale out)</li><li>메모리를 사용한다</li><li>보통 객체를 저장한다(serialize)</li><li>Lock, Transaction, Sharding을 지원한다</li></ul><a id="more"></a><h1 id="Hazelcast"><a href="#Hazelcast" class="headerlink" title="Hazelcast"></a>Hazelcast</h1><h2 id="Hazelcast-1"><a href="#Hazelcast-1" class="headerlink" title="Hazelcast?"></a>Hazelcast?</h2><p><strong>Distributed Computing, Simplified.</strong></p><p>Map, Queue, Executor Service, IAtomicLong, Lock, Cache, 기타 등등의 기능을 지원한다 <a href="https://hazelcast.org/" target="_blank" rel="noopener">https://hazelcast.org/</a></p><ul><li>java api만 사용하여 의존성이 없다</li><li>P2P 통신<ul><li>많은 NoSQL과 달리 peer-to-peer 통신을 사용한다.</li><li>Master/Slave가 아니라 SPoF가 없다.</li><li>모든 member가 동일한 양의 데이터를 쥐고 동일한 양의 연산을 수행한다.</li><li>Hazelcast를 기존 어플리케이션에 내재시키거(embed)나 혹은 Server/Client 모드로 Hazelcast member의 client로써 어플리케이션을 실행시킬 수 있다.</li></ul></li><li>Scalable<ul><li>member를 간단히 추가할수 있으며, 자동으로 cluster를 찾고 선형으로 메모리 및 처리량을 증가시킨다.</li><li>각 member들은 TCP로 서로 연결되어 있으며 모든 통신인 TCP로 이루어진다.</li></ul></li><li>Fast : 모든 것을 memory에 저장하며, 빠른 읽기/저장이 가능하다</li><li>중복지원<ul><li>여러 member에 각 data entry의 백업을 보존한다</li><li>한 member에서 실패가 발생시, 백업에서 복구가 되며, 클러스터는 다운되지 않고 동작하게 된다.</li></ul></li></ul><h2 id="두가지-사용-방법-Embedded"><a href="#두가지-사용-방법-Embedded" class="headerlink" title="두가지 사용 방법 - Embedded"></a>두가지 사용 방법 - Embedded</h2><p><img src="http://docs.hazelcast.org/docs/3.9/manual/html-single/images/Embedded.png" alt="image"></p><ul><li>standalone cache처럼 어플리케이션에 추가하여 사용하는 방식</li><li>고성능 비동기처리 어플리케이션을 구동할때 유용</li><li>어플리케이션에 hazelcast의 데이터, 서비스가 모두 올라간다.</li><li>데이터 접근 지연이 낮아, 처리가 매우 빠르다</li></ul><h2 id="두가지-사용-방법-Server-Client"><a href="#두가지-사용-방법-Server-Client" class="headerlink" title="두가지 사용 방법 - Server/Client"></a>두가지 사용 방법 - Server/Client</h2><p><img src="http://docs.hazelcast.org/docs/3.9/manual/html-single/images/ClientServer.png" alt="image"></p><ul><li>Hazelcast node를 구축하고, application은 client로써 접근</li><li>성능 예측이 용이</li><li>개별 확장 가능</li></ul><h2 id="Near-Cache"><a href="#Near-Cache" class="headerlink" title="Near Cache"></a>Near Cache</h2><p><strong>Global Cache와 Local Cache의 분리</strong></p><h3 id="put"><a href="#put" class="headerlink" title="put"></a>put</h3><p><img src="https://docs.oracle.com/cd/E18686_01/coh.37/e18680/img/near-cache-fetch.jpg" alt="image"></p><h3 id="read"><a href="#read" class="headerlink" title="read"></a>read</h3><p><img src="https://docs.oracle.com/cd/E18686_01/coh.37/e18680/img/near-cache.jpg" alt="image"></p><h2 id="Near-Cache-1"><a href="#Near-Cache-1" class="headerlink" title="Near Cache"></a>Near Cache</h2><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><ul><li>네트워크 트래픽 감소</li><li>latency 저하</li></ul><h3 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h3><ul><li>메모리 사용량 증가</li><li>데이터 변경으로 인한 무효화(invalid)가 발생이 잦을 수록 성능 저하 -&gt; 대부분 읽기 작업인 서비스에 적합</li><li>일관성이 깨질 수 있다</li></ul><h3 id="특기사항"><a href="#특기사항" class="headerlink" title="특기사항"></a>특기사항</h3><ul><li>Server/Client로 운용시 반드시 Near Cache를 사용할 것</li><li>원래 키의 TTL과 Near Cache의 TTL 다르므로 주의</li></ul><h2 id="Where-To-Use"><a href="#Where-To-Use" class="headerlink" title="Where To Use?"></a>Where To Use?</h2><ul><li>cache</li><li>event(message) based programming : publish / subscribe</li><li>Global Scheduler</li><li>Session Store</li><li>Repository</li><li>Streaming Analysis</li><li>Map/Reduce</li></ul><h2 id="샤딩-지원"><a href="#샤딩-지원" class="headerlink" title="샤딩 지원"></a>샤딩 지원</h2><ul><li>Hazelcast에서 샤딩을 파티셔닝이라고 부른다</li><li>기본적으로 271개의 파티션이 생성되며, entry key의 hash mod 연산에 의해 나뉘지게 된다.</li></ul><p><img src="http://docs.hazelcast.org/docs/3.9/manual/html-single/images/NodePartition.jpg" alt="image"></p><h2 id="샤딩-지원-노드-추가"><a href="#샤딩-지원-노드-추가" class="headerlink" title="샤딩 지원 - 노드 추가"></a>샤딩 지원 - 노드 추가</h2><p><img src="http://docs.hazelcast.org/docs/3.9/manual/html-single/images/BackupPartitions.jpg" alt="image"></p><ul><li>검은 글씨 : 주 파티션</li><li>파란 글시 : 레플리카(백업)</li><li>member의 가입, 탈퇴 때마다 파티셔닝이 재연산</li></ul><h2 id="샤딩-지원-1"><a href="#샤딩-지원-1" class="headerlink" title="샤딩 지원"></a>샤딩 지원</h2><p><img src="http://docs.hazelcast.org/docs/3.9/manual/html-single/images/4NodeCluster.jpg" alt="image"></p><h1 id="분산-자료형"><a href="#분산-자료형" class="headerlink" title="분산 자료형"></a>분산 자료형</h1><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class DistributedMap &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Config config &#x3D; new Config();</span><br><span class="line">        HazelcastInstance h &#x3D; Hazelcast.newHazelcastInstance(config);</span><br><span class="line">        ConcurrentMap&lt;String, String&gt; map &#x3D; h.getMap(&quot;my-distributed-map&quot;);</span><br><span class="line">        map.put(&quot;key&quot;, &quot;value&quot;);</span><br><span class="line">        map.get(&quot;key&quot;);</span><br><span class="line">         </span><br><span class="line">        &#x2F;&#x2F;Concurrent Map methods</span><br><span class="line">        map.putIfAbsent(&quot;somekey&quot;, &quot;somevalue&quot;);</span><br><span class="line">        map.replace(&quot;key&quot;, &quot;value&quot;, &quot;newvalue&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이런 느낌의 자료형 : <strong>Map, MultiMap, Queue,</strong> List, Set, Ring Buffer, AtomicLong, AtomicReference, CountdownLatch</p><h2 id="Topic-Reliable-Topic-Support-Backup"><a href="#Topic-Reliable-Topic-Support-Backup" class="headerlink" title="Topic / Reliable Topic(Support Backup)"></a>Topic / Reliable Topic(Support Backup)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class Sample implements MessageListener&lt;MyEvent&gt; &#123;</span><br><span class="line"></span><br><span class="line">  public static void main( String[] args ) &#123;</span><br><span class="line">    Sample sample &#x3D; new Sample();</span><br><span class="line">    HazelcastInstance hazelcastInstance &#x3D; Hazelcast.newHazelcastInstance();</span><br><span class="line">    ITopic topic &#x3D; hazelcastInstance.getTopic( &quot;default&quot; );</span><br><span class="line">    topic.addMessageListener( sample );</span><br><span class="line">    topic.publish( new MyEvent() );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @Override</span><br><span class="line">  public void onMessage( Message&lt;MyEvent&gt; message ) &#123;</span><br><span class="line">    MyEvent myEvent &#x3D; message.getMessageObject();</span><br><span class="line">    System.out.println( &quot;Message received &#x3D; &quot; + myEvent.toString() );</span><br><span class="line">    if ( myEvent.isHeavyweight() ) &#123;</span><br><span class="line">      messageExecutor.execute( new Runnable() &#123;</span><br><span class="line">          public void run() &#123;</span><br><span class="line">            doHeavyweightStuff( myEvent );</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="Distributed-Computing"><a href="#Distributed-Computing" class="headerlink" title="Distributed Computing"></a>Distributed Computing</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void main( String[] args ) throws Exception &#123;</span><br><span class="line">  HazelcastInstance hazelcastInstance &#x3D; Hazelcast.newHazelcastInstance();</span><br><span class="line">  IExecutorService executor &#x3D; hazelcastInstance.getExecutorService( &quot;exec&quot; );</span><br><span class="line">  for ( int k &#x3D; 1; k &lt;&#x3D; 1000; k++ ) &#123;</span><br><span class="line">    Thread.sleep( 1000 );</span><br><span class="line">    System.out.println( &quot;Producing echo task: &quot; + k );</span><br><span class="line">    executor.executeOnAllMembers( new EchoTask( String.valueOf( k ) ) );</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println( &quot;EchoTaskMain finished!&quot; );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Transaction"><a href="#Transaction" class="headerlink" title="Transaction"></a>Transaction</h2><h3 id="자료형"><a href="#자료형" class="headerlink" title="자료형"></a>자료형</h3><p><strong><code>TransactionContext</code>를 통해서, Transaction을 지원하는 Map, Set, List, MultiMap을 사용할 수 있다</strong></p><ul><li>Queue, Set, List의 경우, 복제를 이용</li><li>Map의 경우, 쓰기 락을 이용</li></ul><h3 id="ONE-PHASE와-TWO-PHASE"><a href="#ONE-PHASE와-TWO-PHASE" class="headerlink" title="ONE_PHASE와 TWO_PHASE"></a><code>ONE_PHASE</code>와 <code>TWO_PHASE</code></h3><p><strong>ONE_PHASE</strong></p><ul><li>빠름</li><li>Single Phase로 변경을 적용</li><li>준비단계가 없기 때문에 충돌 감지 불가능</li><li>실제 충돌이 발생시 변경사항이 기록되지 않아, 일관성 무너질 수 있음</li></ul><p><strong>TWO_PHASE</strong></p><ul><li>Prepare Phase(준비 단계)를 실행, 충돌이 발생 시 이 단계에서 실패</li><li>준비단계가 완료되어야 쓰기 실행</li><li>다른 멤버로 커밋 로그를 남겨, 실패해도 다른 멤버가 커밋할 수 있음</li><li>느림</li></ul><h2 id="Transaction-1"><a href="#Transaction-1" class="headerlink" title="Transaction"></a>Transaction</h2><h3 id="XA-Transaction-지원"><a href="#XA-Transaction-지원" class="headerlink" title="XA Transaction 지원"></a>XA Transaction 지원</h3><p><strong>XA Transaction은 글로벌 트랜잭션 내에서, 여러 백엔드 저장소에 접근하기 위한 표준</strong></p><ul><li>트랜잭션 매니저가 DB에 어떤 트랜잭션에서 어떠한 일을 수행하는지 알림</li><li>2-phase commit 수행 방법 정의</li><li>대기중인 트랜잭션의 복구 방법 정의</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p>Hazelcast Architects View : <a href="https://hazelcast.com/resources/architects-view-hazelcast/" target="_blank" rel="noopener">https://hazelcast.com/resources/architects-view-hazelcast/</a><br>Java Code Reference Card : <a href="https://hazelcast.com/resources/code-reference-card/" target="_blank" rel="noopener">https://hazelcast.com/resources/code-reference-card/</a><br>Deployment And Operation Guide : <a href="https://hazelcast.com/resources/hazelcast-deployment-operations-guide/" target="_blank" rel="noopener">https://hazelcast.com/resources/hazelcast-deployment-operations-guide/</a></p>]]></content>
      
      <categories>
          
          <category> nosql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hazlecast </tag>
            
            <tag> nosql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring BindingResult를 json으로 받기</title>
      <link href="/2018/03/10/Spring-BindingResult-json/"/>
      <content type="html"><![CDATA[<h1 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h1><p>Spring은 Controller에서 Validation을 한 후, 유효하지 못한 값이 존재할 때, Error(BindingResult)에 그 내용을 담아서, JSP, FreeMarker 등의 View Template Engine으로 오류 내용을 MessageSource로 국제화하여 보여줄 수 있도록 지원을 하고 있다.</p><p>하지만 의외로 그러한 국제화 메시지 지원을 Json 응답으로 보여주려고 할 때에는 편리한 수단이 잘 보이지 않고, Reference를 뒤져봐도 딱 맘에 드는 방법을 알려주고 있지 않는다. 때문에 Json으로 국제화된 오류 내용을 받을 수 있도록, View의 내용을 커스터마이징 하는 방법에 대해 알아보려 한다.</p><a id="more"></a><h1 id="기본-동작-소스-코드"><a href="#기본-동작-소스-코드" class="headerlink" title="기본 동작 소스 코드"></a>기본 동작 소스 코드</h1><p><strong>의존성</strong></p><p>spring-boot : 2.0.0.RELEASE<br>lombok : 1.16.18</p><p><strong>AdderController.java</strong></p><p>아래는 <code>POST /add?a=1&amp;b=2</code>를 요청했을 때, 유효성 검사를 한 후 <code>{&quot;result&quot;:3}</code>를 반환하는 소스이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdderController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Validator adderRequestValidator;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AdderController</span><span class="params">(@Qualifier(<span class="string">"adderRequestValidator"</span>)</span> Validator adderRequestValidator) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.adderRequestValidator = adderRequestValidator;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AdderResult <span class="title">add</span><span class="params">(AdderRequest request, BindingResult bindingResult)</span> <span class="keyword">throws</span> BindException </span>&#123;</span><br><span class="line">        adderRequestValidator.validate(request, bindingResult);</span><br><span class="line">        <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BindException(bindingResult);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AdderResult(request.getA() + request.getB());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>AdderRequestValidator.java</strong></p><p>검증에 대한 구현이다. <code>a</code>나 <code>b</code>가 비어있으면 <code>field.required</code> 코드 값으로 <code>errors</code>의 <code>filedErrors</code>에 오류 내용이 추가된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdderRequestValidator</span> <span class="keyword">implements</span> <span class="title">Validator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> AdderRequest<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">clazz</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">(Object o, Errors errors)</span> </span>&#123;</span><br><span class="line">        AdderRequest request = AdderRequest<span class="class">.<span class="keyword">class</span>.<span class="title">cast</span>(<span class="title">o</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (request.getA() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            errors.rejectValue(<span class="string">"a"</span>, <span class="string">"field.required"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (request.getB() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            errors.rejectValue(<span class="string">"b"</span>, <span class="string">"field.required"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>error.xml</strong></p><p><code>field.required</code>의 내용을 해석하여, 국제화할 xml property를 정의했다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">properties</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://java.sun.com/dtd/properties.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"field.required.adderRequest.a"</span>&gt;</span>a를 입력해주세요<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"field.required.adderRequest.b"</span>&gt;</span>b를 입력해주세요<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="유효하지-못한-요청이-있을-때"><a href="#유효하지-못한-요청이-있을-때" class="headerlink" title="유효하지 못한 요청이 있을 때"></a>유효하지 못한 요청이 있을 때</h2><p>아무런 커스터마이징 없이 <code>POST /add?a=1</code>로 요청을 보내면, <code>BindException</code>의 내용을 View로 응답한다.<br>그 내용은 아래와 같다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"timestamp"</span>: <span class="number">1519659376474</span>,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">400</span>,</span><br><span class="line">  <span class="attr">"error"</span>: <span class="string">"Bad Request"</span>,</span><br><span class="line">  <span class="attr">"exception"</span>: <span class="string">"org.springframework.validation.BindException"</span>,</span><br><span class="line">  <span class="attr">"errors"</span>:[&#123;</span><br><span class="line">    <span class="attr">"codes"</span>:[</span><br><span class="line">      <span class="string">"field.required.adderRequest.b"</span>,</span><br><span class="line">      <span class="string">"field.required.b"</span>,</span><br><span class="line">      <span class="string">"field.required.java.lang.Integer"</span>,</span><br><span class="line">      <span class="string">"field.required"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"arguments"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"defaultMessage"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"objectName"</span>: <span class="string">"adderRequest"</span>,</span><br><span class="line">    <span class="attr">"field"</span>: <span class="string">"b"</span>,</span><br><span class="line">    <span class="attr">"rejectedValue"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"bindingFailure"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"field.required"</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">"message"</span>: <span class="string">"Validation failed for object='adderRequest'. Error count: 1"</span>,</span><br><span class="line">  <span class="attr">"path"</span>: <span class="string">"/add"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>응답 내용에 <code>error.xml</code>에서 정의한 메시지 내용이 내려가지 않고 있다.<br>(defaultMessage를 정의하면 해당 값은 채워져 가겠지만, 국제화가 적용되지 않는다)</p><p>클라이언트에서 언어 관련 resource를 들고 있고 codes를 적절히 대조해서 가져올 수 있다면 다행이다.<br>하지만 클라이언트가 하나가 아니라면 국제화 처리하는 로직에 중복이 발생하므로 서버에서 내려주는 것이 효율적일 것 같다.</p><h1 id="서버에서-국제화-메시지로-변경하여-내려주기"><a href="#서버에서-국제화-메시지로-변경하여-내려주기" class="headerlink" title="서버에서 국제화 메시지로 변경하여 내려주기"></a>서버에서 국제화 메시지로 변경하여 내려주기</h1><p><strong>응답모델 정의</strong></p><p>모델은 어떤 자료구조로 하든 상관없다. 각자 팀의 혹은 Client의 취향에 맞추어 개발하자.<br>여기서는 아래와 같은 json이 나오도록 정의한다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"errors"</span>:[&#123;</span><br><span class="line">   <span class="attr">"objectName"</span>: <span class="string">"adderRequest"</span>,</span><br><span class="line">    <span class="attr">"field"</span>: <span class="string">"b"</span>,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"field.required"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"b를 입력해주세요"</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ValidationResult</strong></p><p>오류의 목록(<code>errors</code>)를 가지고 있다. 필요하다면 공통된 속성을 추가로 정의할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>(access = AccessLevel.PRIVATE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationResult</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> List&lt;FieldErrorDetail&gt; errors;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ValidationResult <span class="title">create</span><span class="params">(Errors errors, MessageSource messageSource, Locale locale)</span> </span>&#123;</span><br><span class="line">      List&lt;FieldErrorDetail&gt; details =</span><br><span class="line">            errors.getFieldErrors()</span><br><span class="line">               .stream()</span><br><span class="line">               .map(error -&gt; FieldErrorDetail.create(error, messageSource, locale))</span><br><span class="line">               .collect(Collectors.toList());</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ValidationResult(details);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>FieldErrorDetail</strong></p><p><code>FieldError</code>의 상세를 기술하는 클래스다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>(access = AccessLevel.PRIVATE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FieldErrorDetail</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String objectName;</span><br><span class="line">   <span class="keyword">private</span> String field;</span><br><span class="line">   <span class="keyword">private</span> String code;</span><br><span class="line">   <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FieldErrorDetail <span class="title">create</span><span class="params">(FieldError fieldError, MessageSource messageSource, Locale locale)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> FieldErrorDetail(</span><br><span class="line">         fieldError.getObjectName(),</span><br><span class="line">         fieldError.getField(),</span><br><span class="line">         fieldError.getCode(),</span><br><span class="line">         messageSource.getMessage(fieldError, locale)); <span class="comment">// 이 부분이 포인트</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>messageSource.getMessage(MessageSourceResolvable, Locale)</code>를 사용해서 xml에 정의한 국제화 메시지를 가져올 수 있다.<br>이것이 가능한 이유는 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/validation/FieldError.html" target="_blank" rel="noopener">FieldError</a>가 <code>MessageSourceResolvable</code>을 구현하고 있기 때문이다.</p><h2 id="ExceptionHandler-정의"><a href="#ExceptionHandler-정의" class="headerlink" title="ExceptionHandler 정의"></a>ExceptionHandler 정의</h2><p>API서버라면 <code>@RestControllerAdvice</code> 등을 써서 컨트롤러 어드바이스에 등록시키는 것도 좋은 방법이다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span>(BindException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ResponseStatus</span>(<span class="title">HttpStatus</span>.<span class="title">BAD_REQUEST</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">ValidationResult</span> <span class="title">handleBindException</span>(<span class="title">BindException</span> <span class="title">bindException</span>, <span class="title">Locale</span> <span class="title">locale</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> ValidationResult.create(bindException, messageSource, locale);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>응답</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"errors"</span>:[&#123;</span><br><span class="line">   <span class="attr">"objectName"</span>: <span class="string">"adderRequest"</span>,</span><br><span class="line">    <span class="attr">"field"</span>: <span class="string">"b"</span>,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"field.required"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"b를 입력해주세요"</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>기본적으로 Spring은 <code>BindException</code>에 대해서 Exception의 내용을 json으로 보여주기만 한다. 때문에 code값만 찍혀서 나오는데, 결국 code에 대응하는 국제화 메시지를 클라이언트에서 해석해야한다. 하지만 여러 클라이언트에 대응하기 위해서는 서버에서 국제화 코드를 해석해서 주는 것이 낫다.<br>국제화된 메시지를 가져오기 위해서는 <code>BindException</code>에서 <code>FieldError</code>들을 가져와 messageSource를 이용해야 한다. 위에서 설명한 커스터마이징을 거쳐야 원하는 국제화 메시지를 가져올 수 있다는 점이 조금 아쉽다.</p><p>소스 : <a href="https://github.com/supawer0728/spring-bindingresult-json" target="_blank" rel="noopener">https://github.com/supawer0728/spring-bindingresult-json</a></p>]]></content>
      
      <categories>
          
          <category> spring </category>
          
          <category> practice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> json </tag>
            
            <tag> bindingresult </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HAProxy를 이용한 WebServer-less 구조</title>
      <link href="/2018/03/10/webserveless/"/>
      <content type="html"><![CDATA[<h1 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h1><p>L4의 scale-out이 어렵다는 점을 해결하기 위해, HAProxy를 사용하게 된 후, 과연 web server가 필요할까라는 의문이 들었다. <code>apache http + tomcat</code>라는 기술 스택은 마치 표준인양 Java 서버 진영에서는 많이 사용되고 있는데, HAProxy로 L4를 대체해버린 경우에도 정말 apache http가 필요한 걸까? 한 번 따져볼 일이다.</p><a id="more"></a><h1 id="L4-Apache-Http-Tomcat-VS-HAProxy-Tomcat"><a href="#L4-Apache-Http-Tomcat-VS-HAProxy-Tomcat" class="headerlink" title="L4 + Apache Http + Tomcat VS HAProxy + Tomcat"></a>L4 + Apache Http + Tomcat VS HAProxy + Tomcat</h1><p>HAProxy로 L4/L7 switch를 대체하는 것에 대한 내용은 <a href="http://d2.naver.com/helloworld/284659" target="_blank" rel="noopener">Naver의 기술 블로그(L4/L7 스위치의 대안, 오픈 소스 로드 밸런서 HAProxy)</a>를 참고하자</p><p>다음은 각 구성을 다이어그램으로 표현한 것이다.</p><p><strong>전통적인 L4 - Server 구성</strong></p><img  src=http://www.plantuml.com/plantuml/svg/uof8JCvEJ4zLK4e4iZ9I5RGLIl9panDB5Dwqp7czgKL9ePfBGI4QNT8m5fkeKInNBHTNT79EPcfUIQo2hgwTGhIFIImNY83mi9Y3Mn9e7000><p><strong>GSLB - HAProxy - Server 구성</strong></p><img  src=http://www.plantuml.com/plantuml/svg/AqXCpavCJrLGIYn8JCv8LT1MACdFJKuiKNZJCkVrfXObXMek1OLeT4d3M6oYHh5SjLpHoJcPgNabiGgwkdOAqUd5EKcnN10A8fAHM52KNr5fY5KKQ0920KG6YzM4b22POaJO52ESfW00><h2 id="Apache-Http-Tomcat-스택을-쓰는-이유"><a href="#Apache-Http-Tomcat-스택을-쓰는-이유" class="headerlink" title="Apache Http + Tomcat 스택을 쓰는 이유"></a>Apache Http + Tomcat 스택을 쓰는 이유</h2><p>우선 왜 <code>apache http + tomcat</code>을 사용할까?<br>개인적으로 생각하는 <code>apache http + tomcat</code>을 쓰는 이유에 대해서 꼽아봤다.</p><ul><li>정적 컨텐츠 제공<ul><li>apache http는 빠른 성능의 정적 컨텐츠 제공이 강점이다.</li><li>apache http로 정적 컨텐츠를 제공하고, tomcat으로 동적 service logic을 실행한다.</li></ul></li><li>보안<ul><li>여러 조건을 가지고 ACL을 걸 수 있다.</li><li>SSL Offloading으로 tomcat에서는 http로만 잘 동작하도록 해도 문제없다.</li></ul></li><li>Apache 모듈 지원<ul><li>많은 기능을 모듈화하여 필요에 따라 사용할 수 있다.</li></ul></li><li>레퍼런스<ul><li><code>apache http + tomcat</code>은 사용자가 많다.</li><li>많은 실패사례, 성공사례, 예제와 설명을 접할 수 있다.</li></ul></li></ul><p>적어놓고 보니 안 쓸 이유가 없어보인다.<br>사실 이 외에도 많은 장점이 있다.(가상호스트, 요청 편집, 프록시 등)<br>HAProxy를 사용한다는 가정하에 몇 가지 태클을 걸어보자.</p><blockquote><p>만약 위의 기능이 필요하다면 <code>apache http + tomcat</code>을 쓰자</p></blockquote><h3 id="정적-컨텐츠-제공"><a href="#정적-컨텐츠-제공" class="headerlink" title="정적 컨텐츠 제공"></a>정적 컨텐츠 제공</h3><p>과연 정적인 컨텐츠가 서버마다 있어야 할까?<br><code>/static/a.png</code> 파일이 A서버에 요청할 때와, B서버에 요청할 때 다른 결과가 나와야할 컨텐츠가 있을까?<br>그렇지 않다면 차라리 가용성을 높게 구성한 CDN에서 관리하는게 좋다고 생각한다.</p><h3 id="보안"><a href="#보안" class="headerlink" title="보안"></a>보안</h3><p>SSL Offloading, URI, Header 등, L4/L7을 대체하는 HAProxy에서 ACL체크를 할 수 있다.</p><h3 id="Apache-모듈-지원"><a href="#Apache-모듈-지원" class="headerlink" title="Apache 모듈 지원"></a>Apache 모듈 지원</h3><p>HAProxy의 주된 기능은 당연히 Proxy이다. 만약 Caching이 필요하다거나, Apache의 모듈에서만 제공하는 기능이 반드시 필요하다면 Apache를 써야한다. 하지만 인프라 구성이 HAProxy로도 충분히 해낼 수 있다면 Apache를 사용해야할 이유가 희미해진다.</p><h3 id="성능"><a href="#성능" class="headerlink" title="성능"></a>성능</h3><blockquote><p>단일 서버를 사용한다면 native web server를 tomcat 앞에 두는 것은 대부분의 경우, HTTP connector로 standalone으로 동작하는 것보다 <code>현저하게 낮은 성능(significantly worse)</code>을 보인다. 이는 web application의 대부분이 정적 파일로 구성된 경우에도 마찬가지다.</p><footer><strong>Tomcat Reference</strong><cite><a href="https://tomcat.apache.org/tomcat-8.5-doc/connectors.html" target="_blank" rel="noopener">Connectors How To</a></cite></footer></blockquote><p>물론 <code>apache http + tomcat</code>으로 구성할 때에는, 둘 사이의 통신을 ajp 프로토콜을 사용하여 빠른 성능을 내려고 노력하지만 <strong>필연적으로 tomcat standalone보다는 느릴 수 밖에 없다</strong></p><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><p>Apache http에 의존적인 서비스를 해야하는 가에 대해 확인할 필요가 있다.<br>꼭 Apache http를 써야할 이유가 없고, 성능이나 비용 절감의 요구가 더 크다면 과감히 WebServer-less로 전환해보는 건 어떨까?</p><h1 id="기존에-사용하던-Apache의-기능을-HAProxy로-Porting-할-수-있을까"><a href="#기존에-사용하던-Apache의-기능을-HAProxy로-Porting-할-수-있을까" class="headerlink" title="기존에 사용하던 Apache의 기능을 HAProxy로 Porting 할 수 있을까?"></a>기존에 사용하던 Apache의 기능을 HAProxy로 Porting 할 수 있을까?</h1><h2 id="error-처리"><a href="#error-처리" class="headerlink" title="error 처리"></a>error 처리</h2><p><strong>apache</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ErrorDocument 400 &#x2F;error&#x2F;invalidRequest.html</span><br></pre></td></tr></table></figure><p><strong>HAProxy</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">errorfile 404 &#x2F;etc&#x2F;haproxy&#x2F;errorfiles&#x2F;404.html</span><br></pre></td></tr></table></figure><h2 id="특정-요청-오류-응답"><a href="#특정-요청-오류-응답" class="headerlink" title="특정 요청 오류 응답"></a>특정 요청 오류 응답</h2><p><strong>apache</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Redirect 404 &#x2F;favicon.ico</span><br></pre></td></tr></table></figure><p><strong>HAProxy</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">acl favicon_request path &#x2F;favicon.ico</span><br><span class="line">http-request deny 404 if favicon_request</span><br></pre></td></tr></table></figure><h2 id="특정-경로-ACL-403"><a href="#특정-경로-ACL-403" class="headerlink" title="특정 경로 ACL(403)"></a>특정 경로 ACL(403)</h2><p><strong>apache</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;DirectoryMatch &quot;(^|&#x2F;)META-INF($|&#x2F;)&quot;&gt;</span><br><span class="line">  Order deny,allow</span><br><span class="line">  deny from all</span><br><span class="line">&lt;&#x2F;DirectoryMatch&gt;</span><br></pre></td></tr></table></figure><p><strong>HAProxy</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">acl meta_inf_request path_reg (^|&#x2F;)META-INF($|&#x2F;)</span><br><span class="line">http-request deny if meta_inf_request # http-request allow if !meta_inf_request</span><br></pre></td></tr></table></figure><h2 id="응답-압축"><a href="#응답-압축" class="headerlink" title="응답 압축"></a>응답 압축</h2><p><strong>apache</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AddOutputFilterByType DEFLATE text&#x2F;plain text&#x2F;html text&#x2F;xml</span><br><span class="line">DeflateCompressionLevel 9</span><br><span class="line">BrowserMatch ^Mozilla&#x2F;4 gzip-only-text&#x2F;html</span><br></pre></td></tr></table></figure><p><strong>HAProxy</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tune.zlib.memlevel 9</span><br><span class="line">compression algo gzip</span><br><span class="line">comporession type text&#x2F;html text&#x2F;pain text&#x2F;xml</span><br></pre></td></tr></table></figure><h2 id="Request-재작성-mod-rewrite"><a href="#Request-재작성-mod-rewrite" class="headerlink" title="Request 재작성(mod_rewrite)"></a>Request 재작성(mod_rewrite)</h2><p><strong>www를 강제로 붙이기</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http-request redirect code 301 \</span><br><span class="line">location http:&#x2F;&#x2F;www.%[hdr(host)]%[capture.req.uri] \</span><br><span class="line">unless &#123; hdr_beg(host) -i www &#125;</span><br></pre></td></tr></table></figure><h2 id="VirtualHost"><a href="#VirtualHost" class="headerlink" title="VirtualHost"></a>VirtualHost</h2><p><strong>로드밸런서(GSLB)에 등록된 ip 기반으로 나누는 방식(권장)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">frontend a_domain</span><br><span class="line">  bind 133.186.189.5:80</span><br><span class="line">  bind 133.186.189.5:443 ssl crt &#x2F;etc&#x2F;haproxy&#x2F;ssl&#x2F;cert.pem</span><br><span class="line">frontend b_domain</span><br><span class="line">  bind 133.186.189.6:80</span><br><span class="line">  bind 133.186.189.6:443 ssl crt &#x2F;etc&#x2F;haproxy&#x2F;ssl&#x2F;cert.pem</span><br></pre></td></tr></table></figure><p><strong>하나의 IP로 받고 Domain name을 기준으로 front에서 나누는 방식</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">frontend http_proxy</span><br><span class="line">  bind :80</span><br><span class="line">  bind :443 ssl crt &#x2F;etc&#x2F;haproxy&#x2F;ssl&#x2F;coexapi&#x2F;cert.pem</span><br><span class="line"> </span><br><span class="line">  acl is_a hdr_beg(host) a.com</span><br><span class="line">  acl is_b hdr_beg(host) b.com</span><br><span class="line">  http-request deny 404 if !a and !b</span><br><span class="line">  use_backend a_backend if a</span><br><span class="line">  use_backend b_backend if b</span><br></pre></td></tr></table></figure><h2 id="X-Forwarded-For"><a href="#X-Forwarded-For" class="headerlink" title="X-Forwarded-For"></a>X-Forwarded-For</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">frontend www</span><br><span class="line">    mode http</span><br><span class="line">    option forwardfor except 127.0.0.1</span><br><span class="line"></span><br><span class="line">backend www</span><br><span class="line">    mode http</span><br><span class="line">    option forwardfor</span><br><span class="line">    # option forwardfor header X-Client : X-Client 이름의 헤더로 forwardfor 값을 넣음</span><br></pre></td></tr></table></figure><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>관례는 좋다고 생각한다. 레퍼런스가 많고, 배우기 쉬우며, 많은 사람들이 그 기술을 사용할 때에는 다 이유가 있기 때문에 쓴다. 하지만 레퍼런스 케이스가 모든 경우에 대입할 수 있는 것은 아니다. 새로운 요구 사항들이 생기고, 새로운 기술들을 익히는 과정에서 한 번 쯤은 내가 쓰고 있던 기술들을 돌이켜 보고 더 나은 구조는 없을까 고민해보는 것도 좋은 경험인 것 같다.</p><p>한 가지 분명히 밝혀둬야할 것은 HAProxy는 Apache의 대체 기술이 아니다. Apache는 server이고, HAProxy는 proxy이다. 각자 자신만이 할 수 있는 영역이 있고, 두 기술 모두 처리할 수 있는 영역이 있다. 여기서는 교집합이 되는 영역에 대해서 이야기하고 싶었다.</p><p>본문에서는 전체 주제를 유지하기 위해 Apache의 기능에만 많은 초점을 맞추었지만, HAProxy 또한 각 node끼리 P2P로 통신하여 전체 트래픽을 제어하거나, sticky session을 구성하거나, 임계치를 걸 수 있는 등, Apache에서는 하지 못할 일들을 할 수 있다. 그러니 한 번 쯤은 HAProxy 레퍼런스를 훑어보는 것도 좋다.</p><p>HAProxy는 L4/L7에서 요청을 다룰 수 있는 기능을 제공한다. HAProxy를 사용해서 L4/L7을 대체하는 구성을 사용하게 된다면, 그동안 당연히 사용해왔던 apache http에 대해서 다시 한 번 돌아볼 필요가 있다고 생각한다.</p>]]></content>
      
      <categories>
          
          <category> architecture </category>
          
      </categories>
      
      
        <tags>
            
            <tag> architecture </tag>
            
            <tag> spring-boot </tag>
            
            <tag> haproxy </tag>
            
            <tag> web-server </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
